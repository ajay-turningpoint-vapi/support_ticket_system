{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _callbacks = require(\"../../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _variable_wrapper = require(\"../../core/utils/variable_wrapper\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _config = require(\"../../core/config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _object = require(\"../../core/utils/object\");\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _inflector = require(\"../../core/utils/inflector\");\n\nvar _inflector2 = _interopRequireDefault(_inflector);\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\n\nvar _number = require(\"../../localization/number\");\n\nvar _number2 = _interopRequireDefault(_number);\n\nvar _date = require(\"../../localization/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _abstract_store = require(\"../../data/abstract_store\");\n\nvar _abstract_store2 = _interopRequireDefault(_abstract_store);\n\nvar _data_source = require(\"../../data/data_source/data_source\");\n\nvar _utils = require(\"../../data/data_source/utils\");\n\nvar _filtering = require(\"../shared/filtering\");\n\nvar _filtering2 = _interopRequireDefault(_filtering);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else {\n      if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"selectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\nvar IGNORE_COLUMN_OPTION_NAMES = {\n  visibleWidth: true,\n  bestFitWidth: true,\n  bufferedFilterValue: true\n};\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\nvar globalColumnId = 1;\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      commonColumnSettings: {\n        allowFiltering: true,\n        allowHiding: true,\n        allowSorting: true,\n        allowEditing: true,\n        encodeHtml: true,\n        trueText: _message2.default.format(\"dxDataGrid-trueText\"),\n        falseText: _message2.default.format(\"dxDataGrid-falseText\")\n      },\n      allowColumnReordering: false,\n      allowColumnResizing: false,\n      columnResizingMode: \"nextColumn\",\n      columnMinWidth: void 0,\n      columnWidth: void 0,\n      adaptColumnWidthByRatio: true,\n      columns: void 0,\n      regenerateColumnsByVisibleItems: false,\n      customizeColumns: null,\n      dateSerializationFormat: void 0\n    };\n  },\n  controllers: {\n    columns: _uiGrid_core2.default.Controller.inherit(function () {\n      var DEFAULT_COLUMN_OPTIONS = {\n        visible: true,\n        showInColumnChooser: true\n      };\n      var DATATYPE_OPERATIONS = {\n        number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\n        date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\n      };\n      var COLUMN_INDEX_OPTIONS = {\n        visibleIndex: true,\n        groupIndex: true,\n        grouped: true,\n        sortIndex: true,\n        sortOrder: true\n      };\n      var GROUP_LOCATION = \"group\";\n      var COLUMN_CHOOSER_LOCATION = \"columnChooser\";\n\n      var setFilterOperationsAsDefaultValues = function (column) {\n        column.filterOperations = column.defaultFilterOperations;\n      };\n\n      var createColumn = function (that, columnOptions, userStateColumnOptions, bandColumn) {\n        var commonColumnOptions = {};\n\n        if (columnOptions) {\n          if ((0, _type.isString)(columnOptions)) {\n            columnOptions = {\n              dataField: columnOptions\n            };\n          }\n\n          var result = {};\n\n          if (columnOptions.command) {\n            result = (0, _object.deepExtendArraySafe)(commonColumnOptions, columnOptions);\n          } else {\n            commonColumnOptions = that.getCommonSettings(columnOptions);\n\n            if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\n              columnOptions = (0, _extend.extend)({}, columnOptions, {\n                dataField: userStateColumnOptions.dataField\n              });\n            }\n\n            var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\n\n            if (!columnOptions.type) {\n              result = {\n                headerId: \"dx-col-\".concat(globalColumnId++)\n              };\n            }\n\n            result = (0, _object.deepExtendArraySafe)(result, DEFAULT_COLUMN_OPTIONS);\n            (0, _object.deepExtendArraySafe)(result, commonColumnOptions);\n            (0, _object.deepExtendArraySafe)(result, calculatedColumnOptions);\n            (0, _object.deepExtendArraySafe)(result, columnOptions);\n            (0, _object.deepExtendArraySafe)(result, {\n              selector: null\n            });\n          }\n\n          if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\n            setFilterOperationsAsDefaultValues(result);\n          }\n\n          return result;\n        }\n      };\n\n      var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\n        var result = [];\n\n        if (columnsOptions) {\n          _iterator2.default.each(columnsOptions, function (index, columnOptions) {\n            var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\n\n            var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\n\n            if (column) {\n              if (bandColumn) {\n                column.ownerBand = bandColumn;\n              }\n\n              result.push(column);\n\n              if (column.columns) {\n                result = result.concat(createColumnsFromOptions(that, column.columns, column));\n                delete column.columns;\n                column.hasColumns = true;\n              }\n            }\n          });\n        }\n\n        return result;\n      };\n\n      var getParentBandColumns = function (columnIndex, columnParentByIndex) {\n        var result = [];\n        var parent = columnParentByIndex[columnIndex];\n\n        while (parent) {\n          result.unshift(parent);\n          columnIndex = parent.index;\n          parent = columnParentByIndex[columnIndex];\n        }\n\n        return result;\n      };\n\n      var _getChildrenByBandColumn = function (columnIndex, columnChildrenByIndex, recursive) {\n        var result = [];\n        var children = columnChildrenByIndex[columnIndex];\n\n        if (children) {\n          for (var i = 0; i < children.length; i++) {\n            var column = children[i];\n\n            if (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped) {\n              result.push(column);\n\n              if (recursive && column.isBand) {\n                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive));\n              }\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var getColumnByIndexes = function (that, columnIndexes) {\n        var result;\n        var columns;\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var callbackFilter = function (column) {\n          var ownerBand = result ? result.index : void 0;\n          return column.ownerBand === ownerBand;\n        };\n\n        if (bandColumnsCache.isPlain) {\n          result = that._columns[columnIndexes[0]];\n        } else {\n          columns = that._columns.filter(callbackFilter);\n\n          for (var i = 0; i < columnIndexes.length; i++) {\n            result = columns[columnIndexes[i]];\n\n            if (result) {\n              columns = that._columns.filter(callbackFilter);\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var getColumnFullPath = function (that, column) {\n        var result = [];\n        var columns;\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var callbackFilter = function (item) {\n          return item.ownerBand === column.ownerBand;\n        };\n\n        if (bandColumnsCache.isPlain) {\n          var columnIndex = that._columns.indexOf(column);\n\n          if (columnIndex >= 0) {\n            result = [\"columns[\".concat(columnIndex, \"]\")];\n          }\n        } else {\n          columns = that._columns.filter(callbackFilter);\n\n          while (columns.length && columns.indexOf(column) !== -1) {\n            result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\n            column = bandColumnsCache.columnParentByIndex[column.index];\n            columns = column ? that._columns.filter(callbackFilter) : [];\n          }\n        }\n\n        return result.join(\".\");\n      };\n\n      var calculateColspan = function calculateColspan(that, columnID) {\n        var colspan = 0;\n        var columns = that.getChildrenByBandColumn(columnID, true);\n\n        _iterator2.default.each(columns, function (_, column) {\n          if (column.isBand) {\n            column.colspan = column.colspan || calculateColspan(that, column.index);\n            colspan += column.colspan || 1;\n          } else {\n            colspan += 1;\n          }\n        });\n\n        return colspan;\n      };\n\n      var processBandColumns = function (that, columns, bandColumnsCache) {\n        var rowspan;\n\n        for (var i = 0; i < columns.length; i++) {\n          var column = columns[i];\n\n          if (column.visible || column.command) {\n            if (column.isBand) {\n              column.colspan = column.colspan || calculateColspan(that, column.index);\n            }\n\n            if (!column.isBand || !column.colspan) {\n              rowspan = that.getRowCount();\n\n              if (!column.command && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\n                rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length;\n              }\n\n              if (rowspan > 1) {\n                column.rowspan = rowspan;\n              }\n            }\n          }\n        }\n      };\n\n      var getValueDataType = function (value) {\n        var dataType = (0, _type.type)(value);\n\n        if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\n          dataType = void 0;\n        }\n\n        return dataType;\n      };\n\n      var getSerializationFormat = function (dataType, value) {\n        switch (dataType) {\n          case \"date\":\n          case \"datetime\":\n            return _date_serialization2.default.getDateSerializationFormat(value);\n\n          case \"number\":\n            if ((0, _type.isString)(value)) {\n              return \"string\";\n            }\n\n            if ((0, _type.isNumeric)(value)) {\n              return null;\n            }\n\n        }\n      };\n\n      var updateSerializers = function (options, dataType) {\n        if (!options.deserializeValue) {\n          if ((0, _uiGrid_core3.isDateType)(dataType)) {\n            options.deserializeValue = function (value) {\n              return _date_serialization2.default.deserializeDate(value);\n            };\n\n            options.serializeValue = function (value) {\n              return (0, _type.isString)(value) ? value : _date_serialization2.default.serializeDate(value, this.serializationFormat);\n            };\n          }\n\n          if (\"number\" === dataType) {\n            options.deserializeValue = function (value) {\n              var parsedValue = parseFloat(value);\n              return isNaN(parsedValue) ? value : parsedValue;\n            };\n\n            options.serializeValue = function (value, target) {\n              if (\"filter\" === target) {\n                return value;\n              }\n\n              return (0, _type.isDefined)(value) && \"string\" === this.serializationFormat ? value.toString() : value;\n            };\n          }\n        }\n      };\n\n      var getAlignmentByDataType = function (dataType, isRTL) {\n        switch (dataType) {\n          case \"number\":\n            return \"right\";\n\n          case \"boolean\":\n            return \"center\";\n\n          default:\n            return (0, _position.getDefaultAlignment)(isRTL);\n        }\n      };\n\n      var customizeTextForBooleanDataType = function (e) {\n        if (true === e.value) {\n          return this.trueText || \"true\";\n        } else {\n          if (false === e.value) {\n            return this.falseText || \"false\";\n          } else {\n            return e.valueText || \"\";\n          }\n        }\n      };\n\n      var getCustomizeTextByDataType = function (dataType) {\n        if (\"boolean\" === dataType) {\n          return customizeTextForBooleanDataType;\n        }\n      };\n\n      var createColumnsFromDataSource = function (that, dataSource) {\n        var firstItems = that._getFirstItems(dataSource);\n\n        var fieldName;\n        var processedFields = {};\n        var result = [];\n\n        for (var i = 0; i < firstItems.length; i++) {\n          if (firstItems[i]) {\n            for (fieldName in firstItems[i]) {\n              if (!(0, _type.isFunction)(firstItems[i][fieldName]) || (0, _variable_wrapper.isWrapped)(firstItems[i][fieldName])) {\n                processedFields[fieldName] = true;\n              }\n            }\n          }\n        }\n\n        for (fieldName in processedFields) {\n          if (0 !== fieldName.indexOf(\"__\")) {\n            var column = createColumn(that, fieldName);\n            result.push(column);\n          }\n        }\n\n        return result;\n      };\n\n      var updateColumnIndexes = function (that) {\n        _iterator2.default.each(that._columns, function (index, column) {\n          column.index = index;\n        });\n\n        _iterator2.default.each(that._columns, function (index, column) {\n          if ((0, _type.isObject)(column.ownerBand)) {\n            column.ownerBand = column.ownerBand.index;\n          }\n        });\n\n        _iterator2.default.each(that._commandColumns, function (index, column) {\n          column.index = -(index + 1);\n        });\n      };\n\n      var updateColumnGroupIndexes = function (that, currentColumn) {\n        (0, _array.normalizeIndexes)(that._columns, \"groupIndex\", currentColumn, function (column) {\n          var grouped = column.grouped;\n          delete column.grouped;\n          return grouped;\n        });\n      };\n\n      var updateColumnSortIndexes = function (that, currentColumn) {\n        _iterator2.default.each(that._columns, function (index, column) {\n          if ((0, _type.isDefined)(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\n            delete column.sortIndex;\n          }\n        });\n\n        (0, _array.normalizeIndexes)(that._columns, \"sortIndex\", currentColumn, function (column) {\n          return !(0, _type.isDefined)(column.groupIndex) && isSortOrderValid(column.sortOrder);\n        });\n      };\n\n      var updateColumnVisibleIndexes = function (that, currentColumn) {\n        var key;\n        var column;\n        var bandColumns = {};\n        var result = [];\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var columns = that._columns.filter(function (column) {\n          return !column.command;\n        });\n\n        for (var i = 0; i < columns.length; i++) {\n          column = columns[i];\n          var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\n\n          if (parentBandColumns.length) {\n            var bandColumnIndex = parentBandColumns[parentBandColumns.length - 1].index;\n            bandColumns[bandColumnIndex] = bandColumns[bandColumnIndex] || [];\n            bandColumns[bandColumnIndex].push(column);\n          } else {\n            result.push(column);\n          }\n        }\n\n        for (key in bandColumns) {\n          (0, _array.normalizeIndexes)(bandColumns[key], \"visibleIndex\", currentColumn);\n        }\n\n        (0, _array.normalizeIndexes)(result, \"visibleIndex\", currentColumn);\n      };\n\n      var getColumnIndexByVisibleIndex = function (that, visibleIndex, location) {\n        var rowIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.rowIndex : null;\n        var columns = location === GROUP_LOCATION ? that.getGroupColumns() : location === COLUMN_CHOOSER_LOCATION ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\n        var column;\n        visibleIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\n        column = columns[visibleIndex];\n\n        if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\n          column = that._columns.filter(function (col) {\n            return column.type === col.type;\n          })[0] || column;\n        }\n\n        return column && (0, _type.isDefined)(column.index) ? column.index : -1;\n      };\n\n      var moveColumnToGroup = function (that, column, groupIndex) {\n        var groupColumns = that.getGroupColumns();\n        var i;\n\n        if (groupIndex >= 0) {\n          for (i = 0; i < groupColumns.length; i++) {\n            if (groupColumns[i].groupIndex >= groupIndex) {\n              groupColumns[i].groupIndex++;\n            }\n          }\n        } else {\n          groupIndex = 0;\n\n          for (i = 0; i < groupColumns.length; i++) {\n            groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1);\n          }\n        }\n\n        return groupIndex;\n      };\n\n      function checkUserStateColumn(column, userStateColumn) {\n        return column && userStateColumn && userStateColumn.name === column.name && (userStateColumn.dataField === column.dataField || column.name);\n      }\n\n      var applyUserState = function (that) {\n        var columnsUserState = that._columnsUserState;\n        var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\n        var columns = that._columns;\n        var columnCountById = {};\n        var resultColumns = [];\n        var allColumnsHaveState = true;\n        var userStateColumnIndexes = [];\n        var column;\n        var userStateColumnIndex;\n        var i;\n\n        function applyFieldsState(column, userStateColumn) {\n          if (!userStateColumn) {\n            return;\n          }\n\n          for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\n            var fieldName = USER_STATE_FIELD_NAMES[index];\n\n            if ((0, _array.inArray)(fieldName, ignoreColumnOptionNames) >= 0) {\n              continue;\n            }\n\n            if (\"dataType\" === fieldName) {\n              column[fieldName] = column[fieldName] || userStateColumn[fieldName];\n            } else {\n              if ((0, _array.inArray)(fieldName, USER_STATE_FIELD_NAMES_15_1) >= 0) {\n                if (fieldName in userStateColumn) {\n                  column[fieldName] = userStateColumn[fieldName];\n                }\n              } else {\n                if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\n                  column.defaultSelectedFilterOperation = column[fieldName] || null;\n                }\n\n                column[fieldName] = userStateColumn[fieldName];\n              }\n            }\n          }\n        }\n\n        function findUserStateColumn(columnsUserState, column) {\n          var id = column.name || column.dataField;\n          var count = columnCountById[id] || 0;\n\n          for (var j = 0; j < columnsUserState.length; j++) {\n            if (checkUserStateColumn(column, columnsUserState[j])) {\n              if (count) {\n                count--;\n              } else {\n                columnCountById[id] = columnCountById[id] || 0;\n                columnCountById[id]++;\n                return j;\n              }\n            }\n          }\n\n          return -1;\n        }\n\n        if (columnsUserState) {\n          for (i = 0; i < columns.length; i++) {\n            userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\n            allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\n            userStateColumnIndexes.push(userStateColumnIndex);\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            column = columns[i];\n            userStateColumnIndex = userStateColumnIndexes[i];\n\n            if (that._hasUserState || allColumnsHaveState) {\n              applyFieldsState(column, columnsUserState[userStateColumnIndex]);\n            }\n\n            if (userStateColumnIndex >= 0 && (0, _type.isDefined)(columnsUserState[userStateColumnIndex].initialIndex)) {\n              resultColumns[userStateColumnIndex] = column;\n            } else {\n              resultColumns.push(column);\n            }\n          }\n\n          var hasAddedBands = false;\n\n          for (i = 0; i < columnsUserState.length; i++) {\n            var columnUserState = columnsUserState[i];\n\n            if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\n              column = createColumn(that, columnUserState.added);\n              applyFieldsState(column, columnUserState);\n              resultColumns.push(column);\n\n              if (columnUserState.added.columns) {\n                hasAddedBands = true;\n              }\n            }\n          }\n\n          if (hasAddedBands) {\n            updateColumnIndexes(that);\n            resultColumns = createColumnsFromOptions(that, resultColumns);\n          }\n\n          assignColumns(that, resultColumns);\n        }\n      };\n\n      var updateIndexes = function (that, column) {\n        updateColumnIndexes(that);\n        updateColumnGroupIndexes(that, column);\n        updateColumnSortIndexes(that, column);\n        resetBandColumnsCache(that);\n        updateColumnVisibleIndexes(that, column);\n      };\n\n      var resetColumnsCache = function (that) {\n        that.resetColumnsCache();\n      };\n\n      function assignColumns(that, columns) {\n        that._columns = columns;\n        resetColumnsCache(that);\n        that.updateColumnDataTypes();\n      }\n\n      var updateColumnChanges = function (that, changeType, optionName, columnIndex) {\n        var columnChanges = that._columnChanges || {\n          optionNames: {\n            length: 0\n          },\n          changeTypes: {\n            length: 0\n          },\n          columnIndex: columnIndex\n        };\n        optionName = optionName || \"all\";\n        optionName = optionName.split(\".\")[0];\n        var changeTypes = columnChanges.changeTypes;\n\n        if (changeType && !changeTypes[changeType]) {\n          changeTypes[changeType] = true;\n          changeTypes.length++;\n        }\n\n        var optionNames = columnChanges.optionNames;\n\n        if (optionName && !optionNames[optionName]) {\n          optionNames[optionName] = true;\n          optionNames.length++;\n        }\n\n        if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\n          delete columnChanges.columnIndex;\n        }\n\n        that._columnChanges = columnChanges;\n        resetColumnsCache(that);\n      };\n\n      var fireColumnsChanged = function (that) {\n        var onColumnsChanging = that.option(\"onColumnsChanging\");\n        var columnChanges = that._columnChanges;\n        var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\n\n        var needReinit = function (options) {\n          return options && reinitOptionNames.some(function (name) {\n            return options[name];\n          });\n        };\n\n        if (that.isInitialized() && !that._updateLockCount && columnChanges) {\n          if (onColumnsChanging) {\n            that._updateLockCount++;\n            onColumnsChanging((0, _extend.extend)({\n              component: that.component\n            }, columnChanges));\n            that._updateLockCount--;\n          }\n\n          that._columnChanges = void 0;\n\n          if (needReinit(columnChanges.optionNames)) {\n            that.reinit();\n          } else {\n            that.columnsChanged.fire(columnChanges);\n          }\n        }\n      };\n\n      var updateSortOrderWhenGrouping = function (column, groupIndex, prevGroupIndex) {\n        var columnWasGrouped = prevGroupIndex >= 0;\n\n        if (groupIndex >= 0) {\n          if (!columnWasGrouped) {\n            column.lastSortOrder = column.sortOrder;\n          }\n        } else {\n          column.sortOrder = column.lastSortOrder;\n        }\n      };\n\n      var fireOptionChanged = function (that, options) {\n        var value = options.value;\n        var optionName = options.optionName;\n        var prevValue = options.prevValue;\n        var fullOptionName = options.fullOptionName;\n        var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\n\n        if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\n          that._skipProcessingColumnsChange = fullOptionPath;\n\n          that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\n\n          that._skipProcessingColumnsChange = false;\n        }\n      };\n\n      var columnOptionCore = function (that, column, optionName, value, notFireEvent) {\n        var optionGetter = _data2.default.compileGetter(optionName);\n\n        var columnIndex = column.index;\n        var columns;\n        var changeType;\n        var initialColumn;\n\n        if (3 === arguments.length) {\n          return optionGetter(column, {\n            functionsAsIs: true\n          });\n        }\n\n        var prevValue = optionGetter(column, {\n          functionsAsIs: true\n        });\n\n        if (prevValue !== value) {\n          if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\n            changeType = \"grouping\";\n            updateSortOrderWhenGrouping(column, value, prevValue);\n          } else {\n            if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\n              changeType = \"sorting\";\n            } else {\n              changeType = \"columns\";\n            }\n          }\n\n          var optionSetter = _data2.default.compileSetter(optionName);\n\n          optionSetter(column, value, {\n            functionsAsIs: true\n          });\n          var fullOptionName = getColumnFullPath(that, column);\n\n          if (COLUMN_INDEX_OPTIONS[optionName]) {\n            updateIndexes(that, column);\n            value = optionGetter(column);\n          }\n\n          fullOptionName && fireOptionChanged(that, {\n            fullOptionName: fullOptionName,\n            optionName: optionName,\n            value: value,\n            prevValue: prevValue\n          });\n\n          if (!(0, _type.isDefined)(prevValue) && !(0, _type.isDefined)(value) && 0 !== optionName.indexOf(\"buffer\")) {\n            notFireEvent = true;\n          }\n\n          if (!notFireEvent) {\n            if ((0, _array.inArray)(optionName, USER_STATE_FIELD_NAMES) < 0 && \"visibleWidth\" !== optionName) {\n              columns = that.option(\"columns\");\n              initialColumn = that.getColumnByPath(fullOptionName, columns);\n\n              if ((0, _type.isString)(initialColumn)) {\n                initialColumn = columns[columnIndex] = {\n                  dataField: initialColumn\n                };\n              }\n\n              if (initialColumn && checkUserStateColumn(initialColumn, column)) {\n                optionSetter(initialColumn, value, {\n                  functionsAsIs: true\n                });\n              }\n            }\n\n            updateColumnChanges(that, changeType, optionName, columnIndex);\n          } else {\n            resetColumnsCache(that);\n          }\n        }\n      };\n\n      function isSortOrderValid(sortOrder) {\n        return \"asc\" === sortOrder || \"desc\" === sortOrder;\n      }\n\n      var addExpandColumn = function (that) {\n        var options = that._getExpandColumnOptions();\n\n        that.addCommandColumn(options);\n      };\n\n      var defaultSetCellValue = function (data, value) {\n        var path = this.dataField.split(\".\");\n        var dotCount = path.length - 1;\n\n        if (this.serializeValue) {\n          value = this.serializeValue(value);\n        }\n\n        for (var i = 0; i < dotCount; i++) {\n          var name = path[i];\n          data = data[name] = data[name] || {};\n        }\n\n        data[path[dotCount]] = value;\n      };\n\n      var getDataColumns = function getDataColumns(columns, rowIndex, bandColumnID) {\n        var result = [];\n        rowIndex = rowIndex || 0;\n        columns[rowIndex] && _iterator2.default.each(columns[rowIndex], function (_, column) {\n          if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\n            if (!column.isBand || !column.colspan) {\n              if (!column.command || rowIndex < 1) {\n                result.push(column);\n              }\n            } else {\n              result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index));\n            }\n          }\n        });\n        return result;\n      };\n\n      var _getRowCount = function (that) {\n        var rowCount = 1;\n        var bandColumnsCache = that.getBandColumnsCache();\n        var columnParentByIndex = bandColumnsCache.columnParentByIndex;\n\n        that._columns.forEach(function (column) {\n          var parents = getParentBandColumns(column.index, columnParentByIndex);\n          var invisibleParents = parents.filter(function (column) {\n            return !column.visible;\n          });\n\n          if (column.visible && !invisibleParents.length) {\n            rowCount = Math.max(rowCount, parents.length + 1);\n          }\n        });\n\n        return rowCount;\n      };\n\n      var isCustomCommandColumn = function (that, commandColumn) {\n        return !!that._columns.filter(function (column) {\n          return column.type === commandColumn.type;\n        }).length;\n      };\n\n      var getFixedPosition = function (that, column) {\n        var rtlEnabled = that.option(\"rtlEnabled\");\n\n        if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\n          return rtlEnabled ? \"right\" : \"left\";\n        }\n\n        return column.fixedPosition;\n      };\n\n      var processExpandColumns = function (columns, expandColumns, type, columnIndex) {\n        var customColumnIndex;\n        var rowCount = this.getRowCount();\n        var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\n        var expandColumnsByType = expandColumns.filter(function (column) {\n          return column.type === type;\n        });\n        columns.forEach(function (column, index) {\n          if (column.type === type) {\n            customColumnIndex = index;\n            rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount;\n          }\n        });\n\n        if (rowspan > 1) {\n          expandColumnsByType = _iterator2.default.map(expandColumnsByType, function (expandColumn) {\n            return (0, _extend.extend)({}, expandColumn, {\n              rowspan: rowspan\n            });\n          });\n        }\n\n        expandColumnsByType.unshift.apply(expandColumnsByType, (0, _type.isDefined)(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\n        columns.splice.apply(columns, expandColumnsByType);\n        return rowspan || 1;\n      };\n\n      var digitsCount = function (number) {\n        var i;\n\n        for (i = 0; number > 1; i++) {\n          number /= 10;\n        }\n\n        return i;\n      };\n\n      var numberToString = function (number, digitsCount) {\n        var str = number ? number.toString() : \"0\";\n\n        while (str.length < digitsCount) {\n          str = \"0\" + str;\n        }\n\n        return str;\n      };\n\n      var mergeColumns = function (that, columns, commandColumns, needToExtend) {\n        var column;\n        var commandColumnIndex;\n        var result = columns.slice().map(function (column) {\n          return (0, _extend.extend)({}, column);\n        });\n\n        var isColumnFixing = that._isColumnFixing();\n\n        var defaultCommandColumns = commandColumns.slice().map(function (column) {\n          return (0, _extend.extend)({\n            fixed: isColumnFixing\n          }, column);\n        });\n\n        var getCommandColumnIndex = function (column) {\n          return commandColumns.reduce(function (result, commandColumn, index) {\n            var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\n            return commandColumn.type === columnType || commandColumn.command === column.command ? index : result;\n          }, -1);\n        };\n\n        var callbackFilter = function (commandColumn) {\n          return commandColumn.command !== commandColumns[commandColumnIndex].command;\n        };\n\n        for (var i = 0; i < columns.length; i++) {\n          column = columns[i];\n          commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\n\n          if (commandColumnIndex >= 0) {\n            if (needToExtend) {\n              result[i] = (0, _extend.extend)({\n                fixed: isColumnFixing\n              }, commandColumns[commandColumnIndex], column);\n\n              if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\n                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter);\n              }\n            } else {\n              var columnOptions = {\n                visibleIndex: column.visibleIndex,\n                index: column.index,\n                headerId: column.headerId,\n                allowFixing: 0 === column.groupIndex,\n                allowReordering: 0 === column.groupIndex,\n                groupIndex: column.groupIndex\n              };\n              result[i] = (0, _extend.extend)({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions);\n            }\n          }\n        }\n\n        if (columns.length && needToExtend && defaultCommandColumns.length) {\n          result = result.concat(defaultCommandColumns);\n        }\n\n        return result;\n      };\n\n      var isColumnFixed = function (that, column) {\n        return (0, _type.isDefined)(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();\n      };\n\n      var convertOwnerBandToColumnReference = function (columns) {\n        columns.forEach(function (column) {\n          if ((0, _type.isDefined)(column.ownerBand)) {\n            column.ownerBand = columns[column.ownerBand];\n          }\n        });\n      };\n\n      var resetBandColumnsCache = function (that) {\n        that._bandColumnsCache = void 0;\n      };\n\n      var findColumn = function (columns, identifier) {\n        var identifierOptionName = (0, _type.isString)(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\n        var column;\n\n        if (void 0 === identifier) {\n          return;\n        }\n\n        if (identifierOptionName) {\n          identifier = identifier.substr(identifierOptionName.length + 1);\n        }\n\n        if (identifierOptionName) {\n          column = columns.filter(function (column) {\n            return \"\" + column[identifierOptionName] === identifier;\n          })[0];\n        } else {\n          [\"index\", \"name\", \"dataField\", \"caption\"].some(function (optionName) {\n            column = columns.filter(function (column) {\n              return column[optionName] === identifier;\n            })[0];\n            return !!column;\n          });\n        }\n\n        return column;\n      };\n\n      return {\n        _getExpandColumnOptions: function () {\n          return {\n            type: \"expand\",\n            command: \"expand\",\n            width: \"auto\",\n            cssClass: COMMAND_EXPAND_CLASS,\n            allowEditing: false,\n            allowGrouping: false,\n            allowSorting: false,\n            allowResizing: false,\n            allowReordering: false,\n            allowHiding: false\n          };\n        },\n        _getFirstItems: function (dataSource) {\n          var groupsCount;\n          var items = [];\n\n          var getFirstItemsCore = function getFirstItemsCore(items, groupsCount) {\n            if (!items || !groupsCount) {\n              return items;\n            }\n\n            for (var i = 0; i < items.length; i++) {\n              var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\n\n              if (childItems && childItems.length) {\n                return childItems;\n              }\n            }\n          };\n\n          if (dataSource && dataSource.items().length > 0) {\n            groupsCount = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group()).length;\n            items = getFirstItemsCore(dataSource.items(), groupsCount) || [];\n          }\n\n          return items;\n        },\n        _endUpdateCore: function () {\n          !this._skipProcessingColumnsChange && fireColumnsChanged(this);\n        },\n        init: function () {\n          var that = this;\n          var columns = that.option(\"columns\");\n          that._commandColumns = that._commandColumns || [];\n          that._columns = that._columns || [];\n          that._isColumnsFromOptions = !!columns;\n\n          if (that._isColumnsFromOptions) {\n            assignColumns(that, columns ? createColumnsFromOptions(that, columns) : []);\n            applyUserState(that);\n          } else {\n            assignColumns(that, that._columnsUserState ? createColumnsFromOptions(that, that._columnsUserState) : that._columns);\n          }\n\n          addExpandColumn(that);\n\n          if (that._dataSourceApplied) {\n            that.applyDataSource(that._dataSource, true);\n          } else {\n            updateIndexes(that);\n          }\n        },\n        callbackNames: function () {\n          return [\"columnsChanged\"];\n        },\n        getColumnByPath: function (path, columns) {\n          var that = this;\n          var column;\n          var columnIndexes = [];\n          path.replace(regExp, function (_, columnIndex) {\n            columnIndexes.push(parseInt(columnIndex));\n            return \"\";\n          });\n\n          if (columnIndexes.length) {\n            if (columns) {\n              column = columnIndexes.reduce(function (column, index) {\n                return column && column.columns && column.columns[index];\n              }, {\n                columns: columns\n              });\n            } else {\n              column = getColumnByIndexes(that, columnIndexes);\n            }\n          }\n\n          return column;\n        },\n        optionChanged: function (args) {\n          var needUpdateRequireResize;\n\n          switch (args.name) {\n            case \"adaptColumnWidthByRatio\":\n              args.handled = true;\n              break;\n\n            case \"dataSource\":\n              if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\n                this._columns = [];\n              }\n\n              break;\n\n            case \"columns\":\n              needUpdateRequireResize = this._skipProcessingColumnsChange;\n              args.handled = true;\n\n              if (!this._skipProcessingColumnsChange) {\n                if (args.name === args.fullName) {\n                  this._columnsUserState = null;\n                  this._ignoreColumnOptionNames = null;\n                  this.init();\n                } else {\n                  this._columnOptionChanged(args);\n\n                  needUpdateRequireResize = true;\n                }\n              }\n\n              if (needUpdateRequireResize) {\n                this._updateRequireResize(args);\n              }\n\n              break;\n\n            case \"commonColumnSettings\":\n            case \"columnAutoWidth\":\n            case \"allowColumnResizing\":\n            case \"allowColumnReordering\":\n            case \"columnFixing\":\n            case \"grouping\":\n            case \"groupPanel\":\n            case \"regenerateColumnsByVisibleItems\":\n            case \"customizeColumns\":\n            case \"editing\":\n            case \"columnHidingEnabled\":\n            case \"dateSerializationFormat\":\n            case \"columnResizingMode\":\n            case \"columnMinWidth\":\n            case \"columnWidth\":\n              args.handled = true;\n              var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\n              var isEditingPopup = args.fullName && 0 === args.fullName.indexOf(\"editing.popup\");\n              var isEditingForm = args.fullName && 0 === args.fullName.indexOf(\"editing.form\");\n\n              if (!isEditingPopup && !isEditingForm) {\n                this.reinit(ignoreColumnOptionNames);\n              }\n\n              break;\n\n            case \"rtlEnabled\":\n              this.reinit();\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        _columnOptionChanged: function (args) {\n          var columnOptionValue = {};\n          var column = this.getColumnByPath(args.fullName);\n          var columnOptionName = args.fullName.replace(regExp, \"\");\n\n          if (column) {\n            if (columnOptionName) {\n              columnOptionValue[columnOptionName] = args.value;\n            } else {\n              columnOptionValue = args.value;\n            }\n\n            this._skipProcessingColumnsChange = args.fullName;\n            this.columnOption(column.index, columnOptionValue);\n            this._skipProcessingColumnsChange = false;\n          }\n        },\n        _updateRequireResize: function (args) {\n          var component = this.component;\n\n          if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\n            component._requireResize = true;\n          }\n        },\n        publicMethods: function () {\n          return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"];\n        },\n        applyDataSource: function (dataSource, forceApplying) {\n          var that = this;\n          var isDataSourceLoaded = dataSource && dataSource.isLoaded();\n          that._dataSource = dataSource;\n\n          if (!that._dataSourceApplied || 0 === that._dataSourceColumnsCount || forceApplying || that.option(\"regenerateColumnsByVisibleItems\")) {\n            if (isDataSourceLoaded) {\n              if (!that._isColumnsFromOptions) {\n                var columnsFromDataSource = createColumnsFromDataSource(that, dataSource);\n\n                if (columnsFromDataSource.length) {\n                  assignColumns(that, columnsFromDataSource);\n                  that._dataSourceColumnsCount = that._columns.length;\n                  applyUserState(that);\n                }\n              }\n\n              return that.updateColumns(dataSource, forceApplying);\n            } else {\n              that._dataSourceApplied = false;\n            }\n          } else {\n            if (isDataSourceLoaded && !that.isAllDataTypesDefined(true) && that.updateColumnDataTypes(dataSource)) {\n              updateColumnChanges(that, \"columns\");\n              fireColumnsChanged(that);\n              return new _deferred.Deferred().reject().promise();\n            }\n          }\n        },\n        reset: function () {\n          this._dataSourceApplied = false;\n          this._dataSourceColumnsCount = void 0;\n          this.reinit();\n        },\n        resetColumnsCache: function () {\n          var that = this;\n          that._visibleColumns = void 0;\n          that._fixedColumns = void 0;\n          that._rowCount = void 0;\n          resetBandColumnsCache(that);\n        },\n        reinit: function (ignoreColumnOptionNames) {\n          this._columnsUserState = this.getUserState();\n          this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\n          this.init();\n\n          if (ignoreColumnOptionNames) {\n            this._ignoreColumnOptionNames = null;\n          }\n        },\n        isInitialized: function () {\n          return !!this._columns.length || !!this.option(\"columns\");\n        },\n        isDataSourceApplied: function () {\n          return this._dataSourceApplied;\n        },\n        getCommonSettings: function (column) {\n          var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\n          var groupingOptions = this.option(\"grouping\") || {};\n          var groupPanelOptions = this.option(\"groupPanel\") || {};\n          return (0, _extend.extend)({\n            allowFixing: this.option(\"columnFixing.enabled\"),\n            allowResizing: this.option(\"allowColumnResizing\") || void 0,\n            allowReordering: this.option(\"allowColumnReordering\"),\n            minWidth: this.option(\"columnMinWidth\"),\n            width: this.option(\"columnWidth\"),\n            autoExpandGroup: groupingOptions.autoExpandAll,\n            allowCollapsing: groupingOptions.allowCollapsing,\n            allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\n          }, commonColumnSettings);\n        },\n        isColumnOptionUsed: function (optionName) {\n          for (var i = 0; i < this._columns.length; i++) {\n            if (this._columns[i][optionName]) {\n              return true;\n            }\n          }\n        },\n        isAllDataTypesDefined: function (checkSerializers) {\n          var columns = this._columns;\n\n          if (!columns.length) {\n            return false;\n          }\n\n          for (var i = 0; i < columns.length; i++) {\n            if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\n              continue;\n            }\n\n            if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        getColumns: function () {\n          return this._columns;\n        },\n        isBandColumnsUsed: function () {\n          return this.getColumns().some(function (column) {\n            return column.isBand;\n          });\n        },\n        getGroupColumns: function () {\n          var result = [];\n\n          _iterator2.default.each(this._columns, function () {\n            var column = this;\n\n            if ((0, _type.isDefined)(column.groupIndex)) {\n              result[column.groupIndex] = column;\n            }\n          });\n\n          return result;\n        },\n        getVisibleColumns: function (rowIndex) {\n          this._visibleColumns = this._visibleColumns || this._getVisibleColumnsCore();\n          rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\n          return this._visibleColumns[rowIndex] || [];\n        },\n        getFixedColumns: function (rowIndex) {\n          this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\n          rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\n          return this._fixedColumns[rowIndex] || [];\n        },\n        getFilteringColumns: function () {\n          return this.getColumns().filter(function (item) {\n            return (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering);\n          }).map(function (item) {\n            var field = (0, _extend.extend)(true, {}, item);\n\n            if (!(0, _type.isDefined)(field.dataField)) {\n              field.dataField = field.name;\n            }\n\n            field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\n            return field;\n          });\n        },\n        _getFixedColumnsCore: function () {\n          var that = this;\n          var result = [];\n          var rowCount = that.getRowCount();\n\n          var isColumnFixing = that._isColumnFixing();\n\n          var transparentColumn = {\n            command: \"transparent\"\n          };\n          var transparentColspan = 0;\n          var notFixedColumnCount;\n          var transparentColumnIndex;\n          var lastFixedPosition;\n\n          if (isColumnFixing) {\n            for (var i = 0; i <= rowCount; i++) {\n              notFixedColumnCount = 0;\n              lastFixedPosition = null;\n              transparentColumnIndex = null;\n              var visibleColumns = that.getVisibleColumns(i, true);\n\n              for (var j = 0; j < visibleColumns.length; j++) {\n                var prevColumn = visibleColumns[j - 1];\n                var column = visibleColumns[j];\n\n                if (!column.fixed) {\n                  if (0 === i) {\n                    if (column.isBand && column.colspan) {\n                      transparentColspan += column.colspan;\n                    } else {\n                      transparentColspan++;\n                    }\n                  }\n\n                  notFixedColumnCount++;\n\n                  if (!(0, _type.isDefined)(transparentColumnIndex)) {\n                    transparentColumnIndex = j;\n                  }\n                } else {\n                  if (prevColumn && prevColumn.fixed && getFixedPosition(that, prevColumn) !== getFixedPosition(that, column)) {\n                    if (!(0, _type.isDefined)(transparentColumnIndex)) {\n                      transparentColumnIndex = j;\n                    }\n                  } else {\n                    lastFixedPosition = column.fixedPosition;\n                  }\n                }\n              }\n\n              if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\n                return [];\n              }\n\n              if (!(0, _type.isDefined)(transparentColumnIndex)) {\n                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length;\n              }\n\n              result[i] = visibleColumns.slice(0);\n\n              if (!transparentColumn.colspan) {\n                transparentColumn.colspan = transparentColspan;\n              }\n\n              result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn);\n            }\n          }\n\n          return result.map(function (columns) {\n            return columns.map(function (column) {\n              var newColumn = _objectSpread({}, column);\n\n              if (newColumn.headerId) {\n                newColumn.headerId += \"-fixed\";\n              }\n\n              return newColumn;\n            });\n          });\n        },\n        _isColumnFixing: function () {\n          var isColumnFixing = this.option(\"columnFixing.enabled\");\n          !isColumnFixing && _iterator2.default.each(this._columns, function (_, column) {\n            if (column.fixed) {\n              isColumnFixing = true;\n              return false;\n            }\n          });\n          return isColumnFixing;\n        },\n        _getExpandColumnsCore: function () {\n          return this.getGroupColumns();\n        },\n        getExpandColumns: function () {\n          var expandColumns = this._getExpandColumnsCore();\n\n          var expandColumn;\n          var firstGroupColumn = expandColumns.filter(function (column) {\n            return 0 === column.groupIndex;\n          })[0];\n          var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\n\n          var isColumnFixing = this._isColumnFixing();\n\n          if (expandColumns.length) {\n            expandColumn = this.columnOption(\"command:expand\");\n          }\n\n          expandColumns = _iterator2.default.map(expandColumns, function (column) {\n            return (0, _extend.extend)({}, column, {\n              visibleWidth: null,\n              minWidth: null,\n              cellTemplate: !(0, _type.isDefined)(column.groupIndex) ? column.cellTemplate : null,\n              headerCellTemplate: null,\n              fixed: !(0, _type.isDefined)(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true\n            }, expandColumn, {\n              index: column.index,\n              type: column.type || GROUP_COMMAND_COLUMN_NAME\n            });\n          });\n          return expandColumns;\n        },\n        getBandColumnsCache: function () {\n          if (!this._bandColumnsCache) {\n            var columns = this._columns;\n            var columnChildrenByIndex = {};\n            var columnParentByIndex = {};\n            var isPlain = true;\n            columns.forEach(function (column) {\n              var parentIndex = column.ownerBand;\n              var parent = columns[parentIndex];\n\n              if (column.hasColumns) {\n                isPlain = false;\n              }\n\n              if (column.colspan) {\n                column.colspan = void 0;\n              }\n\n              if (column.rowspan) {\n                column.rowspan = void 0;\n              }\n\n              if (parent) {\n                columnParentByIndex[column.index] = parent;\n              } else {\n                parentIndex = -1;\n              }\n\n              columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\n              columnChildrenByIndex[parentIndex].push(column);\n            });\n            this._bandColumnsCache = {\n              isPlain: isPlain,\n              columnChildrenByIndex: columnChildrenByIndex,\n              columnParentByIndex: columnParentByIndex\n            };\n          }\n\n          return this._bandColumnsCache;\n        },\n        _isColumnVisible: function (column) {\n          return column.visible && this.isParentColumnVisible(column.index);\n        },\n        _getVisibleColumnsCore: function () {\n          var that = this;\n          var i;\n          var result = [];\n          var rowspanGroupColumns = 0;\n          var rowspanExpandColumns = 0;\n          var rowCount = that.getRowCount();\n          var positiveIndexedColumns = [];\n          var negativeIndexedColumns = [];\n          var notGroupedColumnsCount = 0;\n          var isFixedToEnd;\n          var rtlEnabled = that.option(\"rtlEnabled\");\n          var bandColumnsCache = that.getBandColumnsCache();\n          var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\n          var columns = mergeColumns(that, that._columns, that._commandColumns, true);\n          var columnDigitsCount = digitsCount(columns.length);\n          processBandColumns(that, columns, bandColumnsCache);\n\n          for (i = 0; i < rowCount; i++) {\n            result[i] = [];\n            negativeIndexedColumns[i] = [{}];\n            positiveIndexedColumns[i] = [{}, {}, {}];\n          }\n\n          _iterator2.default.each(columns, function () {\n            var column = this;\n            var visibleIndex = column.visibleIndex;\n            var indexedColumns;\n            var parentBandColumns = getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex);\n\n            var visible = that._isColumnVisible(column);\n\n            if (visible && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\n              var rowIndex = parentBandColumns.length;\n\n              if (visibleIndex < 0) {\n                visibleIndex = -visibleIndex;\n                indexedColumns = negativeIndexedColumns[rowIndex];\n              } else {\n                column.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : column.fixed;\n                column.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : column.fixedPosition;\n\n                if (column.fixed) {\n                  isFixedToEnd = \"right\" === column.fixedPosition;\n\n                  if (rtlEnabled && (!column.command || isCustomCommandColumn(that, column))) {\n                    isFixedToEnd = !isFixedToEnd;\n                  }\n\n                  if (isFixedToEnd) {\n                    indexedColumns = positiveIndexedColumns[rowIndex][2];\n                  } else {\n                    indexedColumns = positiveIndexedColumns[rowIndex][0];\n                  }\n                } else {\n                  indexedColumns = positiveIndexedColumns[rowIndex][1];\n                }\n              }\n\n              if (parentBandColumns.length) {\n                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\n\n                for (i = parentBandColumns.length - 1; i >= 0; i--) {\n                  visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex;\n                }\n              }\n\n              indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\n              indexedColumns[visibleIndex].push(column);\n              notGroupedColumnsCount++;\n            }\n          });\n\n          _iterator2.default.each(result, function (rowIndex) {\n            (0, _object.orderEach)(negativeIndexedColumns[rowIndex], function (_, columns) {\n              result[rowIndex].unshift.apply(result[rowIndex], columns);\n            });\n            var firstPositiveIndexColumn = result[rowIndex].length;\n\n            _iterator2.default.each(positiveIndexedColumns[rowIndex], function (index, columnsByFixing) {\n              (0, _object.orderEach)(columnsByFixing, function (_, columnsByVisibleIndex) {\n                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex);\n              });\n            });\n\n            if (rowspanExpandColumns < rowIndex + 1) {\n              rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn);\n            }\n\n            if (rowspanGroupColumns < rowIndex + 1) {\n              rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn);\n            }\n          });\n\n          result.push(getDataColumns(result));\n\n          if (!notGroupedColumnsCount && that._columns.length) {\n            result[rowCount].push({\n              command: \"empty\"\n            });\n          }\n\n          return result;\n        },\n        getInvisibleColumns: function (columns, bandColumnIndex) {\n          var that = this;\n          var result = [];\n          var hiddenColumnsByBand;\n          columns = columns || that._columns;\n\n          _iterator2.default.each(columns, function (_, column) {\n            if (column.ownerBand !== bandColumnIndex) {\n              return;\n            }\n\n            if (column.isBand) {\n              if (!column.visible) {\n                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index);\n              } else {\n                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index);\n              }\n\n              if (hiddenColumnsByBand.length) {\n                result.push(column);\n                result = result.concat(hiddenColumnsByBand);\n              }\n\n              return;\n            }\n\n            if (!column.visible) {\n              result.push(column);\n            }\n          });\n\n          return result;\n        },\n        getChooserColumns: function (getAllColumns) {\n          var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\n          return (0, _common.grep)(columns, function (column) {\n            return column.showInColumnChooser;\n          });\n        },\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var that = this;\n          var columnIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\n          var sourceColumn = that._columns[columnIndex];\n\n          if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\n            if (sourceLocation === targetLocation) {\n              if (sourceLocation === COLUMN_CHOOSER_LOCATION) {\n                return false;\n              }\n\n              fromVisibleIndex = (0, _type.isObject)(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\n              toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n              return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex;\n            } else {\n              if (sourceLocation === GROUP_LOCATION && targetLocation !== COLUMN_CHOOSER_LOCATION || targetLocation === GROUP_LOCATION) {\n                return sourceColumn && sourceColumn.allowGrouping;\n              } else {\n                if (sourceLocation === COLUMN_CHOOSER_LOCATION || targetLocation === COLUMN_CHOOSER_LOCATION) {\n                  return sourceColumn && sourceColumn.allowHiding;\n                }\n              }\n            }\n\n            return true;\n          }\n\n          return false;\n        },\n        moveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var that = this;\n          var options = {};\n          var prevGroupIndex;\n          var fromIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\n          var toIndex = getColumnIndexByVisibleIndex(that, toVisibleIndex, targetLocation);\n          var targetGroupIndex;\n\n          if (fromIndex >= 0) {\n            var column = that._columns[fromIndex];\n            toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n            targetGroupIndex = toIndex >= 0 ? that._columns[toIndex].groupIndex : -1;\n\n            if ((0, _type.isDefined)(column.groupIndex) && sourceLocation === GROUP_LOCATION) {\n              if (targetGroupIndex > column.groupIndex) {\n                targetGroupIndex--;\n              }\n\n              if (targetLocation !== GROUP_LOCATION) {\n                options.groupIndex = void 0;\n              } else {\n                prevGroupIndex = column.groupIndex;\n                delete column.groupIndex;\n                updateColumnGroupIndexes(that);\n              }\n            }\n\n            if (targetLocation === GROUP_LOCATION) {\n              options.groupIndex = moveColumnToGroup(that, column, targetGroupIndex);\n              column.groupIndex = prevGroupIndex;\n            } else {\n              if (toVisibleIndex >= 0) {\n                var targetColumn = that._columns[toIndex];\n\n                if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\n                  options.visibleIndex = MAX_SAFE_INTEGER;\n                } else {\n                  if (isColumnFixed(that, column) ^ isColumnFixed(that, targetColumn)) {\n                    options.visibleIndex = MAX_SAFE_INTEGER;\n                  } else {\n                    options.visibleIndex = targetColumn.visibleIndex;\n                  }\n                }\n              }\n            }\n\n            var isVisible = targetLocation !== COLUMN_CHOOSER_LOCATION;\n\n            if (column.visible !== isVisible) {\n              options.visible = isVisible;\n            }\n\n            that.columnOption(column.index, options);\n          }\n        },\n        changeSortOrder: function (columnIndex, sortOrder) {\n          var that = this;\n          var options = {};\n          var sortingOptions = that.option(\"sorting\");\n          var sortingMode = sortingOptions && sortingOptions.mode;\n          var needResetSorting = \"single\" === sortingMode || !sortOrder;\n          var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\n          var column = that._columns[columnIndex];\n\n          var nextSortOrder = function (column) {\n            if (\"ctrl\" === sortOrder) {\n              if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\n                return false;\n              }\n\n              options.sortOrder = void 0;\n              options.sortIndex = void 0;\n            } else {\n              if ((0, _type.isDefined)(column.groupIndex) || (0, _type.isDefined)(column.sortIndex)) {\n                options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\";\n              } else {\n                options.sortOrder = \"asc\";\n              }\n            }\n\n            return true;\n          };\n\n          if (allowSorting && column && column.allowSorting) {\n            if (needResetSorting && !(0, _type.isDefined)(column.groupIndex)) {\n              _iterator2.default.each(that._columns, function (index) {\n                if (index !== columnIndex && this.sortOrder && !(0, _type.isDefined)(this.groupIndex)) {\n                  delete this.sortOrder;\n                  delete this.sortIndex;\n                }\n              });\n            }\n\n            if (isSortOrderValid(sortOrder)) {\n              if (column.sortOrder !== sortOrder) {\n                options.sortOrder = sortOrder;\n              }\n            } else {\n              if (\"none\" === sortOrder) {\n                if (column.sortOrder) {\n                  options.sortIndex = void 0;\n                  options.sortOrder = void 0;\n                }\n              } else {\n                nextSortOrder(column);\n              }\n            }\n          }\n\n          that.columnOption(column.index, options);\n        },\n        getSortDataSourceParameters: function (useLocalSelector) {\n          var that = this;\n          var sortColumns = [];\n          var sort = [];\n\n          _iterator2.default.each(that._columns, function () {\n            if ((this.dataField || this.selector || this.calculateCellValue) && (0, _type.isDefined)(this.sortIndex) && !(0, _type.isDefined)(this.groupIndex)) {\n              sortColumns[this.sortIndex] = this;\n            }\n          });\n\n          _iterator2.default.each(sortColumns, function () {\n            var sortOrder = this && this.sortOrder;\n\n            if (isSortOrderValid(sortOrder)) {\n              var sortItem = {\n                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\n                desc: \"desc\" === this.sortOrder\n              };\n\n              if (this.sortingMethod) {\n                sortItem.compare = this.sortingMethod.bind(this);\n              }\n\n              sort.push(sortItem);\n            }\n          });\n\n          return sort.length > 0 ? sort : null;\n        },\n        getGroupDataSourceParameters: function (useLocalSelector) {\n          var group = [];\n\n          _iterator2.default.each(this.getGroupColumns(), function () {\n            var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\n\n            if (selector) {\n              var groupItem = {\n                selector: selector,\n                desc: \"desc\" === this.sortOrder,\n                isExpanded: !!this.autoExpandGroup\n              };\n\n              if (this.sortingMethod) {\n                groupItem.compare = this.sortingMethod.bind(this);\n              }\n\n              group.push(groupItem);\n            }\n          });\n\n          return group.length > 0 ? group : null;\n        },\n        refresh: function (updateNewLookupsOnly) {\n          var deferreds = [];\n\n          _iterator2.default.each(this._columns, function () {\n            var lookup = this.lookup;\n\n            if (lookup && !this.calculateDisplayValue) {\n              if (updateNewLookupsOnly && lookup.valueMap) {\n                return;\n              }\n\n              if (lookup.update) {\n                deferreds.push(lookup.update());\n              }\n            }\n          });\n\n          return _deferred.when.apply(_renderer2.default, deferreds).done(resetColumnsCache.bind(null, this));\n        },\n        _updateColumnOptions: function (column, columnIndex) {\n          column.selector = column.selector || function (data) {\n            return column.calculateCellValue(data);\n          };\n\n          _iterator2.default.each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], function (_, calculateCallbackName) {\n            var calculateCallback = column[calculateCallbackName];\n\n            if ((0, _type.isFunction)(calculateCallback) && !calculateCallback.originalCallback) {\n              column[calculateCallbackName] = function (data) {\n                return calculateCallback.call(column, data);\n              };\n\n              column[calculateCallbackName].originalCallback = calculateCallback;\n              column[calculateCallbackName].columnIndex = columnIndex;\n            }\n          });\n\n          if ((0, _type.isString)(column.calculateDisplayValue)) {\n            column.displayField = column.calculateDisplayValue;\n            column.calculateDisplayValue = _data2.default.compileGetter(column.displayField);\n          }\n\n          if (column.calculateDisplayValue) {\n            column.displayValueMap = column.displayValueMap || {};\n          }\n\n          updateSerializers(column, column.dataType);\n          var lookup = column.lookup;\n\n          if (lookup) {\n            updateSerializers(lookup, lookup.dataType);\n          }\n\n          var dataType = lookup ? lookup.dataType : column.dataType;\n\n          if (dataType) {\n            column.alignment = column.alignment || getAlignmentByDataType(dataType, this.option(\"rtlEnabled\"));\n            column.format = column.format || (0, _uiGrid_core3.getFormatByDataType)(dataType);\n            column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\n            column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\n\n            if (!(0, _type.isDefined)(column.filterOperations)) {\n              setFilterOperationsAsDefaultValues(column);\n            }\n\n            column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\n            column.showEditorAlways = (0, _type.isDefined)(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate;\n          }\n        },\n        updateColumnDataTypes: function (dataSource) {\n          var that = this;\n          var dateSerializationFormat = that.option(\"dateSerializationFormat\");\n\n          var firstItems = that._getFirstItems(dataSource);\n\n          var isColumnDataTypesUpdated = false;\n\n          _iterator2.default.each(that._columns, function (index, column) {\n            var i;\n            var value;\n            var dataType;\n            var lookupDataType;\n            var valueDataType;\n            var lookup = column.lookup;\n\n            if ((0, _uiGrid_core3.isDateType)(column.dataType) && void 0 === column.serializationFormat) {\n              column.serializationFormat = dateSerializationFormat;\n            }\n\n            if (lookup && (0, _uiGrid_core3.isDateType)(lookup.dataType) && void 0 === column.serializationFormat) {\n              lookup.serializationFormat = dateSerializationFormat;\n            }\n\n            if (column.calculateCellValue && firstItems.length) {\n              if (!column.dataType || lookup && !lookup.dataType) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i]);\n\n                  if (!column.dataType) {\n                    valueDataType = getValueDataType(value);\n                    dataType = dataType || valueDataType;\n\n                    if (dataType && valueDataType && dataType !== valueDataType) {\n                      dataType = \"string\";\n                    }\n                  }\n\n                  if (lookup && !lookup.dataType) {\n                    valueDataType = getValueDataType((0, _uiGrid_core3.getDisplayValue)(column, value, firstItems[i]));\n                    lookupDataType = lookupDataType || valueDataType;\n\n                    if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\n                      lookupDataType = \"string\";\n                    }\n                  }\n                }\n\n                if (dataType || lookupDataType) {\n                  if (dataType) {\n                    column.dataType = dataType;\n                  }\n\n                  if (lookup && lookupDataType) {\n                    lookup.dataType = lookupDataType;\n                  }\n\n                  isColumnDataTypesUpdated = true;\n                }\n              }\n\n              if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i], true);\n\n                  if (void 0 === column.serializationFormat) {\n                    column.serializationFormat = getSerializationFormat(column.dataType, value);\n                  }\n\n                  if (lookup && void 0 === lookup.serializationFormat) {\n                    lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true));\n                  }\n                }\n              }\n            }\n\n            that._updateColumnOptions(column, index);\n          });\n\n          return isColumnDataTypesUpdated;\n        },\n        _customizeColumns: function (columns) {\n          var that = this;\n          var customizeColumns = that.option(\"customizeColumns\");\n\n          if (customizeColumns) {\n            var hasOwnerBand = columns.some(function (column) {\n              return (0, _type.isObject)(column.ownerBand);\n            });\n\n            if (hasOwnerBand) {\n              updateIndexes(that);\n            }\n\n            customizeColumns(columns);\n            assignColumns(that, createColumnsFromOptions(that, columns));\n          }\n        },\n        updateColumns: function (dataSource, forceApplying) {\n          var _this = this;\n\n          if (!forceApplying) {\n            this.updateSortingGrouping(dataSource);\n          }\n\n          if (!dataSource || dataSource.isLoaded()) {\n            var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\n            var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\n            var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\n\n            this._customizeColumns(this._columns);\n\n            updateIndexes(this);\n            var columns = this._columns;\n            return (0, _deferred.when)(this.refresh(true)).always(function () {\n              if (_this._columns !== columns) {\n                return;\n              }\n\n              _this._updateChanges(dataSource, {\n                sorting: sortParameters,\n                grouping: groupParameters,\n                filtering: filterParameters\n              });\n\n              fireColumnsChanged(_this);\n            });\n          }\n        },\n        _updateChanges: function (dataSource, parameters) {\n          if (dataSource) {\n            this.updateColumnDataTypes(dataSource);\n            this._dataSourceApplied = true;\n          }\n\n          if (!(0, _uiGrid_core3.equalSortParameters)(parameters.sorting, this.getSortDataSourceParameters())) {\n            updateColumnChanges(this, \"sorting\");\n          }\n\n          if (!(0, _uiGrid_core3.equalSortParameters)(parameters.grouping, this.getGroupDataSourceParameters())) {\n            updateColumnChanges(this, \"grouping\");\n          }\n\n          var dataController = this.getController(\"data\");\n\n          if (dataController && !(0, _uiGrid_core3.equalFilterParameters)(parameters.filtering, dataController.getCombinedFilter())) {\n            updateColumnChanges(this, \"filtering\");\n          }\n\n          updateColumnChanges(this, \"columns\");\n        },\n        updateSortingGrouping: function (dataSource, fromDataSource) {\n          var that = this;\n          var sortParameters;\n          var isColumnsChanged;\n\n          var updateSortGroupParameterIndexes = function (columns, sortParameters, indexParameterName) {\n            _iterator2.default.each(columns, function (index, column) {\n              delete column[indexParameterName];\n\n              if (sortParameters) {\n                for (var i = 0; i < sortParameters.length; i++) {\n                  var selector = sortParameters[i].selector;\n                  var isExpanded = sortParameters[i].isExpanded;\n\n                  if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {\n                    column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\");\n\n                    if (void 0 !== isExpanded) {\n                      column.autoExpandGroup = isExpanded;\n                    }\n\n                    column[indexParameterName] = i;\n                    break;\n                  }\n                }\n              }\n            });\n          };\n\n          if (dataSource) {\n            sortParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.sort());\n            var groupParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group());\n            var columnsGroupParameters = that.getGroupDataSourceParameters();\n            var columnsSortParameters = that.getSortDataSourceParameters();\n\n            if (!that._columns.length) {\n              _iterator2.default.each(groupParameters, function (index, group) {\n                that._columns.push(group.selector);\n              });\n\n              _iterator2.default.each(sortParameters, function (index, sort) {\n                that._columns.push(sort.selector);\n              });\n\n              assignColumns(that, createColumnsFromOptions(that, that._columns));\n            }\n\n            if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(groupParameters, columnsGroupParameters)) {\n              updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\n\n              if (fromDataSource) {\n                updateColumnChanges(that, \"grouping\");\n                isColumnsChanged = true;\n              }\n            }\n\n            if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(sortParameters, columnsSortParameters)) {\n              updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\n\n              if (fromDataSource) {\n                updateColumnChanges(that, \"sorting\");\n                isColumnsChanged = true;\n              }\n            }\n\n            if (isColumnsChanged) {\n              fireColumnsChanged(that);\n            }\n          }\n        },\n        updateFilter: function (filter, remoteFiltering, columnIndex, filterValue) {\n          var that = this;\n\n          if (!Array.isArray(filter)) {\n            return filter;\n          }\n\n          filter = (0, _extend.extend)([], filter);\n          columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\n          filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\n\n          if ((0, _type.isString)(filter[0]) && \"!\" !== filter[0]) {\n            var column = that.columnOption(filter[0]);\n\n            if (remoteFiltering) {\n              if ((0, _config2.default)().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\n                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\");\n              }\n            } else {\n              if (column && column.selector) {\n                filter[0] = column.selector;\n                filter[0].columnIndex = column.index;\n              }\n            }\n          } else {\n            if ((0, _type.isFunction)(filter[0])) {\n              filter[0].columnIndex = columnIndex;\n              filter[0].filterValue = filterValue;\n            }\n          }\n\n          for (var i = 0; i < filter.length; i++) {\n            filter[i] = that.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue);\n          }\n\n          return filter;\n        },\n        columnCount: function () {\n          return this._columns ? this._columns.length : 0;\n        },\n        columnOption: function (identifier, option, value, notFireEvent) {\n          var that = this;\n\n          var columns = that._columns.concat(that._commandColumns);\n\n          var column = findColumn(columns, identifier);\n\n          if (column) {\n            if (1 === arguments.length) {\n              return (0, _extend.extend)({}, column);\n            }\n\n            if ((0, _type.isString)(option)) {\n              if (2 === arguments.length) {\n                return columnOptionCore(that, column, option);\n              } else {\n                columnOptionCore(that, column, option, value, notFireEvent);\n              }\n            } else {\n              if ((0, _type.isObject)(option)) {\n                _iterator2.default.each(option, function (optionName, value) {\n                  columnOptionCore(that, column, optionName, value, notFireEvent);\n                });\n              }\n            }\n\n            fireColumnsChanged(that);\n          }\n        },\n        clearSorting: function () {\n          var that = this;\n          var columnCount = this.columnCount();\n          that.beginUpdate();\n\n          for (var i = 0; i < columnCount; i++) {\n            that.columnOption(i, \"sortOrder\", void 0);\n          }\n\n          that.endUpdate();\n        },\n        clearGrouping: function () {\n          var that = this;\n          var columnCount = this.columnCount();\n          that.beginUpdate();\n\n          for (var i = 0; i < columnCount; i++) {\n            that.columnOption(i, \"groupIndex\", void 0);\n          }\n\n          that.endUpdate();\n        },\n        getVisibleIndex: function (index, rowIndex) {\n          var columns = this.getVisibleColumns(rowIndex);\n\n          for (var i = columns.length - 1; i >= 0; i--) {\n            if (columns[i].index === index) {\n              return i;\n            }\n          }\n\n          return -1;\n        },\n        getVisibleColumnIndex: function (id, rowIndex) {\n          var index = this.columnOption(id, \"index\");\n          return this.getVisibleIndex(index, rowIndex);\n        },\n        addColumn: function (options) {\n          var that = this;\n          var column = createColumn(that, options);\n          var index = that._columns.length;\n\n          that._columns.push(column);\n\n          if (column.isBand) {\n            that._columns = createColumnsFromOptions(that, that._columns);\n            column = that._columns[index];\n          }\n\n          column.added = options;\n          updateIndexes(that, column);\n          that.updateColumns(that._dataSource);\n        },\n        deleteColumn: function (id) {\n          var that = this;\n          var column = that.columnOption(id);\n\n          if (column && column.index >= 0) {\n            convertOwnerBandToColumnReference(that._columns);\n\n            that._columns.splice(column.index, 1);\n\n            if (column.isBand) {\n              var childIndexes = that.getChildrenByBandColumn(column.index).map(function (column) {\n                return column.index;\n              });\n              that._columns = that._columns.filter(function (column) {\n                return childIndexes.indexOf(column.index) < 0;\n              });\n            }\n\n            updateIndexes(that);\n            that.updateColumns(that._dataSource);\n          }\n        },\n        addCommandColumn: function (options) {\n          var commandColumn = this._commandColumns.filter(function (column) {\n            return column.command === options.command;\n          })[0];\n\n          if (!commandColumn) {\n            commandColumn = options;\n\n            this._commandColumns.push(commandColumn);\n          }\n        },\n        getUserState: function () {\n          var columns = this._columns;\n          var result = [];\n          var i;\n\n          function handleStateField(index, value) {\n            if (void 0 !== columns[i][value]) {\n              result[i][value] = columns[i][value];\n            }\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            result[i] = {};\n\n            _iterator2.default.each(USER_STATE_FIELD_NAMES, handleStateField);\n          }\n\n          return result;\n        },\n        setUserState: function (state) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var ignoreColumnOptionNames = that.option(\"stateStoring.ignoreColumnOptionNames\");\n\n          if (!ignoreColumnOptionNames) {\n            ignoreColumnOptionNames = [];\n            var commonColumnSettings = that.getCommonSettings();\n\n            if (!that.option(\"columnChooser.enabled\")) {\n              ignoreColumnOptionNames.push(\"visible\");\n            }\n\n            if (\"none\" === that.option(\"sorting.mode\")) {\n              ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\");\n            }\n\n            if (!commonColumnSettings.allowGrouping) {\n              ignoreColumnOptionNames.push(\"groupIndex\");\n            }\n\n            if (!commonColumnSettings.allowFixing) {\n              ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\");\n            }\n\n            if (!commonColumnSettings.allowResizing) {\n              ignoreColumnOptionNames.push(\"width\", \"visibleWidth\");\n            }\n\n            var isFilterPanelHidden = !that.option(\"filterPanel.visible\");\n\n            if (!that.option(\"filterRow.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\");\n            }\n\n            if (!that.option(\"headerFilter.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValues\", \"filterType\");\n            }\n          }\n\n          that._columnsUserState = state;\n          that._ignoreColumnOptionNames = ignoreColumnOptionNames;\n          that._hasUserState = !!state;\n          updateColumnChanges(that, \"filtering\");\n          that.init();\n\n          if (dataSource) {\n            dataSource.sort(that.getSortDataSourceParameters());\n            dataSource.group(that.getGroupDataSourceParameters());\n          }\n        },\n        _createCalculatedColumnOptions: function (columnOptions, bandColumn) {\n          var calculatedColumnOptions = {};\n          var dataField = columnOptions.dataField;\n\n          if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\n            calculatedColumnOptions.isBand = true;\n            dataField = null;\n          }\n\n          if (dataField) {\n            if ((0, _type.isString)(dataField)) {\n              var getter = _data2.default.compileGetter(dataField);\n\n              calculatedColumnOptions = {\n                caption: _inflector2.default.captionize(dataField),\n                calculateCellValue: function (data, skipDeserialization) {\n                  var value = getter(data);\n                  return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n                },\n                setCellValue: defaultSetCellValue,\n                parseValue: function (text) {\n                  var column = this;\n                  var result;\n                  var parsedValue;\n\n                  if (\"number\" === column.dataType) {\n                    if ((0, _type.isString)(text) && column.format) {\n                      parsedValue = _number2.default.parse(text);\n\n                      if ((0, _type.isNumeric)(parsedValue)) {\n                        result = parsedValue;\n                      }\n                    } else {\n                      if ((0, _type.isDefined)(text) && (0, _type.isNumeric)(text)) {\n                        result = Number(text);\n                      }\n                    }\n                  } else {\n                    if (\"boolean\" === column.dataType) {\n                      if (text === column.trueText) {\n                        result = true;\n                      } else {\n                        if (text === column.falseText) {\n                          result = false;\n                        }\n                      }\n                    } else {\n                      if ((0, _uiGrid_core3.isDateType)(column.dataType)) {\n                        parsedValue = _date2.default.parse(text, column.format);\n\n                        if (parsedValue) {\n                          result = parsedValue;\n                        }\n                      } else {\n                        result = text;\n                      }\n                    }\n                  }\n\n                  return result;\n                }\n              };\n            }\n\n            calculatedColumnOptions.allowFiltering = true;\n          } else {\n            calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression;\n          }\n\n          calculatedColumnOptions.calculateFilterExpression = function () {\n            return _filtering2.default.defaultCalculateFilterExpression.apply(this, arguments);\n          };\n\n          calculatedColumnOptions.createFilterExpression = function (filterValue) {\n            var result;\n\n            if (this.calculateFilterExpression) {\n              result = this.calculateFilterExpression.apply(this, arguments);\n            }\n\n            if ((0, _type.isFunction)(result)) {\n              result = [result, \"=\", true];\n            }\n\n            if (result) {\n              result.columnIndex = this.index;\n              result.filterValue = filterValue;\n            }\n\n            return result;\n          };\n\n          if (!dataField || !(0, _type.isString)(dataField)) {\n            (0, _extend.extend)(true, calculatedColumnOptions, {\n              allowSorting: false,\n              allowGrouping: false,\n              calculateCellValue: function () {\n                return null;\n              }\n            });\n          }\n\n          if (bandColumn) {\n            calculatedColumnOptions.allowFixing = false;\n          }\n\n          if (columnOptions.dataType) {\n            calculatedColumnOptions.userDataType = columnOptions.dataType;\n          }\n\n          if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\n            calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation;\n          }\n\n          if (columnOptions.lookup) {\n            calculatedColumnOptions.lookup = {\n              calculateCellValue: function (value, skipDeserialization) {\n                if (this.valueExpr) {\n                  value = this.valueMap && this.valueMap[value];\n                }\n\n                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n              },\n              updateValueMap: function () {\n                this.valueMap = {};\n\n                if (this.items) {\n                  var calculateValue = _data2.default.compileGetter(this.valueExpr);\n\n                  var calculateDisplayValue = _data2.default.compileGetter(this.displayExpr);\n\n                  for (var i = 0; i < this.items.length; i++) {\n                    var item = this.items[i];\n                    var displayValue = calculateDisplayValue(item);\n                    this.valueMap[calculateValue(item)] = displayValue;\n                    this.dataType = this.dataType || getValueDataType(displayValue);\n                  }\n                }\n              },\n              update: function () {\n                var that = this;\n                var dataSource = that.dataSource;\n\n                if (dataSource) {\n                  if ((0, _type.isFunction)(dataSource) && !(0, _variable_wrapper.isWrapped)(dataSource)) {\n                    dataSource = dataSource({});\n                  }\n\n                  if ((0, _type.isPlainObject)(dataSource) || dataSource instanceof _abstract_store2.default || Array.isArray(dataSource)) {\n                    if (that.valueExpr) {\n                      var dataSourceOptions = (0, _utils.normalizeDataSourceOptions)(dataSource);\n                      dataSourceOptions.paginate = false;\n                      dataSource = new _data_source.DataSource(dataSourceOptions);\n                      return dataSource.load().done(function (data) {\n                        that.items = data;\n                        that.updateValueMap && that.updateValueMap();\n                      });\n                    }\n                  } else {\n                    _ui2.default.log(\"E1016\");\n                  }\n                } else {\n                  that.updateValueMap && that.updateValueMap();\n                }\n              }\n            };\n          }\n\n          calculatedColumnOptions.resizedCallbacks = (0, _callbacks2.default)();\n\n          if (columnOptions.resized) {\n            calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions));\n          }\n\n          _iterator2.default.each(calculatedColumnOptions, function (optionName) {\n            if ((0, _type.isFunction)(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\n              var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\n              calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName];\n            }\n          });\n\n          return calculatedColumnOptions;\n        },\n        getRowCount: function () {\n          this._rowCount = this._rowCount || _getRowCount(this);\n          return this._rowCount;\n        },\n        getRowIndex: function (columnIndex, alwaysGetRowIndex) {\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          return column && (alwaysGetRowIndex || column.visible && !(column.command || (0, _type.isDefined)(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0;\n        },\n        getChildrenByBandColumn: function (bandColumnIndex, onlyVisibleDirectChildren) {\n          var that = this;\n          var bandColumnsCache = that.getBandColumnsCache();\n\n          var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\n\n          if (onlyVisibleDirectChildren) {\n            return result.filter(function (column) {\n              return column.visible && !column.command;\n            }).sort(function (column1, column2) {\n              return column1.visibleIndex - column2.visibleIndex;\n            });\n          }\n\n          return result;\n        },\n        isParentBandColumn: function (columnIndex, bandColumnIndex) {\n          var result = false;\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n\n          if (parentBandColumns) {\n            _iterator2.default.each(parentBandColumns, function (_, bandColumn) {\n              if (bandColumn.index === bandColumnIndex) {\n                result = true;\n                return false;\n              }\n            });\n          }\n\n          return result;\n        },\n        isParentColumnVisible: function (columnIndex) {\n          var result = true;\n          var bandColumnsCache = this.getBandColumnsCache();\n          var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n          bandColumns && _iterator2.default.each(bandColumns, function (_, bandColumn) {\n            result = result && bandColumn.visible;\n            return result;\n          });\n          return result;\n        },\n        getColumnId: function (column) {\n          if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\n            if (isCustomCommandColumn(this, column)) {\n              return \"type:\" + column.type;\n            }\n\n            return \"command:\" + column.command;\n          }\n\n          return column.index;\n        },\n        getCustomizeTextByDataType: getCustomizeTextByDataType,\n        getHeaderContentAlignment: function (columnAlignment) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            return \"left\" === columnAlignment ? \"right\" : \"left\";\n          }\n\n          return columnAlignment;\n        }\n      };\n    }())\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.columns_controller.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_callbacks","_callbacks2","_variable_wrapper","_data","_data2","_common","_type","_iterator","_iterator2","_position","_extend","_array","_config","_config2","_object","_ui","_ui2","_uiGrid_core","_uiGrid_core2","_uiGrid_core3","_inflector","_inflector2","_date_serialization","_date_serialization2","_number","_number2","_date","_date2","_message","_message2","_deferred","_abstract_store","_abstract_store2","_data_source","_utils","_filtering","_filtering2","obj","__esModule","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","USER_STATE_FIELD_NAMES_15_1","USER_STATE_FIELD_NAMES","concat","IGNORE_COLUMN_OPTION_NAMES","visibleWidth","bestFitWidth","bufferedFilterValue","COMMAND_EXPAND_CLASS","MAX_SAFE_INTEGER","Number","GROUP_COMMAND_COLUMN_NAME","regExp","globalColumnId","module","exports","defaultOptions","commonColumnSettings","allowFiltering","allowHiding","allowSorting","allowEditing","encodeHtml","trueText","default","format","falseText","allowColumnReordering","allowColumnResizing","columnResizingMode","columnMinWidth","columnWidth","adaptColumnWidthByRatio","columns","regenerateColumnsByVisibleItems","customizeColumns","dateSerializationFormat","controllers","Controller","inherit","DEFAULT_COLUMN_OPTIONS","visible","showInColumnChooser","DATATYPE_OPERATIONS","number","string","date","datetime","COLUMN_INDEX_OPTIONS","visibleIndex","groupIndex","grouped","sortIndex","sortOrder","GROUP_LOCATION","COLUMN_CHOOSER_LOCATION","setFilterOperationsAsDefaultValues","column","filterOperations","defaultFilterOperations","createColumn","that","columnOptions","userStateColumnOptions","bandColumn","commonColumnOptions","isString","dataField","result","command","deepExtendArraySafe","getCommonSettings","name","extend","calculatedColumnOptions","_createCalculatedColumnOptions","type","headerId","selector","createColumnsFromOptions","columnsOptions","each","index","_columnsUserState","checkUserStateColumn","ownerBand","hasColumns","getParentBandColumns","columnIndex","columnParentByIndex","parent","unshift","_getChildrenByBandColumn","columnChildrenByIndex","recursive","children","isDefined","showWhenGrouped","isBand","getColumnByIndexes","columnIndexes","bandColumnsCache","getBandColumnsCache","callbackFilter","isPlain","_columns","getColumnFullPath","item","indexOf","join","calculateColspan","columnID","colspan","getChildrenByBandColumn","_","processBandColumns","rowspan","getRowCount","getValueDataType","dataType","getSerializationFormat","getDateSerializationFormat","isNumeric","updateSerializers","options","deserializeValue","isDateType","deserializeDate","serializeValue","serializeDate","serializationFormat","parsedValue","parseFloat","isNaN","toString","getAlignmentByDataType","isRTL","getDefaultAlignment","customizeTextForBooleanDataType","e","valueText","getCustomizeTextByDataType","createColumnsFromDataSource","dataSource","firstItems","_getFirstItems","fieldName","processedFields","isFunction","isWrapped","updateColumnIndexes","isObject","_commandColumns","updateColumnGroupIndexes","currentColumn","normalizeIndexes","updateColumnSortIndexes","isSortOrderValid","updateColumnVisibleIndexes","bandColumns","parentBandColumns","bandColumnIndex","getColumnIndexByVisibleIndex","location","rowIndex","getGroupColumns","getChooserColumns","getVisibleColumns","col","moveColumnToGroup","groupColumns","Math","max","userStateColumn","applyUserState","columnsUserState","ignoreColumnOptionNames","_ignoreColumnOptionNames","columnCountById","resultColumns","allColumnsHaveState","userStateColumnIndexes","userStateColumnIndex","applyFieldsState","inArray","defaultSelectedFilterOperation","findUserStateColumn","id","count","j","_hasUserState","initialIndex","hasAddedBands","columnUserState","added","assignColumns","updateIndexes","resetBandColumnsCache","resetColumnsCache","updateColumnDataTypes","updateColumnChanges","changeType","optionName","columnChanges","_columnChanges","optionNames","changeTypes","split","fireColumnsChanged","onColumnsChanging","option","reinitOptionNames","needReinit","some","isInitialized","_updateLockCount","component","reinit","columnsChanged","fire","updateSortOrderWhenGrouping","prevGroupIndex","columnWasGrouped","lastSortOrder","fireOptionChanged","prevValue","fullOptionName","fullOptionPath","_skipProcessingColumnsChange","_notifyOptionChanged","columnOptionCore","notFireEvent","optionGetter","compileGetter","initialColumn","functionsAsIs","optionSetter","compileSetter","getColumnByPath","addExpandColumn","_getExpandColumnOptions","addCommandColumn","defaultSetCellValue","data","path","dotCount","getDataColumns","bandColumnID","_getRowCount","rowCount","parents","invisibleParents","isCustomCommandColumn","commandColumn","getFixedPosition","rtlEnabled","fixedPosition","processExpandColumns","expandColumns","customColumnIndex","expandColumnsByType","map","expandColumn","splice","digitsCount","numberToString","str","mergeColumns","commandColumns","needToExtend","commandColumnIndex","slice","isColumnFixing","_isColumnFixing","defaultCommandColumns","fixed","getCommandColumnIndex","reduce","columnType","allowFixing","allowReordering","isColumnFixed","convertOwnerBandToColumnReference","_bandColumnsCache","findColumn","identifier","identifierOptionName","substr","width","cssClass","allowGrouping","allowResizing","groupsCount","items","getFirstItemsCore","childItems","collapsedItems","normalizeSortingInfo","group","_endUpdateCore","init","_isColumnsFromOptions","_dataSourceApplied","applyDataSource","_dataSource","callbackNames","replace","parseInt","optionChanged","args","needUpdateRequireResize","handled","previousValue","Array","isArray","fullName","_columnOptionChanged","_updateRequireResize","isEditingPopup","isEditingForm","callBase","columnOptionValue","columnOptionName","columnOption","_requireResize","publicMethods","forceApplying","isDataSourceLoaded","isLoaded","_dataSourceColumnsCount","columnsFromDataSource","updateColumns","isAllDataTypesDefined","Deferred","reject","promise","reset","_visibleColumns","_fixedColumns","_rowCount","getUserState","isDataSourceApplied","groupingOptions","groupPanelOptions","minWidth","autoExpandGroup","autoExpandAll","allowCollapsing","allowColumnDragging","contextMenuEnabled","isColumnOptionUsed","checkSerializers","calculateCellValue","defaultCalculateCellValue","getColumns","isBandColumnsUsed","_getVisibleColumnsCore","getFixedColumns","_getFixedColumnsCore","getFilteringColumns","allowHeaderFiltering","field","transparentColumn","transparentColspan","notFixedColumnCount","transparentColumnIndex","lastFixedPosition","visibleColumns","prevColumn","newColumn","_getExpandColumnsCore","getExpandColumns","firstGroupColumn","isFixedFirstGroupColumn","cellTemplate","headerCellTemplate","parentIndex","_isColumnVisible","isParentColumnVisible","rowspanGroupColumns","rowspanExpandColumns","positiveIndexedColumns","negativeIndexedColumns","notGroupedColumnsCount","isFixedToEnd","columnDigitsCount","indexedColumns","orderEach","firstPositiveIndexColumn","columnsByFixing","columnsByVisibleIndex","call","getInvisibleColumns","hiddenColumnsByBand","getAllColumns","grep","allowMoveColumn","fromVisibleIndex","toVisibleIndex","sourceLocation","targetLocation","sourceColumn","moveColumn","fromIndex","toIndex","targetGroupIndex","targetColumn","isVisible","changeSortOrder","sortingOptions","sortingMode","mode","needResetSorting","nextSortOrder","getSortDataSourceParameters","useLocalSelector","sortColumns","sort","sortItem","calculateSortValue","displayField","calculateDisplayValue","desc","sortingMethod","compare","bind","getGroupDataSourceParameters","calculateGroupValue","groupItem","isExpanded","refresh","updateNewLookupsOnly","deferreds","lookup","valueMap","update","when","done","_updateColumnOptions","calculateCallbackName","calculateCallback","originalCallback","displayValueMap","alignment","getFormatByDataType","customizeText","defaultFilterOperation","showEditorAlways","isColumnDataTypesUpdated","lookupDataType","valueDataType","getDisplayValue","_customizeColumns","hasOwnerBand","_this","updateSortingGrouping","sortParameters","groupParameters","filterParameters","lastLoadOptions","always","_updateChanges","sorting","grouping","filtering","parameters","equalSortParameters","dataController","getController","equalFilterParameters","getCombinedFilter","fromDataSource","isColumnsChanged","updateSortGroupParameterIndexes","indexParameterName","columnsGroupParameters","columnsSortParameters","updateFilter","remoteFiltering","filterValue","forceIsoDateParsing","columnCount","clearSorting","beginUpdate","endUpdate","clearGrouping","getVisibleIndex","getVisibleColumnIndex","addColumn","deleteColumn","childIndexes","handleStateField","setUserState","state","isFilterPanelHidden","getter","caption","captionize","skipDeserialization","setCellValue","parseValue","text","parse","calculateFilterExpression","defaultCalculateFilterExpression","createFilterExpression","userDataType","selectedFilterOperation","valueExpr","updateValueMap","calculateValue","displayExpr","displayValue","isPlainObject","dataSourceOptions","normalizeDataSourceOptions","paginate","DataSource","load","log","resizedCallbacks","resized","add","defaultOptionName","charAt","toUpperCase","getRowIndex","alwaysGetRowIndex","onlyVisibleDirectChildren","column1","column2","isParentBandColumn","getColumnId","getHeaderContentAlignment","columnAlignment"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _callbacks = require(\"../../core/utils/callbacks\");\r\nvar _callbacks2 = _interopRequireDefault(_callbacks);\r\nvar _variable_wrapper = require(\"../../core/utils/variable_wrapper\");\r\nvar _data = require(\"../../core/utils/data\");\r\nvar _data2 = _interopRequireDefault(_data);\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _iterator2 = _interopRequireDefault(_iterator);\r\nvar _position = require(\"../../core/utils/position\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _array = require(\"../../core/utils/array\");\r\nvar _config = require(\"../../core/config\");\r\nvar _config2 = _interopRequireDefault(_config);\r\nvar _object = require(\"../../core/utils/object\");\r\nvar _ui = require(\"../widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _inflector = require(\"../../core/utils/inflector\");\r\nvar _inflector2 = _interopRequireDefault(_inflector);\r\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\r\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\r\nvar _number = require(\"../../localization/number\");\r\nvar _number2 = _interopRequireDefault(_number);\r\nvar _date = require(\"../../localization/date\");\r\nvar _date2 = _interopRequireDefault(_date);\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _abstract_store = require(\"../../data/abstract_store\");\r\nvar _abstract_store2 = _interopRequireDefault(_abstract_store);\r\nvar _data_source = require(\"../../data/data_source/data_source\");\r\nvar _utils = require(\"../../data/data_source/utils\");\r\nvar _filtering = require(\"../shared/filtering\");\r\nvar _filtering2 = _interopRequireDefault(_filtering);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction ownKeys(object, enumerableOnly) {\r\n    var keys = Object.keys(object);\r\n    if (Object.getOwnPropertySymbols) {\r\n        var symbols = Object.getOwnPropertySymbols(object);\r\n        if (enumerableOnly) {\r\n            symbols = symbols.filter(function(sym) {\r\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable\r\n            })\r\n        }\r\n        keys.push.apply(keys, symbols)\r\n    }\r\n    return keys\r\n}\r\n\r\nfunction _objectSpread(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        var source = null != arguments[i] ? arguments[i] : {};\r\n        if (i % 2) {\r\n            ownKeys(Object(source), true).forEach(function(key) {\r\n                _defineProperty(target, key, source[key])\r\n            })\r\n        } else {\r\n            if (Object.getOwnPropertyDescriptors) {\r\n                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))\r\n            } else {\r\n                ownKeys(Object(source)).forEach(function(key) {\r\n                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return target\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n    if (key in obj) {\r\n        Object.defineProperty(obj, key, {\r\n            value: value,\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true\r\n        })\r\n    } else {\r\n        obj[key] = value\r\n    }\r\n    return obj\r\n}\r\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\r\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"selectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\r\nvar IGNORE_COLUMN_OPTION_NAMES = {\r\n    visibleWidth: true,\r\n    bestFitWidth: true,\r\n    bufferedFilterValue: true\r\n};\r\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\r\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\r\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\r\nvar globalColumnId = 1;\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            commonColumnSettings: {\r\n                allowFiltering: true,\r\n                allowHiding: true,\r\n                allowSorting: true,\r\n                allowEditing: true,\r\n                encodeHtml: true,\r\n                trueText: _message2.default.format(\"dxDataGrid-trueText\"),\r\n                falseText: _message2.default.format(\"dxDataGrid-falseText\")\r\n            },\r\n            allowColumnReordering: false,\r\n            allowColumnResizing: false,\r\n            columnResizingMode: \"nextColumn\",\r\n            columnMinWidth: void 0,\r\n            columnWidth: void 0,\r\n            adaptColumnWidthByRatio: true,\r\n            columns: void 0,\r\n            regenerateColumnsByVisibleItems: false,\r\n            customizeColumns: null,\r\n            dateSerializationFormat: void 0\r\n        }\r\n    },\r\n    controllers: {\r\n        columns: _uiGrid_core2.default.Controller.inherit(function() {\r\n            var DEFAULT_COLUMN_OPTIONS = {\r\n                visible: true,\r\n                showInColumnChooser: true\r\n            };\r\n            var DATATYPE_OPERATIONS = {\r\n                number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\r\n                date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\r\n            };\r\n            var COLUMN_INDEX_OPTIONS = {\r\n                visibleIndex: true,\r\n                groupIndex: true,\r\n                grouped: true,\r\n                sortIndex: true,\r\n                sortOrder: true\r\n            };\r\n            var GROUP_LOCATION = \"group\";\r\n            var COLUMN_CHOOSER_LOCATION = \"columnChooser\";\r\n            var setFilterOperationsAsDefaultValues = function(column) {\r\n                column.filterOperations = column.defaultFilterOperations\r\n            };\r\n            var createColumn = function(that, columnOptions, userStateColumnOptions, bandColumn) {\r\n                var commonColumnOptions = {};\r\n                if (columnOptions) {\r\n                    if ((0, _type.isString)(columnOptions)) {\r\n                        columnOptions = {\r\n                            dataField: columnOptions\r\n                        }\r\n                    }\r\n                    var result = {};\r\n                    if (columnOptions.command) {\r\n                        result = (0, _object.deepExtendArraySafe)(commonColumnOptions, columnOptions)\r\n                    } else {\r\n                        commonColumnOptions = that.getCommonSettings(columnOptions);\r\n                        if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\r\n                            columnOptions = (0, _extend.extend)({}, columnOptions, {\r\n                                dataField: userStateColumnOptions.dataField\r\n                            })\r\n                        }\r\n                        var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\r\n                        if (!columnOptions.type) {\r\n                            result = {\r\n                                headerId: \"dx-col-\".concat(globalColumnId++)\r\n                            }\r\n                        }\r\n                        result = (0, _object.deepExtendArraySafe)(result, DEFAULT_COLUMN_OPTIONS);\r\n                        (0, _object.deepExtendArraySafe)(result, commonColumnOptions);\r\n                        (0, _object.deepExtendArraySafe)(result, calculatedColumnOptions);\r\n                        (0, _object.deepExtendArraySafe)(result, columnOptions);\r\n                        (0, _object.deepExtendArraySafe)(result, {\r\n                            selector: null\r\n                        })\r\n                    }\r\n                    if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\r\n                        setFilterOperationsAsDefaultValues(result)\r\n                    }\r\n                    return result\r\n                }\r\n            };\r\n            var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\r\n                var result = [];\r\n                if (columnsOptions) {\r\n                    _iterator2.default.each(columnsOptions, function(index, columnOptions) {\r\n                        var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\r\n                        var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\r\n                        if (column) {\r\n                            if (bandColumn) {\r\n                                column.ownerBand = bandColumn\r\n                            }\r\n                            result.push(column);\r\n                            if (column.columns) {\r\n                                result = result.concat(createColumnsFromOptions(that, column.columns, column));\r\n                                delete column.columns;\r\n                                column.hasColumns = true\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                return result\r\n            };\r\n            var getParentBandColumns = function(columnIndex, columnParentByIndex) {\r\n                var result = [];\r\n                var parent = columnParentByIndex[columnIndex];\r\n                while (parent) {\r\n                    result.unshift(parent);\r\n                    columnIndex = parent.index;\r\n                    parent = columnParentByIndex[columnIndex]\r\n                }\r\n                return result\r\n            };\r\n            var _getChildrenByBandColumn = function(columnIndex, columnChildrenByIndex, recursive) {\r\n                var result = [];\r\n                var children = columnChildrenByIndex[columnIndex];\r\n                if (children) {\r\n                    for (var i = 0; i < children.length; i++) {\r\n                        var column = children[i];\r\n                        if (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped) {\r\n                            result.push(column);\r\n                            if (recursive && column.isBand) {\r\n                                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var getColumnByIndexes = function(that, columnIndexes) {\r\n                var result;\r\n                var columns;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var callbackFilter = function(column) {\r\n                    var ownerBand = result ? result.index : void 0;\r\n                    return column.ownerBand === ownerBand\r\n                };\r\n                if (bandColumnsCache.isPlain) {\r\n                    result = that._columns[columnIndexes[0]]\r\n                } else {\r\n                    columns = that._columns.filter(callbackFilter);\r\n                    for (var i = 0; i < columnIndexes.length; i++) {\r\n                        result = columns[columnIndexes[i]];\r\n                        if (result) {\r\n                            columns = that._columns.filter(callbackFilter)\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var getColumnFullPath = function(that, column) {\r\n                var result = [];\r\n                var columns;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var callbackFilter = function(item) {\r\n                    return item.ownerBand === column.ownerBand\r\n                };\r\n                if (bandColumnsCache.isPlain) {\r\n                    var columnIndex = that._columns.indexOf(column);\r\n                    if (columnIndex >= 0) {\r\n                        result = [\"columns[\".concat(columnIndex, \"]\")]\r\n                    }\r\n                } else {\r\n                    columns = that._columns.filter(callbackFilter);\r\n                    while (columns.length && columns.indexOf(column) !== -1) {\r\n                        result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\r\n                        column = bandColumnsCache.columnParentByIndex[column.index];\r\n                        columns = column ? that._columns.filter(callbackFilter) : []\r\n                    }\r\n                }\r\n                return result.join(\".\")\r\n            };\r\n            var calculateColspan = function calculateColspan(that, columnID) {\r\n                var colspan = 0;\r\n                var columns = that.getChildrenByBandColumn(columnID, true);\r\n                _iterator2.default.each(columns, function(_, column) {\r\n                    if (column.isBand) {\r\n                        column.colspan = column.colspan || calculateColspan(that, column.index);\r\n                        colspan += column.colspan || 1\r\n                    } else {\r\n                        colspan += 1\r\n                    }\r\n                });\r\n                return colspan\r\n            };\r\n            var processBandColumns = function(that, columns, bandColumnsCache) {\r\n                var rowspan;\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    var column = columns[i];\r\n                    if (column.visible || column.command) {\r\n                        if (column.isBand) {\r\n                            column.colspan = column.colspan || calculateColspan(that, column.index)\r\n                        }\r\n                        if (!column.isBand || !column.colspan) {\r\n                            rowspan = that.getRowCount();\r\n                            if (!column.command && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\r\n                                rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length\r\n                            }\r\n                            if (rowspan > 1) {\r\n                                column.rowspan = rowspan\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var getValueDataType = function(value) {\r\n                var dataType = (0, _type.type)(value);\r\n                if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\r\n                    dataType = void 0\r\n                }\r\n                return dataType\r\n            };\r\n            var getSerializationFormat = function(dataType, value) {\r\n                switch (dataType) {\r\n                    case \"date\":\r\n                    case \"datetime\":\r\n                        return _date_serialization2.default.getDateSerializationFormat(value);\r\n                    case \"number\":\r\n                        if ((0, _type.isString)(value)) {\r\n                            return \"string\"\r\n                        }\r\n                        if ((0, _type.isNumeric)(value)) {\r\n                            return null\r\n                        }\r\n                }\r\n            };\r\n            var updateSerializers = function(options, dataType) {\r\n                if (!options.deserializeValue) {\r\n                    if ((0, _uiGrid_core3.isDateType)(dataType)) {\r\n                        options.deserializeValue = function(value) {\r\n                            return _date_serialization2.default.deserializeDate(value)\r\n                        };\r\n                        options.serializeValue = function(value) {\r\n                            return (0, _type.isString)(value) ? value : _date_serialization2.default.serializeDate(value, this.serializationFormat)\r\n                        }\r\n                    }\r\n                    if (\"number\" === dataType) {\r\n                        options.deserializeValue = function(value) {\r\n                            var parsedValue = parseFloat(value);\r\n                            return isNaN(parsedValue) ? value : parsedValue\r\n                        };\r\n                        options.serializeValue = function(value, target) {\r\n                            if (\"filter\" === target) {\r\n                                return value\r\n                            }\r\n                            return (0, _type.isDefined)(value) && \"string\" === this.serializationFormat ? value.toString() : value\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var getAlignmentByDataType = function(dataType, isRTL) {\r\n                switch (dataType) {\r\n                    case \"number\":\r\n                        return \"right\";\r\n                    case \"boolean\":\r\n                        return \"center\";\r\n                    default:\r\n                        return (0, _position.getDefaultAlignment)(isRTL)\r\n                }\r\n            };\r\n            var customizeTextForBooleanDataType = function(e) {\r\n                if (true === e.value) {\r\n                    return this.trueText || \"true\"\r\n                } else {\r\n                    if (false === e.value) {\r\n                        return this.falseText || \"false\"\r\n                    } else {\r\n                        return e.valueText || \"\"\r\n                    }\r\n                }\r\n            };\r\n            var getCustomizeTextByDataType = function(dataType) {\r\n                if (\"boolean\" === dataType) {\r\n                    return customizeTextForBooleanDataType\r\n                }\r\n            };\r\n            var createColumnsFromDataSource = function(that, dataSource) {\r\n                var firstItems = that._getFirstItems(dataSource);\r\n                var fieldName;\r\n                var processedFields = {};\r\n                var result = [];\r\n                for (var i = 0; i < firstItems.length; i++) {\r\n                    if (firstItems[i]) {\r\n                        for (fieldName in firstItems[i]) {\r\n                            if (!(0, _type.isFunction)(firstItems[i][fieldName]) || (0, _variable_wrapper.isWrapped)(firstItems[i][fieldName])) {\r\n                                processedFields[fieldName] = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (fieldName in processedFields) {\r\n                    if (0 !== fieldName.indexOf(\"__\")) {\r\n                        var column = createColumn(that, fieldName);\r\n                        result.push(column)\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var updateColumnIndexes = function(that) {\r\n                _iterator2.default.each(that._columns, function(index, column) {\r\n                    column.index = index\r\n                });\r\n                _iterator2.default.each(that._columns, function(index, column) {\r\n                    if ((0, _type.isObject)(column.ownerBand)) {\r\n                        column.ownerBand = column.ownerBand.index\r\n                    }\r\n                });\r\n                _iterator2.default.each(that._commandColumns, function(index, column) {\r\n                    column.index = -(index + 1)\r\n                })\r\n            };\r\n            var updateColumnGroupIndexes = function(that, currentColumn) {\r\n                (0, _array.normalizeIndexes)(that._columns, \"groupIndex\", currentColumn, function(column) {\r\n                    var grouped = column.grouped;\r\n                    delete column.grouped;\r\n                    return grouped\r\n                })\r\n            };\r\n            var updateColumnSortIndexes = function(that, currentColumn) {\r\n                _iterator2.default.each(that._columns, function(index, column) {\r\n                    if ((0, _type.isDefined)(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\r\n                        delete column.sortIndex\r\n                    }\r\n                });\r\n                (0, _array.normalizeIndexes)(that._columns, \"sortIndex\", currentColumn, function(column) {\r\n                    return !(0, _type.isDefined)(column.groupIndex) && isSortOrderValid(column.sortOrder)\r\n                })\r\n            };\r\n            var updateColumnVisibleIndexes = function(that, currentColumn) {\r\n                var key;\r\n                var column;\r\n                var bandColumns = {};\r\n                var result = [];\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var columns = that._columns.filter(function(column) {\r\n                    return !column.command\r\n                });\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    column = columns[i];\r\n                    var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\r\n                    if (parentBandColumns.length) {\r\n                        var bandColumnIndex = parentBandColumns[parentBandColumns.length - 1].index;\r\n                        bandColumns[bandColumnIndex] = bandColumns[bandColumnIndex] || [];\r\n                        bandColumns[bandColumnIndex].push(column)\r\n                    } else {\r\n                        result.push(column)\r\n                    }\r\n                }\r\n                for (key in bandColumns) {\r\n                    (0, _array.normalizeIndexes)(bandColumns[key], \"visibleIndex\", currentColumn)\r\n                }(0, _array.normalizeIndexes)(result, \"visibleIndex\", currentColumn)\r\n            };\r\n            var getColumnIndexByVisibleIndex = function(that, visibleIndex, location) {\r\n                var rowIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.rowIndex : null;\r\n                var columns = location === GROUP_LOCATION ? that.getGroupColumns() : location === COLUMN_CHOOSER_LOCATION ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\r\n                var column;\r\n                visibleIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\r\n                column = columns[visibleIndex];\r\n                if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                    column = that._columns.filter(function(col) {\r\n                        return column.type === col.type\r\n                    })[0] || column\r\n                }\r\n                return column && (0, _type.isDefined)(column.index) ? column.index : -1\r\n            };\r\n            var moveColumnToGroup = function(that, column, groupIndex) {\r\n                var groupColumns = that.getGroupColumns();\r\n                var i;\r\n                if (groupIndex >= 0) {\r\n                    for (i = 0; i < groupColumns.length; i++) {\r\n                        if (groupColumns[i].groupIndex >= groupIndex) {\r\n                            groupColumns[i].groupIndex++\r\n                        }\r\n                    }\r\n                } else {\r\n                    groupIndex = 0;\r\n                    for (i = 0; i < groupColumns.length; i++) {\r\n                        groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1)\r\n                    }\r\n                }\r\n                return groupIndex\r\n            };\r\n\r\n            function checkUserStateColumn(column, userStateColumn) {\r\n                return column && userStateColumn && userStateColumn.name === column.name && (userStateColumn.dataField === column.dataField || column.name)\r\n            }\r\n            var applyUserState = function(that) {\r\n                var columnsUserState = that._columnsUserState;\r\n                var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\r\n                var columns = that._columns;\r\n                var columnCountById = {};\r\n                var resultColumns = [];\r\n                var allColumnsHaveState = true;\r\n                var userStateColumnIndexes = [];\r\n                var column;\r\n                var userStateColumnIndex;\r\n                var i;\r\n\r\n                function applyFieldsState(column, userStateColumn) {\r\n                    if (!userStateColumn) {\r\n                        return\r\n                    }\r\n                    for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\r\n                        var fieldName = USER_STATE_FIELD_NAMES[index];\r\n                        if ((0, _array.inArray)(fieldName, ignoreColumnOptionNames) >= 0) {\r\n                            continue\r\n                        }\r\n                        if (\"dataType\" === fieldName) {\r\n                            column[fieldName] = column[fieldName] || userStateColumn[fieldName]\r\n                        } else {\r\n                            if ((0, _array.inArray)(fieldName, USER_STATE_FIELD_NAMES_15_1) >= 0) {\r\n                                if (fieldName in userStateColumn) {\r\n                                    column[fieldName] = userStateColumn[fieldName]\r\n                                }\r\n                            } else {\r\n                                if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\r\n                                    column.defaultSelectedFilterOperation = column[fieldName] || null\r\n                                }\r\n                                column[fieldName] = userStateColumn[fieldName]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function findUserStateColumn(columnsUserState, column) {\r\n                    var id = column.name || column.dataField;\r\n                    var count = columnCountById[id] || 0;\r\n                    for (var j = 0; j < columnsUserState.length; j++) {\r\n                        if (checkUserStateColumn(column, columnsUserState[j])) {\r\n                            if (count) {\r\n                                count--\r\n                            } else {\r\n                                columnCountById[id] = columnCountById[id] || 0;\r\n                                columnCountById[id]++;\r\n                                return j\r\n                            }\r\n                        }\r\n                    }\r\n                    return -1\r\n                }\r\n                if (columnsUserState) {\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\r\n                        allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\r\n                        userStateColumnIndexes.push(userStateColumnIndex)\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        userStateColumnIndex = userStateColumnIndexes[i];\r\n                        if (that._hasUserState || allColumnsHaveState) {\r\n                            applyFieldsState(column, columnsUserState[userStateColumnIndex])\r\n                        }\r\n                        if (userStateColumnIndex >= 0 && (0, _type.isDefined)(columnsUserState[userStateColumnIndex].initialIndex)) {\r\n                            resultColumns[userStateColumnIndex] = column\r\n                        } else {\r\n                            resultColumns.push(column)\r\n                        }\r\n                    }\r\n                    var hasAddedBands = false;\r\n                    for (i = 0; i < columnsUserState.length; i++) {\r\n                        var columnUserState = columnsUserState[i];\r\n                        if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\r\n                            column = createColumn(that, columnUserState.added);\r\n                            applyFieldsState(column, columnUserState);\r\n                            resultColumns.push(column);\r\n                            if (columnUserState.added.columns) {\r\n                                hasAddedBands = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (hasAddedBands) {\r\n                        updateColumnIndexes(that);\r\n                        resultColumns = createColumnsFromOptions(that, resultColumns)\r\n                    }\r\n                    assignColumns(that, resultColumns)\r\n                }\r\n            };\r\n            var updateIndexes = function(that, column) {\r\n                updateColumnIndexes(that);\r\n                updateColumnGroupIndexes(that, column);\r\n                updateColumnSortIndexes(that, column);\r\n                resetBandColumnsCache(that);\r\n                updateColumnVisibleIndexes(that, column)\r\n            };\r\n            var resetColumnsCache = function(that) {\r\n                that.resetColumnsCache()\r\n            };\r\n\r\n            function assignColumns(that, columns) {\r\n                that._columns = columns;\r\n                resetColumnsCache(that);\r\n                that.updateColumnDataTypes()\r\n            }\r\n            var updateColumnChanges = function(that, changeType, optionName, columnIndex) {\r\n                var columnChanges = that._columnChanges || {\r\n                    optionNames: {\r\n                        length: 0\r\n                    },\r\n                    changeTypes: {\r\n                        length: 0\r\n                    },\r\n                    columnIndex: columnIndex\r\n                };\r\n                optionName = optionName || \"all\";\r\n                optionName = optionName.split(\".\")[0];\r\n                var changeTypes = columnChanges.changeTypes;\r\n                if (changeType && !changeTypes[changeType]) {\r\n                    changeTypes[changeType] = true;\r\n                    changeTypes.length++\r\n                }\r\n                var optionNames = columnChanges.optionNames;\r\n                if (optionName && !optionNames[optionName]) {\r\n                    optionNames[optionName] = true;\r\n                    optionNames.length++\r\n                }\r\n                if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\r\n                    delete columnChanges.columnIndex\r\n                }\r\n                that._columnChanges = columnChanges;\r\n                resetColumnsCache(that)\r\n            };\r\n            var fireColumnsChanged = function(that) {\r\n                var onColumnsChanging = that.option(\"onColumnsChanging\");\r\n                var columnChanges = that._columnChanges;\r\n                var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\r\n                var needReinit = function(options) {\r\n                    return options && reinitOptionNames.some(function(name) {\r\n                        return options[name]\r\n                    })\r\n                };\r\n                if (that.isInitialized() && !that._updateLockCount && columnChanges) {\r\n                    if (onColumnsChanging) {\r\n                        that._updateLockCount++;\r\n                        onColumnsChanging((0, _extend.extend)({\r\n                            component: that.component\r\n                        }, columnChanges));\r\n                        that._updateLockCount--\r\n                    }\r\n                    that._columnChanges = void 0;\r\n                    if (needReinit(columnChanges.optionNames)) {\r\n                        that.reinit()\r\n                    } else {\r\n                        that.columnsChanged.fire(columnChanges)\r\n                    }\r\n                }\r\n            };\r\n            var updateSortOrderWhenGrouping = function(column, groupIndex, prevGroupIndex) {\r\n                var columnWasGrouped = prevGroupIndex >= 0;\r\n                if (groupIndex >= 0) {\r\n                    if (!columnWasGrouped) {\r\n                        column.lastSortOrder = column.sortOrder\r\n                    }\r\n                } else {\r\n                    column.sortOrder = column.lastSortOrder\r\n                }\r\n            };\r\n            var fireOptionChanged = function(that, options) {\r\n                var value = options.value;\r\n                var optionName = options.optionName;\r\n                var prevValue = options.prevValue;\r\n                var fullOptionName = options.fullOptionName;\r\n                var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\r\n                if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\r\n                    that._skipProcessingColumnsChange = fullOptionPath;\r\n                    that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\r\n                    that._skipProcessingColumnsChange = false\r\n                }\r\n            };\r\n            var columnOptionCore = function(that, column, optionName, value, notFireEvent) {\r\n                var optionGetter = _data2.default.compileGetter(optionName);\r\n                var columnIndex = column.index;\r\n                var columns;\r\n                var changeType;\r\n                var initialColumn;\r\n                if (3 === arguments.length) {\r\n                    return optionGetter(column, {\r\n                        functionsAsIs: true\r\n                    })\r\n                }\r\n                var prevValue = optionGetter(column, {\r\n                    functionsAsIs: true\r\n                });\r\n                if (prevValue !== value) {\r\n                    if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\r\n                        changeType = \"grouping\";\r\n                        updateSortOrderWhenGrouping(column, value, prevValue)\r\n                    } else {\r\n                        if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\r\n                            changeType = \"sorting\"\r\n                        } else {\r\n                            changeType = \"columns\"\r\n                        }\r\n                    }\r\n                    var optionSetter = _data2.default.compileSetter(optionName);\r\n                    optionSetter(column, value, {\r\n                        functionsAsIs: true\r\n                    });\r\n                    var fullOptionName = getColumnFullPath(that, column);\r\n                    if (COLUMN_INDEX_OPTIONS[optionName]) {\r\n                        updateIndexes(that, column);\r\n                        value = optionGetter(column)\r\n                    }\r\n                    fullOptionName && fireOptionChanged(that, {\r\n                        fullOptionName: fullOptionName,\r\n                        optionName: optionName,\r\n                        value: value,\r\n                        prevValue: prevValue\r\n                    });\r\n                    if (!(0, _type.isDefined)(prevValue) && !(0, _type.isDefined)(value) && 0 !== optionName.indexOf(\"buffer\")) {\r\n                        notFireEvent = true\r\n                    }\r\n                    if (!notFireEvent) {\r\n                        if ((0, _array.inArray)(optionName, USER_STATE_FIELD_NAMES) < 0 && \"visibleWidth\" !== optionName) {\r\n                            columns = that.option(\"columns\");\r\n                            initialColumn = that.getColumnByPath(fullOptionName, columns);\r\n                            if ((0, _type.isString)(initialColumn)) {\r\n                                initialColumn = columns[columnIndex] = {\r\n                                    dataField: initialColumn\r\n                                }\r\n                            }\r\n                            if (initialColumn && checkUserStateColumn(initialColumn, column)) {\r\n                                optionSetter(initialColumn, value, {\r\n                                    functionsAsIs: true\r\n                                })\r\n                            }\r\n                        }\r\n                        updateColumnChanges(that, changeType, optionName, columnIndex)\r\n                    } else {\r\n                        resetColumnsCache(that)\r\n                    }\r\n                }\r\n            };\r\n\r\n            function isSortOrderValid(sortOrder) {\r\n                return \"asc\" === sortOrder || \"desc\" === sortOrder\r\n            }\r\n            var addExpandColumn = function(that) {\r\n                var options = that._getExpandColumnOptions();\r\n                that.addCommandColumn(options)\r\n            };\r\n            var defaultSetCellValue = function(data, value) {\r\n                var path = this.dataField.split(\".\");\r\n                var dotCount = path.length - 1;\r\n                if (this.serializeValue) {\r\n                    value = this.serializeValue(value)\r\n                }\r\n                for (var i = 0; i < dotCount; i++) {\r\n                    var name = path[i];\r\n                    data = data[name] = data[name] || {}\r\n                }\r\n                data[path[dotCount]] = value\r\n            };\r\n            var getDataColumns = function getDataColumns(columns, rowIndex, bandColumnID) {\r\n                var result = [];\r\n                rowIndex = rowIndex || 0;\r\n                columns[rowIndex] && _iterator2.default.each(columns[rowIndex], function(_, column) {\r\n                    if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                        if (!column.isBand || !column.colspan) {\r\n                            if (!column.command || rowIndex < 1) {\r\n                                result.push(column)\r\n                            }\r\n                        } else {\r\n                            result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index))\r\n                        }\r\n                    }\r\n                });\r\n                return result\r\n            };\r\n            var _getRowCount = function(that) {\r\n                var rowCount = 1;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var columnParentByIndex = bandColumnsCache.columnParentByIndex;\r\n                that._columns.forEach(function(column) {\r\n                    var parents = getParentBandColumns(column.index, columnParentByIndex);\r\n                    var invisibleParents = parents.filter(function(column) {\r\n                        return !column.visible\r\n                    });\r\n                    if (column.visible && !invisibleParents.length) {\r\n                        rowCount = Math.max(rowCount, parents.length + 1)\r\n                    }\r\n                });\r\n                return rowCount\r\n            };\r\n            var isCustomCommandColumn = function(that, commandColumn) {\r\n                return !!that._columns.filter(function(column) {\r\n                    return column.type === commandColumn.type\r\n                }).length\r\n            };\r\n            var getFixedPosition = function(that, column) {\r\n                var rtlEnabled = that.option(\"rtlEnabled\");\r\n                if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\r\n                    return rtlEnabled ? \"right\" : \"left\"\r\n                }\r\n                return column.fixedPosition\r\n            };\r\n            var processExpandColumns = function(columns, expandColumns, type, columnIndex) {\r\n                var customColumnIndex;\r\n                var rowCount = this.getRowCount();\r\n                var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\r\n                var expandColumnsByType = expandColumns.filter(function(column) {\r\n                    return column.type === type\r\n                });\r\n                columns.forEach(function(column, index) {\r\n                    if (column.type === type) {\r\n                        customColumnIndex = index;\r\n                        rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount\r\n                    }\r\n                });\r\n                if (rowspan > 1) {\r\n                    expandColumnsByType = _iterator2.default.map(expandColumnsByType, function(expandColumn) {\r\n                        return (0, _extend.extend)({}, expandColumn, {\r\n                            rowspan: rowspan\r\n                        })\r\n                    })\r\n                }\r\n                expandColumnsByType.unshift.apply(expandColumnsByType, (0, _type.isDefined)(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\r\n                columns.splice.apply(columns, expandColumnsByType);\r\n                return rowspan || 1\r\n            };\r\n            var digitsCount = function(number) {\r\n                var i;\r\n                for (i = 0; number > 1; i++) {\r\n                    number /= 10\r\n                }\r\n                return i\r\n            };\r\n            var numberToString = function(number, digitsCount) {\r\n                var str = number ? number.toString() : \"0\";\r\n                while (str.length < digitsCount) {\r\n                    str = \"0\" + str\r\n                }\r\n                return str\r\n            };\r\n            var mergeColumns = function(that, columns, commandColumns, needToExtend) {\r\n                var column;\r\n                var commandColumnIndex;\r\n                var result = columns.slice().map(function(column) {\r\n                    return (0, _extend.extend)({}, column)\r\n                });\r\n                var isColumnFixing = that._isColumnFixing();\r\n                var defaultCommandColumns = commandColumns.slice().map(function(column) {\r\n                    return (0, _extend.extend)({\r\n                        fixed: isColumnFixing\r\n                    }, column)\r\n                });\r\n                var getCommandColumnIndex = function(column) {\r\n                    return commandColumns.reduce(function(result, commandColumn, index) {\r\n                        var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\r\n                        return commandColumn.type === columnType || commandColumn.command === column.command ? index : result\r\n                    }, -1)\r\n                };\r\n                var callbackFilter = function(commandColumn) {\r\n                    return commandColumn.command !== commandColumns[commandColumnIndex].command\r\n                };\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    column = columns[i];\r\n                    commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\r\n                    if (commandColumnIndex >= 0) {\r\n                        if (needToExtend) {\r\n                            result[i] = (0, _extend.extend)({\r\n                                fixed: isColumnFixing\r\n                            }, commandColumns[commandColumnIndex], column);\r\n                            if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\r\n                                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter)\r\n                            }\r\n                        } else {\r\n                            var columnOptions = {\r\n                                visibleIndex: column.visibleIndex,\r\n                                index: column.index,\r\n                                headerId: column.headerId,\r\n                                allowFixing: 0 === column.groupIndex,\r\n                                allowReordering: 0 === column.groupIndex,\r\n                                groupIndex: column.groupIndex\r\n                            };\r\n                            result[i] = (0, _extend.extend)({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions)\r\n                        }\r\n                    }\r\n                }\r\n                if (columns.length && needToExtend && defaultCommandColumns.length) {\r\n                    result = result.concat(defaultCommandColumns)\r\n                }\r\n                return result\r\n            };\r\n            var isColumnFixed = function(that, column) {\r\n                return (0, _type.isDefined)(column.fixed) || !column.type ? column.fixed : that._isColumnFixing()\r\n            };\r\n            var convertOwnerBandToColumnReference = function(columns) {\r\n                columns.forEach(function(column) {\r\n                    if ((0, _type.isDefined)(column.ownerBand)) {\r\n                        column.ownerBand = columns[column.ownerBand]\r\n                    }\r\n                })\r\n            };\r\n            var resetBandColumnsCache = function(that) {\r\n                that._bandColumnsCache = void 0\r\n            };\r\n            var findColumn = function(columns, identifier) {\r\n                var identifierOptionName = (0, _type.isString)(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\r\n                var column;\r\n                if (void 0 === identifier) {\r\n                    return\r\n                }\r\n                if (identifierOptionName) {\r\n                    identifier = identifier.substr(identifierOptionName.length + 1)\r\n                }\r\n                if (identifierOptionName) {\r\n                    column = columns.filter(function(column) {\r\n                        return \"\" + column[identifierOptionName] === identifier\r\n                    })[0]\r\n                } else {\r\n                    [\"index\", \"name\", \"dataField\", \"caption\"].some(function(optionName) {\r\n                        column = columns.filter(function(column) {\r\n                            return column[optionName] === identifier\r\n                        })[0];\r\n                        return !!column\r\n                    })\r\n                }\r\n                return column\r\n            };\r\n            return {\r\n                _getExpandColumnOptions: function() {\r\n                    return {\r\n                        type: \"expand\",\r\n                        command: \"expand\",\r\n                        width: \"auto\",\r\n                        cssClass: COMMAND_EXPAND_CLASS,\r\n                        allowEditing: false,\r\n                        allowGrouping: false,\r\n                        allowSorting: false,\r\n                        allowResizing: false,\r\n                        allowReordering: false,\r\n                        allowHiding: false\r\n                    }\r\n                },\r\n                _getFirstItems: function(dataSource) {\r\n                    var groupsCount;\r\n                    var items = [];\r\n                    var getFirstItemsCore = function getFirstItemsCore(items, groupsCount) {\r\n                        if (!items || !groupsCount) {\r\n                            return items\r\n                        }\r\n                        for (var i = 0; i < items.length; i++) {\r\n                            var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\r\n                            if (childItems && childItems.length) {\r\n                                return childItems\r\n                            }\r\n                        }\r\n                    };\r\n                    if (dataSource && dataSource.items().length > 0) {\r\n                        groupsCount = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group()).length;\r\n                        items = getFirstItemsCore(dataSource.items(), groupsCount) || []\r\n                    }\r\n                    return items\r\n                },\r\n                _endUpdateCore: function() {\r\n                    !this._skipProcessingColumnsChange && fireColumnsChanged(this)\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    var columns = that.option(\"columns\");\r\n                    that._commandColumns = that._commandColumns || [];\r\n                    that._columns = that._columns || [];\r\n                    that._isColumnsFromOptions = !!columns;\r\n                    if (that._isColumnsFromOptions) {\r\n                        assignColumns(that, columns ? createColumnsFromOptions(that, columns) : []);\r\n                        applyUserState(that)\r\n                    } else {\r\n                        assignColumns(that, that._columnsUserState ? createColumnsFromOptions(that, that._columnsUserState) : that._columns)\r\n                    }\r\n                    addExpandColumn(that);\r\n                    if (that._dataSourceApplied) {\r\n                        that.applyDataSource(that._dataSource, true)\r\n                    } else {\r\n                        updateIndexes(that)\r\n                    }\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"columnsChanged\"]\r\n                },\r\n                getColumnByPath: function(path, columns) {\r\n                    var that = this;\r\n                    var column;\r\n                    var columnIndexes = [];\r\n                    path.replace(regExp, function(_, columnIndex) {\r\n                        columnIndexes.push(parseInt(columnIndex));\r\n                        return \"\"\r\n                    });\r\n                    if (columnIndexes.length) {\r\n                        if (columns) {\r\n                            column = columnIndexes.reduce(function(column, index) {\r\n                                return column && column.columns && column.columns[index]\r\n                            }, {\r\n                                columns: columns\r\n                            })\r\n                        } else {\r\n                            column = getColumnByIndexes(that, columnIndexes)\r\n                        }\r\n                    }\r\n                    return column\r\n                },\r\n                optionChanged: function(args) {\r\n                    var needUpdateRequireResize;\r\n                    switch (args.name) {\r\n                        case \"adaptColumnWidthByRatio\":\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"dataSource\":\r\n                            if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\r\n                                this._columns = []\r\n                            }\r\n                            break;\r\n                        case \"columns\":\r\n                            needUpdateRequireResize = this._skipProcessingColumnsChange;\r\n                            args.handled = true;\r\n                            if (!this._skipProcessingColumnsChange) {\r\n                                if (args.name === args.fullName) {\r\n                                    this._columnsUserState = null;\r\n                                    this._ignoreColumnOptionNames = null;\r\n                                    this.init()\r\n                                } else {\r\n                                    this._columnOptionChanged(args);\r\n                                    needUpdateRequireResize = true\r\n                                }\r\n                            }\r\n                            if (needUpdateRequireResize) {\r\n                                this._updateRequireResize(args)\r\n                            }\r\n                            break;\r\n                        case \"commonColumnSettings\":\r\n                        case \"columnAutoWidth\":\r\n                        case \"allowColumnResizing\":\r\n                        case \"allowColumnReordering\":\r\n                        case \"columnFixing\":\r\n                        case \"grouping\":\r\n                        case \"groupPanel\":\r\n                        case \"regenerateColumnsByVisibleItems\":\r\n                        case \"customizeColumns\":\r\n                        case \"editing\":\r\n                        case \"columnHidingEnabled\":\r\n                        case \"dateSerializationFormat\":\r\n                        case \"columnResizingMode\":\r\n                        case \"columnMinWidth\":\r\n                        case \"columnWidth\":\r\n                            args.handled = true;\r\n                            var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\r\n                            var isEditingPopup = args.fullName && 0 === args.fullName.indexOf(\"editing.popup\");\r\n                            var isEditingForm = args.fullName && 0 === args.fullName.indexOf(\"editing.form\");\r\n                            if (!isEditingPopup && !isEditingForm) {\r\n                                this.reinit(ignoreColumnOptionNames)\r\n                            }\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this.reinit();\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(args) {\r\n                    var columnOptionValue = {};\r\n                    var column = this.getColumnByPath(args.fullName);\r\n                    var columnOptionName = args.fullName.replace(regExp, \"\");\r\n                    if (column) {\r\n                        if (columnOptionName) {\r\n                            columnOptionValue[columnOptionName] = args.value\r\n                        } else {\r\n                            columnOptionValue = args.value\r\n                        }\r\n                        this._skipProcessingColumnsChange = args.fullName;\r\n                        this.columnOption(column.index, columnOptionValue);\r\n                        this._skipProcessingColumnsChange = false\r\n                    }\r\n                },\r\n                _updateRequireResize: function(args) {\r\n                    var component = this.component;\r\n                    if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\r\n                        component._requireResize = true\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"]\r\n                },\r\n                applyDataSource: function(dataSource, forceApplying) {\r\n                    var that = this;\r\n                    var isDataSourceLoaded = dataSource && dataSource.isLoaded();\r\n                    that._dataSource = dataSource;\r\n                    if (!that._dataSourceApplied || 0 === that._dataSourceColumnsCount || forceApplying || that.option(\"regenerateColumnsByVisibleItems\")) {\r\n                        if (isDataSourceLoaded) {\r\n                            if (!that._isColumnsFromOptions) {\r\n                                var columnsFromDataSource = createColumnsFromDataSource(that, dataSource);\r\n                                if (columnsFromDataSource.length) {\r\n                                    assignColumns(that, columnsFromDataSource);\r\n                                    that._dataSourceColumnsCount = that._columns.length;\r\n                                    applyUserState(that)\r\n                                }\r\n                            }\r\n                            return that.updateColumns(dataSource, forceApplying)\r\n                        } else {\r\n                            that._dataSourceApplied = false\r\n                        }\r\n                    } else {\r\n                        if (isDataSourceLoaded && !that.isAllDataTypesDefined(true) && that.updateColumnDataTypes(dataSource)) {\r\n                            updateColumnChanges(that, \"columns\");\r\n                            fireColumnsChanged(that);\r\n                            return (new _deferred.Deferred).reject().promise()\r\n                        }\r\n                    }\r\n                },\r\n                reset: function() {\r\n                    this._dataSourceApplied = false;\r\n                    this._dataSourceColumnsCount = void 0;\r\n                    this.reinit()\r\n                },\r\n                resetColumnsCache: function() {\r\n                    var that = this;\r\n                    that._visibleColumns = void 0;\r\n                    that._fixedColumns = void 0;\r\n                    that._rowCount = void 0;\r\n                    resetBandColumnsCache(that)\r\n                },\r\n                reinit: function(ignoreColumnOptionNames) {\r\n                    this._columnsUserState = this.getUserState();\r\n                    this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\r\n                    this.init();\r\n                    if (ignoreColumnOptionNames) {\r\n                        this._ignoreColumnOptionNames = null\r\n                    }\r\n                },\r\n                isInitialized: function() {\r\n                    return !!this._columns.length || !!this.option(\"columns\")\r\n                },\r\n                isDataSourceApplied: function() {\r\n                    return this._dataSourceApplied\r\n                },\r\n                getCommonSettings: function(column) {\r\n                    var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\r\n                    var groupingOptions = this.option(\"grouping\") || {};\r\n                    var groupPanelOptions = this.option(\"groupPanel\") || {};\r\n                    return (0, _extend.extend)({\r\n                        allowFixing: this.option(\"columnFixing.enabled\"),\r\n                        allowResizing: this.option(\"allowColumnResizing\") || void 0,\r\n                        allowReordering: this.option(\"allowColumnReordering\"),\r\n                        minWidth: this.option(\"columnMinWidth\"),\r\n                        width: this.option(\"columnWidth\"),\r\n                        autoExpandGroup: groupingOptions.autoExpandAll,\r\n                        allowCollapsing: groupingOptions.allowCollapsing,\r\n                        allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\r\n                    }, commonColumnSettings)\r\n                },\r\n                isColumnOptionUsed: function(optionName) {\r\n                    for (var i = 0; i < this._columns.length; i++) {\r\n                        if (this._columns[i][optionName]) {\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                isAllDataTypesDefined: function(checkSerializers) {\r\n                    var columns = this._columns;\r\n                    if (!columns.length) {\r\n                        return false\r\n                    }\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\r\n                            continue\r\n                        }\r\n                        if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                getColumns: function() {\r\n                    return this._columns\r\n                },\r\n                isBandColumnsUsed: function() {\r\n                    return this.getColumns().some(function(column) {\r\n                        return column.isBand\r\n                    })\r\n                },\r\n                getGroupColumns: function() {\r\n                    var result = [];\r\n                    _iterator2.default.each(this._columns, function() {\r\n                        var column = this;\r\n                        if ((0, _type.isDefined)(column.groupIndex)) {\r\n                            result[column.groupIndex] = column\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                getVisibleColumns: function(rowIndex) {\r\n                    this._visibleColumns = this._visibleColumns || this._getVisibleColumnsCore();\r\n                    rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\r\n                    return this._visibleColumns[rowIndex] || []\r\n                },\r\n                getFixedColumns: function(rowIndex) {\r\n                    this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\r\n                    rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\r\n                    return this._fixedColumns[rowIndex] || []\r\n                },\r\n                getFilteringColumns: function() {\r\n                    return this.getColumns().filter(function(item) {\r\n                        return (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)\r\n                    }).map(function(item) {\r\n                        var field = (0, _extend.extend)(true, {}, item);\r\n                        if (!(0, _type.isDefined)(field.dataField)) {\r\n                            field.dataField = field.name\r\n                        }\r\n                        field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\r\n                        return field\r\n                    })\r\n                },\r\n                _getFixedColumnsCore: function() {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var rowCount = that.getRowCount();\r\n                    var isColumnFixing = that._isColumnFixing();\r\n                    var transparentColumn = {\r\n                        command: \"transparent\"\r\n                    };\r\n                    var transparentColspan = 0;\r\n                    var notFixedColumnCount;\r\n                    var transparentColumnIndex;\r\n                    var lastFixedPosition;\r\n                    if (isColumnFixing) {\r\n                        for (var i = 0; i <= rowCount; i++) {\r\n                            notFixedColumnCount = 0;\r\n                            lastFixedPosition = null;\r\n                            transparentColumnIndex = null;\r\n                            var visibleColumns = that.getVisibleColumns(i, true);\r\n                            for (var j = 0; j < visibleColumns.length; j++) {\r\n                                var prevColumn = visibleColumns[j - 1];\r\n                                var column = visibleColumns[j];\r\n                                if (!column.fixed) {\r\n                                    if (0 === i) {\r\n                                        if (column.isBand && column.colspan) {\r\n                                            transparentColspan += column.colspan\r\n                                        } else {\r\n                                            transparentColspan++\r\n                                        }\r\n                                    }\r\n                                    notFixedColumnCount++;\r\n                                    if (!(0, _type.isDefined)(transparentColumnIndex)) {\r\n                                        transparentColumnIndex = j\r\n                                    }\r\n                                } else {\r\n                                    if (prevColumn && prevColumn.fixed && getFixedPosition(that, prevColumn) !== getFixedPosition(that, column)) {\r\n                                        if (!(0, _type.isDefined)(transparentColumnIndex)) {\r\n                                            transparentColumnIndex = j\r\n                                        }\r\n                                    } else {\r\n                                        lastFixedPosition = column.fixedPosition\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\r\n                                return []\r\n                            }\r\n                            if (!(0, _type.isDefined)(transparentColumnIndex)) {\r\n                                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length\r\n                            }\r\n                            result[i] = visibleColumns.slice(0);\r\n                            if (!transparentColumn.colspan) {\r\n                                transparentColumn.colspan = transparentColspan\r\n                            }\r\n                            result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn)\r\n                        }\r\n                    }\r\n                    return result.map(function(columns) {\r\n                        return columns.map(function(column) {\r\n                            var newColumn = _objectSpread({}, column);\r\n                            if (newColumn.headerId) {\r\n                                newColumn.headerId += \"-fixed\"\r\n                            }\r\n                            return newColumn\r\n                        })\r\n                    })\r\n                },\r\n                _isColumnFixing: function() {\r\n                    var isColumnFixing = this.option(\"columnFixing.enabled\");\r\n                    !isColumnFixing && _iterator2.default.each(this._columns, function(_, column) {\r\n                        if (column.fixed) {\r\n                            isColumnFixing = true;\r\n                            return false\r\n                        }\r\n                    });\r\n                    return isColumnFixing\r\n                },\r\n                _getExpandColumnsCore: function() {\r\n                    return this.getGroupColumns()\r\n                },\r\n                getExpandColumns: function() {\r\n                    var expandColumns = this._getExpandColumnsCore();\r\n                    var expandColumn;\r\n                    var firstGroupColumn = expandColumns.filter(function(column) {\r\n                        return 0 === column.groupIndex\r\n                    })[0];\r\n                    var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\r\n                    var isColumnFixing = this._isColumnFixing();\r\n                    if (expandColumns.length) {\r\n                        expandColumn = this.columnOption(\"command:expand\")\r\n                    }\r\n                    expandColumns = _iterator2.default.map(expandColumns, function(column) {\r\n                        return (0, _extend.extend)({}, column, {\r\n                            visibleWidth: null,\r\n                            minWidth: null,\r\n                            cellTemplate: !(0, _type.isDefined)(column.groupIndex) ? column.cellTemplate : null,\r\n                            headerCellTemplate: null,\r\n                            fixed: !(0, _type.isDefined)(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true\r\n                        }, expandColumn, {\r\n                            index: column.index,\r\n                            type: column.type || GROUP_COMMAND_COLUMN_NAME\r\n                        })\r\n                    });\r\n                    return expandColumns\r\n                },\r\n                getBandColumnsCache: function() {\r\n                    if (!this._bandColumnsCache) {\r\n                        var columns = this._columns;\r\n                        var columnChildrenByIndex = {};\r\n                        var columnParentByIndex = {};\r\n                        var isPlain = true;\r\n                        columns.forEach(function(column) {\r\n                            var parentIndex = column.ownerBand;\r\n                            var parent = columns[parentIndex];\r\n                            if (column.hasColumns) {\r\n                                isPlain = false\r\n                            }\r\n                            if (column.colspan) {\r\n                                column.colspan = void 0\r\n                            }\r\n                            if (column.rowspan) {\r\n                                column.rowspan = void 0\r\n                            }\r\n                            if (parent) {\r\n                                columnParentByIndex[column.index] = parent\r\n                            } else {\r\n                                parentIndex = -1\r\n                            }\r\n                            columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\r\n                            columnChildrenByIndex[parentIndex].push(column)\r\n                        });\r\n                        this._bandColumnsCache = {\r\n                            isPlain: isPlain,\r\n                            columnChildrenByIndex: columnChildrenByIndex,\r\n                            columnParentByIndex: columnParentByIndex\r\n                        }\r\n                    }\r\n                    return this._bandColumnsCache\r\n                },\r\n                _isColumnVisible: function(column) {\r\n                    return column.visible && this.isParentColumnVisible(column.index)\r\n                },\r\n                _getVisibleColumnsCore: function() {\r\n                    var that = this;\r\n                    var i;\r\n                    var result = [];\r\n                    var rowspanGroupColumns = 0;\r\n                    var rowspanExpandColumns = 0;\r\n                    var rowCount = that.getRowCount();\r\n                    var positiveIndexedColumns = [];\r\n                    var negativeIndexedColumns = [];\r\n                    var notGroupedColumnsCount = 0;\r\n                    var isFixedToEnd;\r\n                    var rtlEnabled = that.option(\"rtlEnabled\");\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\r\n                    var columns = mergeColumns(that, that._columns, that._commandColumns, true);\r\n                    var columnDigitsCount = digitsCount(columns.length);\r\n                    processBandColumns(that, columns, bandColumnsCache);\r\n                    for (i = 0; i < rowCount; i++) {\r\n                        result[i] = [];\r\n                        negativeIndexedColumns[i] = [{}];\r\n                        positiveIndexedColumns[i] = [{}, {}, {}]\r\n                    }\r\n                    _iterator2.default.each(columns, function() {\r\n                        var column = this;\r\n                        var visibleIndex = column.visibleIndex;\r\n                        var indexedColumns;\r\n                        var parentBandColumns = getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex);\r\n                        var visible = that._isColumnVisible(column);\r\n                        if (visible && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\r\n                            var rowIndex = parentBandColumns.length;\r\n                            if (visibleIndex < 0) {\r\n                                visibleIndex = -visibleIndex;\r\n                                indexedColumns = negativeIndexedColumns[rowIndex]\r\n                            } else {\r\n                                column.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : column.fixed;\r\n                                column.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : column.fixedPosition;\r\n                                if (column.fixed) {\r\n                                    isFixedToEnd = \"right\" === column.fixedPosition;\r\n                                    if (rtlEnabled && (!column.command || isCustomCommandColumn(that, column))) {\r\n                                        isFixedToEnd = !isFixedToEnd\r\n                                    }\r\n                                    if (isFixedToEnd) {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][2]\r\n                                    } else {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][0]\r\n                                    }\r\n                                } else {\r\n                                    indexedColumns = positiveIndexedColumns[rowIndex][1]\r\n                                }\r\n                            }\r\n                            if (parentBandColumns.length) {\r\n                                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\r\n                                for (i = parentBandColumns.length - 1; i >= 0; i--) {\r\n                                    visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex\r\n                                }\r\n                            }\r\n                            indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\r\n                            indexedColumns[visibleIndex].push(column);\r\n                            notGroupedColumnsCount++\r\n                        }\r\n                    });\r\n                    _iterator2.default.each(result, function(rowIndex) {\r\n                        (0, _object.orderEach)(negativeIndexedColumns[rowIndex], function(_, columns) {\r\n                            result[rowIndex].unshift.apply(result[rowIndex], columns)\r\n                        });\r\n                        var firstPositiveIndexColumn = result[rowIndex].length;\r\n                        _iterator2.default.each(positiveIndexedColumns[rowIndex], function(index, columnsByFixing) {\r\n                            (0, _object.orderEach)(columnsByFixing, function(_, columnsByVisibleIndex) {\r\n                                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex)\r\n                            })\r\n                        });\r\n                        if (rowspanExpandColumns < rowIndex + 1) {\r\n                            rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn)\r\n                        }\r\n                        if (rowspanGroupColumns < rowIndex + 1) {\r\n                            rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn)\r\n                        }\r\n                    });\r\n                    result.push(getDataColumns(result));\r\n                    if (!notGroupedColumnsCount && that._columns.length) {\r\n                        result[rowCount].push({\r\n                            command: \"empty\"\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                getInvisibleColumns: function(columns, bandColumnIndex) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var hiddenColumnsByBand;\r\n                    columns = columns || that._columns;\r\n                    _iterator2.default.each(columns, function(_, column) {\r\n                        if (column.ownerBand !== bandColumnIndex) {\r\n                            return\r\n                        }\r\n                        if (column.isBand) {\r\n                            if (!column.visible) {\r\n                                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index)\r\n                            } else {\r\n                                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index)\r\n                            }\r\n                            if (hiddenColumnsByBand.length) {\r\n                                result.push(column);\r\n                                result = result.concat(hiddenColumnsByBand)\r\n                            }\r\n                            return\r\n                        }\r\n                        if (!column.visible) {\r\n                            result.push(column)\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                getChooserColumns: function(getAllColumns) {\r\n                    var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\r\n                    return (0, _common.grep)(columns, function(column) {\r\n                        return column.showInColumnChooser\r\n                    })\r\n                },\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var that = this;\r\n                    var columnIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\r\n                    var sourceColumn = that._columns[columnIndex];\r\n                    if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\r\n                        if (sourceLocation === targetLocation) {\r\n                            if (sourceLocation === COLUMN_CHOOSER_LOCATION) {\r\n                                return false\r\n                            }\r\n                            fromVisibleIndex = (0, _type.isObject)(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\r\n                            toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                            return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex\r\n                        } else {\r\n                            if (sourceLocation === GROUP_LOCATION && targetLocation !== COLUMN_CHOOSER_LOCATION || targetLocation === GROUP_LOCATION) {\r\n                                return sourceColumn && sourceColumn.allowGrouping\r\n                            } else {\r\n                                if (sourceLocation === COLUMN_CHOOSER_LOCATION || targetLocation === COLUMN_CHOOSER_LOCATION) {\r\n                                    return sourceColumn && sourceColumn.allowHiding\r\n                                }\r\n                            }\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                moveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var that = this;\r\n                    var options = {};\r\n                    var prevGroupIndex;\r\n                    var fromIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\r\n                    var toIndex = getColumnIndexByVisibleIndex(that, toVisibleIndex, targetLocation);\r\n                    var targetGroupIndex;\r\n                    if (fromIndex >= 0) {\r\n                        var column = that._columns[fromIndex];\r\n                        toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                        targetGroupIndex = toIndex >= 0 ? that._columns[toIndex].groupIndex : -1;\r\n                        if ((0, _type.isDefined)(column.groupIndex) && sourceLocation === GROUP_LOCATION) {\r\n                            if (targetGroupIndex > column.groupIndex) {\r\n                                targetGroupIndex--\r\n                            }\r\n                            if (targetLocation !== GROUP_LOCATION) {\r\n                                options.groupIndex = void 0\r\n                            } else {\r\n                                prevGroupIndex = column.groupIndex;\r\n                                delete column.groupIndex;\r\n                                updateColumnGroupIndexes(that)\r\n                            }\r\n                        }\r\n                        if (targetLocation === GROUP_LOCATION) {\r\n                            options.groupIndex = moveColumnToGroup(that, column, targetGroupIndex);\r\n                            column.groupIndex = prevGroupIndex\r\n                        } else {\r\n                            if (toVisibleIndex >= 0) {\r\n                                var targetColumn = that._columns[toIndex];\r\n                                if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\r\n                                    options.visibleIndex = MAX_SAFE_INTEGER\r\n                                } else {\r\n                                    if (isColumnFixed(that, column) ^ isColumnFixed(that, targetColumn)) {\r\n                                        options.visibleIndex = MAX_SAFE_INTEGER\r\n                                    } else {\r\n                                        options.visibleIndex = targetColumn.visibleIndex\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var isVisible = targetLocation !== COLUMN_CHOOSER_LOCATION;\r\n                        if (column.visible !== isVisible) {\r\n                            options.visible = isVisible\r\n                        }\r\n                        that.columnOption(column.index, options)\r\n                    }\r\n                },\r\n                changeSortOrder: function(columnIndex, sortOrder) {\r\n                    var that = this;\r\n                    var options = {};\r\n                    var sortingOptions = that.option(\"sorting\");\r\n                    var sortingMode = sortingOptions && sortingOptions.mode;\r\n                    var needResetSorting = \"single\" === sortingMode || !sortOrder;\r\n                    var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\r\n                    var column = that._columns[columnIndex];\r\n                    var nextSortOrder = function(column) {\r\n                        if (\"ctrl\" === sortOrder) {\r\n                            if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\r\n                                return false\r\n                            }\r\n                            options.sortOrder = void 0;\r\n                            options.sortIndex = void 0\r\n                        } else {\r\n                            if ((0, _type.isDefined)(column.groupIndex) || (0, _type.isDefined)(column.sortIndex)) {\r\n                                options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\"\r\n                            } else {\r\n                                options.sortOrder = \"asc\"\r\n                            }\r\n                        }\r\n                        return true\r\n                    };\r\n                    if (allowSorting && column && column.allowSorting) {\r\n                        if (needResetSorting && !(0, _type.isDefined)(column.groupIndex)) {\r\n                            _iterator2.default.each(that._columns, function(index) {\r\n                                if (index !== columnIndex && this.sortOrder && !(0, _type.isDefined)(this.groupIndex)) {\r\n                                    delete this.sortOrder;\r\n                                    delete this.sortIndex\r\n                                }\r\n                            })\r\n                        }\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            if (column.sortOrder !== sortOrder) {\r\n                                options.sortOrder = sortOrder\r\n                            }\r\n                        } else {\r\n                            if (\"none\" === sortOrder) {\r\n                                if (column.sortOrder) {\r\n                                    options.sortIndex = void 0;\r\n                                    options.sortOrder = void 0\r\n                                }\r\n                            } else {\r\n                                nextSortOrder(column)\r\n                            }\r\n                        }\r\n                    }\r\n                    that.columnOption(column.index, options)\r\n                },\r\n                getSortDataSourceParameters: function(useLocalSelector) {\r\n                    var that = this;\r\n                    var sortColumns = [];\r\n                    var sort = [];\r\n                    _iterator2.default.each(that._columns, function() {\r\n                        if ((this.dataField || this.selector || this.calculateCellValue) && (0, _type.isDefined)(this.sortIndex) && !(0, _type.isDefined)(this.groupIndex)) {\r\n                            sortColumns[this.sortIndex] = this\r\n                        }\r\n                    });\r\n                    _iterator2.default.each(sortColumns, function() {\r\n                        var sortOrder = this && this.sortOrder;\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            var sortItem = {\r\n                                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\r\n                                desc: \"desc\" === this.sortOrder\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                sortItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            sort.push(sortItem)\r\n                        }\r\n                    });\r\n                    return sort.length > 0 ? sort : null\r\n                },\r\n                getGroupDataSourceParameters: function(useLocalSelector) {\r\n                    var group = [];\r\n                    _iterator2.default.each(this.getGroupColumns(), function() {\r\n                        var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\r\n                        if (selector) {\r\n                            var groupItem = {\r\n                                selector: selector,\r\n                                desc: \"desc\" === this.sortOrder,\r\n                                isExpanded: !!this.autoExpandGroup\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                groupItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            group.push(groupItem)\r\n                        }\r\n                    });\r\n                    return group.length > 0 ? group : null\r\n                },\r\n                refresh: function(updateNewLookupsOnly) {\r\n                    var deferreds = [];\r\n                    _iterator2.default.each(this._columns, function() {\r\n                        var lookup = this.lookup;\r\n                        if (lookup && !this.calculateDisplayValue) {\r\n                            if (updateNewLookupsOnly && lookup.valueMap) {\r\n                                return\r\n                            }\r\n                            if (lookup.update) {\r\n                                deferreds.push(lookup.update())\r\n                            }\r\n                        }\r\n                    });\r\n                    return _deferred.when.apply(_renderer2.default, deferreds).done(resetColumnsCache.bind(null, this))\r\n                },\r\n                _updateColumnOptions: function(column, columnIndex) {\r\n                    column.selector = column.selector || function(data) {\r\n                        return column.calculateCellValue(data)\r\n                    };\r\n                    _iterator2.default.each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], function(_, calculateCallbackName) {\r\n                        var calculateCallback = column[calculateCallbackName];\r\n                        if ((0, _type.isFunction)(calculateCallback) && !calculateCallback.originalCallback) {\r\n                            column[calculateCallbackName] = function(data) {\r\n                                return calculateCallback.call(column, data)\r\n                            };\r\n                            column[calculateCallbackName].originalCallback = calculateCallback;\r\n                            column[calculateCallbackName].columnIndex = columnIndex\r\n                        }\r\n                    });\r\n                    if ((0, _type.isString)(column.calculateDisplayValue)) {\r\n                        column.displayField = column.calculateDisplayValue;\r\n                        column.calculateDisplayValue = _data2.default.compileGetter(column.displayField)\r\n                    }\r\n                    if (column.calculateDisplayValue) {\r\n                        column.displayValueMap = column.displayValueMap || {}\r\n                    }\r\n                    updateSerializers(column, column.dataType);\r\n                    var lookup = column.lookup;\r\n                    if (lookup) {\r\n                        updateSerializers(lookup, lookup.dataType)\r\n                    }\r\n                    var dataType = lookup ? lookup.dataType : column.dataType;\r\n                    if (dataType) {\r\n                        column.alignment = column.alignment || getAlignmentByDataType(dataType, this.option(\"rtlEnabled\"));\r\n                        column.format = column.format || (0, _uiGrid_core3.getFormatByDataType)(dataType);\r\n                        column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\r\n                        column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\r\n                        if (!(0, _type.isDefined)(column.filterOperations)) {\r\n                            setFilterOperationsAsDefaultValues(column)\r\n                        }\r\n                        column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\r\n                        column.showEditorAlways = (0, _type.isDefined)(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate\r\n                    }\r\n                },\r\n                updateColumnDataTypes: function(dataSource) {\r\n                    var that = this;\r\n                    var dateSerializationFormat = that.option(\"dateSerializationFormat\");\r\n                    var firstItems = that._getFirstItems(dataSource);\r\n                    var isColumnDataTypesUpdated = false;\r\n                    _iterator2.default.each(that._columns, function(index, column) {\r\n                        var i;\r\n                        var value;\r\n                        var dataType;\r\n                        var lookupDataType;\r\n                        var valueDataType;\r\n                        var lookup = column.lookup;\r\n                        if ((0, _uiGrid_core3.isDateType)(column.dataType) && void 0 === column.serializationFormat) {\r\n                            column.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (lookup && (0, _uiGrid_core3.isDateType)(lookup.dataType) && void 0 === column.serializationFormat) {\r\n                            lookup.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (column.calculateCellValue && firstItems.length) {\r\n                            if (!column.dataType || lookup && !lookup.dataType) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i]);\r\n                                    if (!column.dataType) {\r\n                                        valueDataType = getValueDataType(value);\r\n                                        dataType = dataType || valueDataType;\r\n                                        if (dataType && valueDataType && dataType !== valueDataType) {\r\n                                            dataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                    if (lookup && !lookup.dataType) {\r\n                                        valueDataType = getValueDataType((0, _uiGrid_core3.getDisplayValue)(column, value, firstItems[i]));\r\n                                        lookupDataType = lookupDataType || valueDataType;\r\n                                        if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\r\n                                            lookupDataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (dataType || lookupDataType) {\r\n                                    if (dataType) {\r\n                                        column.dataType = dataType\r\n                                    }\r\n                                    if (lookup && lookupDataType) {\r\n                                        lookup.dataType = lookupDataType\r\n                                    }\r\n                                    isColumnDataTypesUpdated = true\r\n                                }\r\n                            }\r\n                            if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i], true);\r\n                                    if (void 0 === column.serializationFormat) {\r\n                                        column.serializationFormat = getSerializationFormat(column.dataType, value)\r\n                                    }\r\n                                    if (lookup && void 0 === lookup.serializationFormat) {\r\n                                        lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        that._updateColumnOptions(column, index)\r\n                    });\r\n                    return isColumnDataTypesUpdated\r\n                },\r\n                _customizeColumns: function(columns) {\r\n                    var that = this;\r\n                    var customizeColumns = that.option(\"customizeColumns\");\r\n                    if (customizeColumns) {\r\n                        var hasOwnerBand = columns.some(function(column) {\r\n                            return (0, _type.isObject)(column.ownerBand)\r\n                        });\r\n                        if (hasOwnerBand) {\r\n                            updateIndexes(that)\r\n                        }\r\n                        customizeColumns(columns);\r\n                        assignColumns(that, createColumnsFromOptions(that, columns))\r\n                    }\r\n                },\r\n                updateColumns: function(dataSource, forceApplying) {\r\n                    var _this = this;\r\n                    if (!forceApplying) {\r\n                        this.updateSortingGrouping(dataSource)\r\n                    }\r\n                    if (!dataSource || dataSource.isLoaded()) {\r\n                        var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\r\n                        var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\r\n                        var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\r\n                        this._customizeColumns(this._columns);\r\n                        updateIndexes(this);\r\n                        var columns = this._columns;\r\n                        return (0, _deferred.when)(this.refresh(true)).always(function() {\r\n                            if (_this._columns !== columns) {\r\n                                return\r\n                            }\r\n                            _this._updateChanges(dataSource, {\r\n                                sorting: sortParameters,\r\n                                grouping: groupParameters,\r\n                                filtering: filterParameters\r\n                            });\r\n                            fireColumnsChanged(_this)\r\n                        })\r\n                    }\r\n                },\r\n                _updateChanges: function(dataSource, parameters) {\r\n                    if (dataSource) {\r\n                        this.updateColumnDataTypes(dataSource);\r\n                        this._dataSourceApplied = true\r\n                    }\r\n                    if (!(0, _uiGrid_core3.equalSortParameters)(parameters.sorting, this.getSortDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"sorting\")\r\n                    }\r\n                    if (!(0, _uiGrid_core3.equalSortParameters)(parameters.grouping, this.getGroupDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"grouping\")\r\n                    }\r\n                    var dataController = this.getController(\"data\");\r\n                    if (dataController && !(0, _uiGrid_core3.equalFilterParameters)(parameters.filtering, dataController.getCombinedFilter())) {\r\n                        updateColumnChanges(this, \"filtering\")\r\n                    }\r\n                    updateColumnChanges(this, \"columns\")\r\n                },\r\n                updateSortingGrouping: function(dataSource, fromDataSource) {\r\n                    var that = this;\r\n                    var sortParameters;\r\n                    var isColumnsChanged;\r\n                    var updateSortGroupParameterIndexes = function(columns, sortParameters, indexParameterName) {\r\n                        _iterator2.default.each(columns, function(index, column) {\r\n                            delete column[indexParameterName];\r\n                            if (sortParameters) {\r\n                                for (var i = 0; i < sortParameters.length; i++) {\r\n                                    var selector = sortParameters[i].selector;\r\n                                    var isExpanded = sortParameters[i].isExpanded;\r\n                                    if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {\r\n                                        column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\");\r\n                                        if (void 0 !== isExpanded) {\r\n                                            column.autoExpandGroup = isExpanded\r\n                                        }\r\n                                        column[indexParameterName] = i;\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    };\r\n                    if (dataSource) {\r\n                        sortParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.sort());\r\n                        var groupParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group());\r\n                        var columnsGroupParameters = that.getGroupDataSourceParameters();\r\n                        var columnsSortParameters = that.getSortDataSourceParameters();\r\n                        if (!that._columns.length) {\r\n                            _iterator2.default.each(groupParameters, function(index, group) {\r\n                                that._columns.push(group.selector)\r\n                            });\r\n                            _iterator2.default.each(sortParameters, function(index, sort) {\r\n                                that._columns.push(sort.selector)\r\n                            });\r\n                            assignColumns(that, createColumnsFromOptions(that, that._columns))\r\n                        }\r\n                        if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(groupParameters, columnsGroupParameters)) {\r\n                            updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\r\n                            if (fromDataSource) {\r\n                                updateColumnChanges(that, \"grouping\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(sortParameters, columnsSortParameters)) {\r\n                            updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\r\n                            if (fromDataSource) {\r\n                                updateColumnChanges(that, \"sorting\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if (isColumnsChanged) {\r\n                            fireColumnsChanged(that)\r\n                        }\r\n                    }\r\n                },\r\n                updateFilter: function(filter, remoteFiltering, columnIndex, filterValue) {\r\n                    var that = this;\r\n                    if (!Array.isArray(filter)) {\r\n                        return filter\r\n                    }\r\n                    filter = (0, _extend.extend)([], filter);\r\n                    columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\r\n                    filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\r\n                    if ((0, _type.isString)(filter[0]) && \"!\" !== filter[0]) {\r\n                        var column = that.columnOption(filter[0]);\r\n                        if (remoteFiltering) {\r\n                            if ((0, _config2.default)().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\r\n                                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\")\r\n                            }\r\n                        } else {\r\n                            if (column && column.selector) {\r\n                                filter[0] = column.selector;\r\n                                filter[0].columnIndex = column.index\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if ((0, _type.isFunction)(filter[0])) {\r\n                            filter[0].columnIndex = columnIndex;\r\n                            filter[0].filterValue = filterValue\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < filter.length; i++) {\r\n                        filter[i] = that.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue)\r\n                    }\r\n                    return filter\r\n                },\r\n                columnCount: function() {\r\n                    return this._columns ? this._columns.length : 0\r\n                },\r\n                columnOption: function(identifier, option, value, notFireEvent) {\r\n                    var that = this;\r\n                    var columns = that._columns.concat(that._commandColumns);\r\n                    var column = findColumn(columns, identifier);\r\n                    if (column) {\r\n                        if (1 === arguments.length) {\r\n                            return (0, _extend.extend)({}, column)\r\n                        }\r\n                        if ((0, _type.isString)(option)) {\r\n                            if (2 === arguments.length) {\r\n                                return columnOptionCore(that, column, option)\r\n                            } else {\r\n                                columnOptionCore(that, column, option, value, notFireEvent)\r\n                            }\r\n                        } else {\r\n                            if ((0, _type.isObject)(option)) {\r\n                                _iterator2.default.each(option, function(optionName, value) {\r\n                                    columnOptionCore(that, column, optionName, value, notFireEvent)\r\n                                })\r\n                            }\r\n                        }\r\n                        fireColumnsChanged(that)\r\n                    }\r\n                },\r\n                clearSorting: function() {\r\n                    var that = this;\r\n                    var columnCount = this.columnCount();\r\n                    that.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        that.columnOption(i, \"sortOrder\", void 0)\r\n                    }\r\n                    that.endUpdate()\r\n                },\r\n                clearGrouping: function() {\r\n                    var that = this;\r\n                    var columnCount = this.columnCount();\r\n                    that.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        that.columnOption(i, \"groupIndex\", void 0)\r\n                    }\r\n                    that.endUpdate()\r\n                },\r\n                getVisibleIndex: function(index, rowIndex) {\r\n                    var columns = this.getVisibleColumns(rowIndex);\r\n                    for (var i = columns.length - 1; i >= 0; i--) {\r\n                        if (columns[i].index === index) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return -1\r\n                },\r\n                getVisibleColumnIndex: function(id, rowIndex) {\r\n                    var index = this.columnOption(id, \"index\");\r\n                    return this.getVisibleIndex(index, rowIndex)\r\n                },\r\n                addColumn: function(options) {\r\n                    var that = this;\r\n                    var column = createColumn(that, options);\r\n                    var index = that._columns.length;\r\n                    that._columns.push(column);\r\n                    if (column.isBand) {\r\n                        that._columns = createColumnsFromOptions(that, that._columns);\r\n                        column = that._columns[index]\r\n                    }\r\n                    column.added = options;\r\n                    updateIndexes(that, column);\r\n                    that.updateColumns(that._dataSource)\r\n                },\r\n                deleteColumn: function(id) {\r\n                    var that = this;\r\n                    var column = that.columnOption(id);\r\n                    if (column && column.index >= 0) {\r\n                        convertOwnerBandToColumnReference(that._columns);\r\n                        that._columns.splice(column.index, 1);\r\n                        if (column.isBand) {\r\n                            var childIndexes = that.getChildrenByBandColumn(column.index).map(function(column) {\r\n                                return column.index\r\n                            });\r\n                            that._columns = that._columns.filter(function(column) {\r\n                                return childIndexes.indexOf(column.index) < 0\r\n                            })\r\n                        }\r\n                        updateIndexes(that);\r\n                        that.updateColumns(that._dataSource)\r\n                    }\r\n                },\r\n                addCommandColumn: function(options) {\r\n                    var commandColumn = this._commandColumns.filter(function(column) {\r\n                        return column.command === options.command\r\n                    })[0];\r\n                    if (!commandColumn) {\r\n                        commandColumn = options;\r\n                        this._commandColumns.push(commandColumn)\r\n                    }\r\n                },\r\n                getUserState: function() {\r\n                    var columns = this._columns;\r\n                    var result = [];\r\n                    var i;\r\n\r\n                    function handleStateField(index, value) {\r\n                        if (void 0 !== columns[i][value]) {\r\n                            result[i][value] = columns[i][value]\r\n                        }\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        result[i] = {};\r\n                        _iterator2.default.each(USER_STATE_FIELD_NAMES, handleStateField)\r\n                    }\r\n                    return result\r\n                },\r\n                setUserState: function(state) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var ignoreColumnOptionNames = that.option(\"stateStoring.ignoreColumnOptionNames\");\r\n                    if (!ignoreColumnOptionNames) {\r\n                        ignoreColumnOptionNames = [];\r\n                        var commonColumnSettings = that.getCommonSettings();\r\n                        if (!that.option(\"columnChooser.enabled\")) {\r\n                            ignoreColumnOptionNames.push(\"visible\")\r\n                        }\r\n                        if (\"none\" === that.option(\"sorting.mode\")) {\r\n                            ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\")\r\n                        }\r\n                        if (!commonColumnSettings.allowGrouping) {\r\n                            ignoreColumnOptionNames.push(\"groupIndex\")\r\n                        }\r\n                        if (!commonColumnSettings.allowFixing) {\r\n                            ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\")\r\n                        }\r\n                        if (!commonColumnSettings.allowResizing) {\r\n                            ignoreColumnOptionNames.push(\"width\", \"visibleWidth\")\r\n                        }\r\n                        var isFilterPanelHidden = !that.option(\"filterPanel.visible\");\r\n                        if (!that.option(\"filterRow.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\")\r\n                        }\r\n                        if (!that.option(\"headerFilter.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValues\", \"filterType\")\r\n                        }\r\n                    }\r\n                    that._columnsUserState = state;\r\n                    that._ignoreColumnOptionNames = ignoreColumnOptionNames;\r\n                    that._hasUserState = !!state;\r\n                    updateColumnChanges(that, \"filtering\");\r\n                    that.init();\r\n                    if (dataSource) {\r\n                        dataSource.sort(that.getSortDataSourceParameters());\r\n                        dataSource.group(that.getGroupDataSourceParameters())\r\n                    }\r\n                },\r\n                _createCalculatedColumnOptions: function(columnOptions, bandColumn) {\r\n                    var calculatedColumnOptions = {};\r\n                    var dataField = columnOptions.dataField;\r\n                    if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\r\n                        calculatedColumnOptions.isBand = true;\r\n                        dataField = null\r\n                    }\r\n                    if (dataField) {\r\n                        if ((0, _type.isString)(dataField)) {\r\n                            var getter = _data2.default.compileGetter(dataField);\r\n                            calculatedColumnOptions = {\r\n                                caption: _inflector2.default.captionize(dataField),\r\n                                calculateCellValue: function(data, skipDeserialization) {\r\n                                    var value = getter(data);\r\n                                    return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                                },\r\n                                setCellValue: defaultSetCellValue,\r\n                                parseValue: function(text) {\r\n                                    var column = this;\r\n                                    var result;\r\n                                    var parsedValue;\r\n                                    if (\"number\" === column.dataType) {\r\n                                        if ((0, _type.isString)(text) && column.format) {\r\n                                            parsedValue = _number2.default.parse(text);\r\n                                            if ((0, _type.isNumeric)(parsedValue)) {\r\n                                                result = parsedValue\r\n                                            }\r\n                                        } else {\r\n                                            if ((0, _type.isDefined)(text) && (0, _type.isNumeric)(text)) {\r\n                                                result = Number(text)\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (\"boolean\" === column.dataType) {\r\n                                            if (text === column.trueText) {\r\n                                                result = true\r\n                                            } else {\r\n                                                if (text === column.falseText) {\r\n                                                    result = false\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            if ((0, _uiGrid_core3.isDateType)(column.dataType)) {\r\n                                                parsedValue = _date2.default.parse(text, column.format);\r\n                                                if (parsedValue) {\r\n                                                    result = parsedValue\r\n                                                }\r\n                                            } else {\r\n                                                result = text\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    return result\r\n                                }\r\n                            }\r\n                        }\r\n                        calculatedColumnOptions.allowFiltering = true\r\n                    } else {\r\n                        calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression\r\n                    }\r\n                    calculatedColumnOptions.calculateFilterExpression = function() {\r\n                        return _filtering2.default.defaultCalculateFilterExpression.apply(this, arguments)\r\n                    };\r\n                    calculatedColumnOptions.createFilterExpression = function(filterValue) {\r\n                        var result;\r\n                        if (this.calculateFilterExpression) {\r\n                            result = this.calculateFilterExpression.apply(this, arguments)\r\n                        }\r\n                        if ((0, _type.isFunction)(result)) {\r\n                            result = [result, \"=\", true]\r\n                        }\r\n                        if (result) {\r\n                            result.columnIndex = this.index;\r\n                            result.filterValue = filterValue\r\n                        }\r\n                        return result\r\n                    };\r\n                    if (!dataField || !(0, _type.isString)(dataField)) {\r\n                        (0, _extend.extend)(true, calculatedColumnOptions, {\r\n                            allowSorting: false,\r\n                            allowGrouping: false,\r\n                            calculateCellValue: function() {\r\n                                return null\r\n                            }\r\n                        })\r\n                    }\r\n                    if (bandColumn) {\r\n                        calculatedColumnOptions.allowFixing = false\r\n                    }\r\n                    if (columnOptions.dataType) {\r\n                        calculatedColumnOptions.userDataType = columnOptions.dataType\r\n                    }\r\n                    if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\r\n                        calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation\r\n                    }\r\n                    if (columnOptions.lookup) {\r\n                        calculatedColumnOptions.lookup = {\r\n                            calculateCellValue: function(value, skipDeserialization) {\r\n                                if (this.valueExpr) {\r\n                                    value = this.valueMap && this.valueMap[value]\r\n                                }\r\n                                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                            },\r\n                            updateValueMap: function() {\r\n                                this.valueMap = {};\r\n                                if (this.items) {\r\n                                    var calculateValue = _data2.default.compileGetter(this.valueExpr);\r\n                                    var calculateDisplayValue = _data2.default.compileGetter(this.displayExpr);\r\n                                    for (var i = 0; i < this.items.length; i++) {\r\n                                        var item = this.items[i];\r\n                                        var displayValue = calculateDisplayValue(item);\r\n                                        this.valueMap[calculateValue(item)] = displayValue;\r\n                                        this.dataType = this.dataType || getValueDataType(displayValue)\r\n                                    }\r\n                                }\r\n                            },\r\n                            update: function() {\r\n                                var that = this;\r\n                                var dataSource = that.dataSource;\r\n                                if (dataSource) {\r\n                                    if ((0, _type.isFunction)(dataSource) && !(0, _variable_wrapper.isWrapped)(dataSource)) {\r\n                                        dataSource = dataSource({})\r\n                                    }\r\n                                    if ((0, _type.isPlainObject)(dataSource) || dataSource instanceof _abstract_store2.default || Array.isArray(dataSource)) {\r\n                                        if (that.valueExpr) {\r\n                                            var dataSourceOptions = (0, _utils.normalizeDataSourceOptions)(dataSource);\r\n                                            dataSourceOptions.paginate = false;\r\n                                            dataSource = new _data_source.DataSource(dataSourceOptions);\r\n                                            return dataSource.load().done(function(data) {\r\n                                                that.items = data;\r\n                                                that.updateValueMap && that.updateValueMap()\r\n                                            })\r\n                                        }\r\n                                    } else {\r\n                                        _ui2.default.log(\"E1016\")\r\n                                    }\r\n                                } else {\r\n                                    that.updateValueMap && that.updateValueMap()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    calculatedColumnOptions.resizedCallbacks = (0, _callbacks2.default)();\r\n                    if (columnOptions.resized) {\r\n                        calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions))\r\n                    }\r\n                    _iterator2.default.each(calculatedColumnOptions, function(optionName) {\r\n                        if ((0, _type.isFunction)(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\r\n                            var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\r\n                            calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName]\r\n                        }\r\n                    });\r\n                    return calculatedColumnOptions\r\n                },\r\n                getRowCount: function() {\r\n                    this._rowCount = this._rowCount || _getRowCount(this);\r\n                    return this._rowCount\r\n                },\r\n                getRowIndex: function(columnIndex, alwaysGetRowIndex) {\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    return column && (alwaysGetRowIndex || column.visible && !(column.command || (0, _type.isDefined)(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0\r\n                },\r\n                getChildrenByBandColumn: function(bandColumnIndex, onlyVisibleDirectChildren) {\r\n                    var that = this;\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\r\n                    if (onlyVisibleDirectChildren) {\r\n                        return result.filter(function(column) {\r\n                            return column.visible && !column.command\r\n                        }).sort(function(column1, column2) {\r\n                            return column1.visibleIndex - column2.visibleIndex\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                isParentBandColumn: function(columnIndex, bandColumnIndex) {\r\n                    var result = false;\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    if (parentBandColumns) {\r\n                        _iterator2.default.each(parentBandColumns, function(_, bandColumn) {\r\n                            if (bandColumn.index === bandColumnIndex) {\r\n                                result = true;\r\n                                return false\r\n                            }\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                isParentColumnVisible: function(columnIndex) {\r\n                    var result = true;\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    bandColumns && _iterator2.default.each(bandColumns, function(_, bandColumn) {\r\n                        result = result && bandColumn.visible;\r\n                        return result\r\n                    });\r\n                    return result\r\n                },\r\n                getColumnId: function(column) {\r\n                    if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                        if (isCustomCommandColumn(this, column)) {\r\n                            return \"type:\" + column.type\r\n                        }\r\n                        return \"command:\" + column.command\r\n                    }\r\n                    return column.index\r\n                },\r\n                getCustomizeTextByDataType: getCustomizeTextByDataType,\r\n                getHeaderContentAlignment: function(columnAlignment) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        return \"left\" === columnAlignment ? \"right\" : \"left\"\r\n                    }\r\n                    return columnAlignment\r\n                }\r\n            }\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}