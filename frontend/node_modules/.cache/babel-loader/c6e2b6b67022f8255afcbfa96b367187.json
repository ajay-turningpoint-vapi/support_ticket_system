{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.filter_sync.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _utils = require(\"../filter_builder/utils\");\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _filtering = require(\"../shared/filtering\");\n\nvar _filtering2 = _interopRequireDefault(_filtering);\n\nvar _uiGrid_core5 = require(\"./ui.grid_core.filter_custom_operations\");\n\nvar _uiGrid_core6 = _interopRequireDefault(_uiGrid_core5);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar FILTER_ROW_OPERATIONS = [\"=\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"notcontains\", \"contains\", \"startswith\", \"endswith\", \"between\"];\nvar FILTER_TYPES_INCLUDE = \"include\";\nvar FILTER_TYPES_EXCLUDE = \"exclude\";\n\nfunction getColumnIdentifier(column) {\n  return column.dataField || column.name;\n}\n\nfunction checkForErrors(columns) {\n  columns.forEach(function (column) {\n    var identifier = getColumnIdentifier(column);\n\n    if (!(0, _type.isDefined)(identifier) && column.allowFiltering) {\n      throw new _ui2.default.Error(\"E1049\", column.caption);\n    }\n  });\n}\n\nvar FilterSyncController = _uiGrid_core2.default.Controller.inherit(function () {\n  var getEmptyFilterValues = function () {\n    return {\n      filterType: FILTER_TYPES_INCLUDE,\n      filterValues: void 0\n    };\n  };\n\n  var canSyncHeaderFilterWithFilterRow = function (column) {\n    return !_filtering2.default.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource);\n  };\n\n  var getHeaderFilterFromCondition = function (headerFilterCondition, column) {\n    if (!headerFilterCondition) {\n      return getEmptyFilterValues();\n    }\n\n    var filterType;\n    var selectedFilterOperation = headerFilterCondition[1];\n    var value = headerFilterCondition[2];\n    var hasArrayValue = Array.isArray(value);\n\n    if (!hasArrayValue) {\n      if (!canSyncHeaderFilterWithFilterRow(column)) {\n        return getEmptyFilterValues();\n      }\n    }\n\n    switch (selectedFilterOperation) {\n      case \"anyof\":\n      case \"=\":\n        filterType = FILTER_TYPES_INCLUDE;\n        break;\n\n      case \"noneof\":\n      case \"<>\":\n        filterType = FILTER_TYPES_EXCLUDE;\n        break;\n\n      default:\n        return getEmptyFilterValues();\n    }\n\n    return {\n      filterType: filterType,\n      filterValues: hasArrayValue ? value : [value]\n    };\n  };\n\n  var getConditionFromFilterRow = function (column) {\n    var value = column.filterValue;\n\n    if ((0, _type.isDefined)(value)) {\n      var operation = column.selectedFilterOperation || column.defaultFilterOperation || _utils2.default.getDefaultOperation(column);\n\n      var filter = [getColumnIdentifier(column), operation, column.filterValue];\n      return filter;\n    } else {\n      return null;\n    }\n  };\n\n  var getConditionFromHeaderFilter = function (column) {\n    var selectedOperation;\n    var value;\n    var filterValues = column.filterValues;\n\n    if (!filterValues) {\n      return null;\n    }\n\n    if (canSyncHeaderFilterWithFilterRow(column) && 1 === column.filterValues.length && !Array.isArray(filterValues[0])) {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"<>\" : selectedOperation = \"=\";\n      value = filterValues[0];\n    } else {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"noneof\" : selectedOperation = \"anyof\";\n      value = filterValues;\n    }\n\n    return [getColumnIdentifier(column), selectedOperation, value];\n  };\n\n  var updateHeaderFilterCondition = function (columnsController, column, headerFilterCondition) {\n    var headerFilter = getHeaderFilterFromCondition(headerFilterCondition, column);\n    columnsController.columnOption(getColumnIdentifier(column), headerFilter);\n  };\n\n  var updateFilterRowCondition = function (columnsController, column, condition) {\n    var filterRowOptions;\n    var selectedFilterOperation = condition && condition[1];\n    var filterOperations = column.filterOperations || column.defaultFilterOperations;\n\n    if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0) {\n      if (selectedFilterOperation === column.defaultFilterOperation && !(0, _type.isDefined)(column.selectedFilterOperation)) {\n        selectedFilterOperation = column.selectedFilterOperation;\n      }\n\n      filterRowOptions = {\n        filterValue: condition[2],\n        selectedFilterOperation: selectedFilterOperation\n      };\n    } else {\n      filterRowOptions = {\n        filterValue: void 0,\n        selectedFilterOperation: void 0\n      };\n    }\n\n    columnsController.columnOption(getColumnIdentifier(column), filterRowOptions);\n  };\n\n  return {\n    syncFilterValue: function () {\n      var that = this;\n      var columnsController = that.getController(\"columns\");\n      var columns = columnsController.getFilteringColumns();\n      this._skipSyncColumnOptions = true;\n      columns.forEach(function (column) {\n        var filterConditions = _utils2.default.getMatchedConditions(that.option(\"filterValue\"), getColumnIdentifier(column));\n\n        if (1 === filterConditions.length) {\n          var filterCondition = filterConditions[0];\n          updateHeaderFilterCondition(columnsController, column, filterCondition);\n          updateFilterRowCondition(columnsController, column, filterCondition);\n        } else {\n          (0, _type.isDefined)(column.filterValues) && updateHeaderFilterCondition(columnsController, column);\n          (0, _type.isDefined)(column.filterValue) && updateFilterRowCondition(columnsController, column);\n        }\n      });\n      this._skipSyncColumnOptions = false;\n    },\n    _initSync: function () {\n      var columns = this.getController(\"columns\").getColumns();\n      var dataController = this.getController(\"data\");\n      var pageIndex = dataController.pageIndex();\n      checkForErrors(columns);\n\n      if (!this.option(\"filterValue\")) {\n        var filteringColumns = this.getController(\"columns\").getFilteringColumns();\n        var filterValue = this.getFilterValueFromColumns(filteringColumns);\n        this.option(\"filterValue\", filterValue);\n      }\n\n      this.syncFilterValue();\n      dataController.pageIndex(pageIndex);\n    },\n    init: function () {\n      var _this = this;\n\n      var dataController = this.getController(\"data\");\n\n      if (dataController.isFilterSyncActive()) {\n        if (this.getController(\"columns\").isAllDataTypesDefined()) {\n          this._initSync();\n        } else {\n          dataController.dataSourceChanged.add(function () {\n            return _this._initSync();\n          });\n        }\n      }\n    },\n    _getSyncFilterRow: function (filterValue, column) {\n      var filter = getConditionFromFilterRow(column);\n\n      if ((0, _type.isDefined)(filter)) {\n        return _utils2.default.syncFilters(filterValue, filter);\n      } else {\n        return _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    _getSyncHeaderFilter: function (filterValue, column) {\n      var filter = getConditionFromHeaderFilter(column);\n\n      if (filter) {\n        return _utils2.default.syncFilters(filterValue, filter);\n      } else {\n        return _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    getFilterValueFromColumns: function (columns) {\n      if (!this.getController(\"data\").isFilterSyncActive()) {\n        return null;\n      }\n\n      var filterValue = [\"and\"];\n      columns && columns.forEach(function (column) {\n        var headerFilter = getConditionFromHeaderFilter(column);\n        var filterRow = getConditionFromFilterRow(column);\n        headerFilter && _utils2.default.addItem(headerFilter, filterValue);\n        filterRow && _utils2.default.addItem(filterRow, filterValue);\n      });\n      return _utils2.default.getNormalizedFilter(filterValue);\n    },\n    syncFilterRow: function (column, value) {\n      this.option(\"filterValue\", this._getSyncFilterRow(this.option(\"filterValue\"), column));\n    },\n    syncHeaderFilter: function (column) {\n      this.option(\"filterValue\", this._getSyncHeaderFilter(this.option(\"filterValue\"), column));\n    },\n    getCustomFilterOperations: function () {\n      var filterBuilderCustomOperations = this.option(\"filterBuilder.customOperations\") || [];\n      return [_uiGrid_core6.default.anyOf(this.component), _uiGrid_core6.default.noneOf(this.component)].concat(filterBuilderCustomOperations);\n    },\n    publicMethods: function () {\n      return [\"getCustomFilterOperations\"];\n    }\n  };\n}());\n\nvar DataControllerFilterSyncExtender = {\n  isFilterSyncActive: function () {\n    var filterSyncEnabledValue = this.option(\"filterSyncEnabled\");\n    return \"auto\" === filterSyncEnabledValue ? this.option(\"filterPanel.visible\") : filterSyncEnabledValue;\n  },\n  skipCalculateColumnFilters: function () {\n    return (0, _type.isDefined)(this.option(\"filterValue\")) && this.isFilterSyncActive();\n  },\n  _calculateAdditionalFilter: function () {\n    var that = this;\n\n    if (false === that.option(\"filterPanel.filterEnabled\")) {\n      return that.callBase();\n    }\n\n    var filters = [that.callBase()];\n    var columns = that.getController(\"columns\").getFilteringColumns();\n    var filterValue = that.option(\"filterValue\");\n\n    if (that.isFilterSyncActive()) {\n      var currentColumn = that.getController(\"headerFilter\").getCurrentColumn();\n\n      if (currentColumn && filterValue) {\n        filterValue = _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn));\n      }\n    }\n\n    var customOperations = that.getController(\"filterSync\").getCustomFilterOperations();\n\n    var calculatedFilterValue = _utils2.default.getFilterExpression(filterValue, columns, customOperations, \"filterBuilder\");\n\n    if (calculatedFilterValue) {\n      filters.push(calculatedFilterValue);\n    }\n\n    return _uiGrid_core4.default.combineFilters(filters);\n  },\n  _parseColumnPropertyName: function (fullName) {\n    var matched = fullName.match(/.*\\.(.*)/);\n    return matched[1];\n  },\n  clearFilter: function (filterName) {\n    this.component.beginUpdate();\n\n    if (arguments.length > 0) {\n      if (\"filterValue\" === filterName) {\n        this.option(\"filterValue\", null);\n      }\n\n      this.callBase(filterName);\n    } else {\n      this.option(\"filterValue\", null);\n      this.callBase();\n    }\n\n    this.component.endUpdate();\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"filterValue\":\n        this._applyFilter();\n\n        this.isFilterSyncActive() && this.getController(\"filterSync\").syncFilterValue();\n        args.handled = true;\n        break;\n\n      case \"filterSyncEnabled\":\n        args.handled = true;\n        break;\n\n      case \"columns\":\n        if (this.isFilterSyncActive()) {\n          var column = this.getController(\"columns\").getColumnByPath(args.fullName);\n          var filterSyncController = this.getController(\"filterSync\");\n\n          if (column && !filterSyncController._skipSyncColumnOptions) {\n            var propertyName = this._parseColumnPropertyName(args.fullName);\n\n            filterSyncController._skipSyncColumnOptions = true;\n\n            if (\"filterType\" === propertyName) {\n              if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {\n                filterSyncController.syncHeaderFilter(column);\n              }\n            } else {\n              if (\"filterValues\" === propertyName) {\n                filterSyncController.syncHeaderFilter(column);\n              } else {\n                if ([\"filterValue\", \"selectedFilterOperation\"].indexOf(propertyName) > -1) {\n                  filterSyncController.syncFilterRow(column, column.filterValue);\n                }\n              }\n            }\n\n            filterSyncController._skipSyncColumnOptions = false;\n          }\n        }\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n};\nvar ColumnHeadersViewFilterSyncExtender = {\n  _isHeaderFilterEmpty: function (column) {\n    if (this.getController(\"data\").isFilterSyncActive()) {\n      return !_utils2.default.filterHasField(this.option(\"filterValue\"), getColumnIdentifier(column));\n    }\n\n    return this.callBase(column);\n  },\n  _needUpdateFilterIndicators: function () {\n    return !this.getController(\"data\").isFilterSyncActive();\n  },\n  optionChanged: function (args) {\n    if (\"filterValue\" === args.name) {\n      this._updateHeaderFilterIndicators();\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      filterValue: null,\n      filterSyncEnabled: \"auto\"\n    };\n  },\n  controllers: {\n    filterSync: FilterSyncController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterSyncExtender\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterSyncExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.filter_sync.js"],"names":["_type","require","_uiGrid_core","_uiGrid_core2","_interopRequireDefault","_utils","_utils2","_ui","_ui2","_uiGrid_core3","_uiGrid_core4","_filtering","_filtering2","_uiGrid_core5","_uiGrid_core6","obj","__esModule","FILTER_ROW_OPERATIONS","FILTER_TYPES_INCLUDE","FILTER_TYPES_EXCLUDE","getColumnIdentifier","column","dataField","name","checkForErrors","columns","forEach","identifier","isDefined","allowFiltering","default","Error","caption","FilterSyncController","Controller","inherit","getEmptyFilterValues","filterType","filterValues","canSyncHeaderFilterWithFilterRow","getGroupInterval","headerFilter","dataSource","getHeaderFilterFromCondition","headerFilterCondition","selectedFilterOperation","value","hasArrayValue","Array","isArray","getConditionFromFilterRow","filterValue","operation","defaultFilterOperation","getDefaultOperation","filter","getConditionFromHeaderFilter","selectedOperation","length","updateHeaderFilterCondition","columnsController","columnOption","updateFilterRowCondition","condition","filterRowOptions","filterOperations","defaultFilterOperations","indexOf","syncFilterValue","that","getController","getFilteringColumns","_skipSyncColumnOptions","filterConditions","getMatchedConditions","option","filterCondition","_initSync","getColumns","dataController","pageIndex","filteringColumns","getFilterValueFromColumns","init","_this","isFilterSyncActive","isAllDataTypesDefined","dataSourceChanged","add","_getSyncFilterRow","syncFilters","removeFieldConditionsFromFilter","_getSyncHeaderFilter","filterRow","addItem","getNormalizedFilter","syncFilterRow","syncHeaderFilter","getCustomFilterOperations","filterBuilderCustomOperations","anyOf","component","noneOf","concat","publicMethods","DataControllerFilterSyncExtender","filterSyncEnabledValue","skipCalculateColumnFilters","_calculateAdditionalFilter","callBase","filters","currentColumn","getCurrentColumn","customOperations","calculatedFilterValue","getFilterExpression","push","combineFilters","_parseColumnPropertyName","fullName","matched","match","clearFilter","filterName","beginUpdate","arguments","endUpdate","optionChanged","args","_applyFilter","handled","getColumnByPath","filterSyncController","propertyName","previousValue","ColumnHeadersViewFilterSyncExtender","_isHeaderFilterEmpty","filterHasField","_needUpdateFilterIndicators","_updateHeaderFilterIndicators","module","exports","defaultOptions","filterSyncEnabled","controllers","filterSync","extenders","data","views","columnHeadersView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.filter_sync.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _utils = require(\"../filter_builder/utils\");\r\nvar _utils2 = _interopRequireDefault(_utils);\r\nvar _ui = require(\"../widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\r\nvar _filtering = require(\"../shared/filtering\");\r\nvar _filtering2 = _interopRequireDefault(_filtering);\r\nvar _uiGrid_core5 = require(\"./ui.grid_core.filter_custom_operations\");\r\nvar _uiGrid_core6 = _interopRequireDefault(_uiGrid_core5);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar FILTER_ROW_OPERATIONS = [\"=\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"notcontains\", \"contains\", \"startswith\", \"endswith\", \"between\"];\r\nvar FILTER_TYPES_INCLUDE = \"include\";\r\nvar FILTER_TYPES_EXCLUDE = \"exclude\";\r\n\r\nfunction getColumnIdentifier(column) {\r\n    return column.dataField || column.name\r\n}\r\n\r\nfunction checkForErrors(columns) {\r\n    columns.forEach(function(column) {\r\n        var identifier = getColumnIdentifier(column);\r\n        if (!(0, _type.isDefined)(identifier) && column.allowFiltering) {\r\n            throw new _ui2.default.Error(\"E1049\", column.caption)\r\n        }\r\n    })\r\n}\r\nvar FilterSyncController = _uiGrid_core2.default.Controller.inherit(function() {\r\n    var getEmptyFilterValues = function() {\r\n        return {\r\n            filterType: FILTER_TYPES_INCLUDE,\r\n            filterValues: void 0\r\n        }\r\n    };\r\n    var canSyncHeaderFilterWithFilterRow = function(column) {\r\n        return !_filtering2.default.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource)\r\n    };\r\n    var getHeaderFilterFromCondition = function(headerFilterCondition, column) {\r\n        if (!headerFilterCondition) {\r\n            return getEmptyFilterValues()\r\n        }\r\n        var filterType;\r\n        var selectedFilterOperation = headerFilterCondition[1];\r\n        var value = headerFilterCondition[2];\r\n        var hasArrayValue = Array.isArray(value);\r\n        if (!hasArrayValue) {\r\n            if (!canSyncHeaderFilterWithFilterRow(column)) {\r\n                return getEmptyFilterValues()\r\n            }\r\n        }\r\n        switch (selectedFilterOperation) {\r\n            case \"anyof\":\r\n            case \"=\":\r\n                filterType = FILTER_TYPES_INCLUDE;\r\n                break;\r\n            case \"noneof\":\r\n            case \"<>\":\r\n                filterType = FILTER_TYPES_EXCLUDE;\r\n                break;\r\n            default:\r\n                return getEmptyFilterValues()\r\n        }\r\n        return {\r\n            filterType: filterType,\r\n            filterValues: hasArrayValue ? value : [value]\r\n        }\r\n    };\r\n    var getConditionFromFilterRow = function(column) {\r\n        var value = column.filterValue;\r\n        if ((0, _type.isDefined)(value)) {\r\n            var operation = column.selectedFilterOperation || column.defaultFilterOperation || _utils2.default.getDefaultOperation(column);\r\n            var filter = [getColumnIdentifier(column), operation, column.filterValue];\r\n            return filter\r\n        } else {\r\n            return null\r\n        }\r\n    };\r\n    var getConditionFromHeaderFilter = function(column) {\r\n        var selectedOperation;\r\n        var value;\r\n        var filterValues = column.filterValues;\r\n        if (!filterValues) {\r\n            return null\r\n        }\r\n        if (canSyncHeaderFilterWithFilterRow(column) && 1 === column.filterValues.length && !Array.isArray(filterValues[0])) {\r\n            column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"<>\" : selectedOperation = \"=\";\r\n            value = filterValues[0]\r\n        } else {\r\n            column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"noneof\" : selectedOperation = \"anyof\";\r\n            value = filterValues\r\n        }\r\n        return [getColumnIdentifier(column), selectedOperation, value]\r\n    };\r\n    var updateHeaderFilterCondition = function(columnsController, column, headerFilterCondition) {\r\n        var headerFilter = getHeaderFilterFromCondition(headerFilterCondition, column);\r\n        columnsController.columnOption(getColumnIdentifier(column), headerFilter)\r\n    };\r\n    var updateFilterRowCondition = function(columnsController, column, condition) {\r\n        var filterRowOptions;\r\n        var selectedFilterOperation = condition && condition[1];\r\n        var filterOperations = column.filterOperations || column.defaultFilterOperations;\r\n        if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0) {\r\n            if (selectedFilterOperation === column.defaultFilterOperation && !(0, _type.isDefined)(column.selectedFilterOperation)) {\r\n                selectedFilterOperation = column.selectedFilterOperation\r\n            }\r\n            filterRowOptions = {\r\n                filterValue: condition[2],\r\n                selectedFilterOperation: selectedFilterOperation\r\n            }\r\n        } else {\r\n            filterRowOptions = {\r\n                filterValue: void 0,\r\n                selectedFilterOperation: void 0\r\n            }\r\n        }\r\n        columnsController.columnOption(getColumnIdentifier(column), filterRowOptions)\r\n    };\r\n    return {\r\n        syncFilterValue: function() {\r\n            var that = this;\r\n            var columnsController = that.getController(\"columns\");\r\n            var columns = columnsController.getFilteringColumns();\r\n            this._skipSyncColumnOptions = true;\r\n            columns.forEach(function(column) {\r\n                var filterConditions = _utils2.default.getMatchedConditions(that.option(\"filterValue\"), getColumnIdentifier(column));\r\n                if (1 === filterConditions.length) {\r\n                    var filterCondition = filterConditions[0];\r\n                    updateHeaderFilterCondition(columnsController, column, filterCondition);\r\n                    updateFilterRowCondition(columnsController, column, filterCondition)\r\n                } else {\r\n                    (0, _type.isDefined)(column.filterValues) && updateHeaderFilterCondition(columnsController, column);\r\n                    (0, _type.isDefined)(column.filterValue) && updateFilterRowCondition(columnsController, column)\r\n                }\r\n            });\r\n            this._skipSyncColumnOptions = false\r\n        },\r\n        _initSync: function() {\r\n            var columns = this.getController(\"columns\").getColumns();\r\n            var dataController = this.getController(\"data\");\r\n            var pageIndex = dataController.pageIndex();\r\n            checkForErrors(columns);\r\n            if (!this.option(\"filterValue\")) {\r\n                var filteringColumns = this.getController(\"columns\").getFilteringColumns();\r\n                var filterValue = this.getFilterValueFromColumns(filteringColumns);\r\n                this.option(\"filterValue\", filterValue)\r\n            }\r\n            this.syncFilterValue();\r\n            dataController.pageIndex(pageIndex)\r\n        },\r\n        init: function() {\r\n            var _this = this;\r\n            var dataController = this.getController(\"data\");\r\n            if (dataController.isFilterSyncActive()) {\r\n                if (this.getController(\"columns\").isAllDataTypesDefined()) {\r\n                    this._initSync()\r\n                } else {\r\n                    dataController.dataSourceChanged.add(function() {\r\n                        return _this._initSync()\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _getSyncFilterRow: function(filterValue, column) {\r\n            var filter = getConditionFromFilterRow(column);\r\n            if ((0, _type.isDefined)(filter)) {\r\n                return _utils2.default.syncFilters(filterValue, filter)\r\n            } else {\r\n                return _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column))\r\n            }\r\n        },\r\n        _getSyncHeaderFilter: function(filterValue, column) {\r\n            var filter = getConditionFromHeaderFilter(column);\r\n            if (filter) {\r\n                return _utils2.default.syncFilters(filterValue, filter)\r\n            } else {\r\n                return _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column))\r\n            }\r\n        },\r\n        getFilterValueFromColumns: function(columns) {\r\n            if (!this.getController(\"data\").isFilterSyncActive()) {\r\n                return null\r\n            }\r\n            var filterValue = [\"and\"];\r\n            columns && columns.forEach(function(column) {\r\n                var headerFilter = getConditionFromHeaderFilter(column);\r\n                var filterRow = getConditionFromFilterRow(column);\r\n                headerFilter && _utils2.default.addItem(headerFilter, filterValue);\r\n                filterRow && _utils2.default.addItem(filterRow, filterValue)\r\n            });\r\n            return _utils2.default.getNormalizedFilter(filterValue)\r\n        },\r\n        syncFilterRow: function(column, value) {\r\n            this.option(\"filterValue\", this._getSyncFilterRow(this.option(\"filterValue\"), column))\r\n        },\r\n        syncHeaderFilter: function(column) {\r\n            this.option(\"filterValue\", this._getSyncHeaderFilter(this.option(\"filterValue\"), column))\r\n        },\r\n        getCustomFilterOperations: function() {\r\n            var filterBuilderCustomOperations = this.option(\"filterBuilder.customOperations\") || [];\r\n            return [_uiGrid_core6.default.anyOf(this.component), _uiGrid_core6.default.noneOf(this.component)].concat(filterBuilderCustomOperations)\r\n        },\r\n        publicMethods: function() {\r\n            return [\"getCustomFilterOperations\"]\r\n        }\r\n    }\r\n}());\r\nvar DataControllerFilterSyncExtender = {\r\n    isFilterSyncActive: function() {\r\n        var filterSyncEnabledValue = this.option(\"filterSyncEnabled\");\r\n        return \"auto\" === filterSyncEnabledValue ? this.option(\"filterPanel.visible\") : filterSyncEnabledValue\r\n    },\r\n    skipCalculateColumnFilters: function() {\r\n        return (0, _type.isDefined)(this.option(\"filterValue\")) && this.isFilterSyncActive()\r\n    },\r\n    _calculateAdditionalFilter: function() {\r\n        var that = this;\r\n        if (false === that.option(\"filterPanel.filterEnabled\")) {\r\n            return that.callBase()\r\n        }\r\n        var filters = [that.callBase()];\r\n        var columns = that.getController(\"columns\").getFilteringColumns();\r\n        var filterValue = that.option(\"filterValue\");\r\n        if (that.isFilterSyncActive()) {\r\n            var currentColumn = that.getController(\"headerFilter\").getCurrentColumn();\r\n            if (currentColumn && filterValue) {\r\n                filterValue = _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn))\r\n            }\r\n        }\r\n        var customOperations = that.getController(\"filterSync\").getCustomFilterOperations();\r\n        var calculatedFilterValue = _utils2.default.getFilterExpression(filterValue, columns, customOperations, \"filterBuilder\");\r\n        if (calculatedFilterValue) {\r\n            filters.push(calculatedFilterValue)\r\n        }\r\n        return _uiGrid_core4.default.combineFilters(filters)\r\n    },\r\n    _parseColumnPropertyName: function(fullName) {\r\n        var matched = fullName.match(/.*\\.(.*)/);\r\n        return matched[1]\r\n    },\r\n    clearFilter: function(filterName) {\r\n        this.component.beginUpdate();\r\n        if (arguments.length > 0) {\r\n            if (\"filterValue\" === filterName) {\r\n                this.option(\"filterValue\", null)\r\n            }\r\n            this.callBase(filterName)\r\n        } else {\r\n            this.option(\"filterValue\", null);\r\n            this.callBase()\r\n        }\r\n        this.component.endUpdate()\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"filterValue\":\r\n                this._applyFilter();\r\n                this.isFilterSyncActive() && this.getController(\"filterSync\").syncFilterValue();\r\n                args.handled = true;\r\n                break;\r\n            case \"filterSyncEnabled\":\r\n                args.handled = true;\r\n                break;\r\n            case \"columns\":\r\n                if (this.isFilterSyncActive()) {\r\n                    var column = this.getController(\"columns\").getColumnByPath(args.fullName);\r\n                    var filterSyncController = this.getController(\"filterSync\");\r\n                    if (column && !filterSyncController._skipSyncColumnOptions) {\r\n                        var propertyName = this._parseColumnPropertyName(args.fullName);\r\n                        filterSyncController._skipSyncColumnOptions = true;\r\n                        if (\"filterType\" === propertyName) {\r\n                            if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {\r\n                                filterSyncController.syncHeaderFilter(column)\r\n                            }\r\n                        } else {\r\n                            if (\"filterValues\" === propertyName) {\r\n                                filterSyncController.syncHeaderFilter(column)\r\n                            } else {\r\n                                if ([\"filterValue\", \"selectedFilterOperation\"].indexOf(propertyName) > -1) {\r\n                                    filterSyncController.syncFilterRow(column, column.filterValue)\r\n                                }\r\n                            }\r\n                        }\r\n                        filterSyncController._skipSyncColumnOptions = false\r\n                    }\r\n                }\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n};\r\nvar ColumnHeadersViewFilterSyncExtender = {\r\n    _isHeaderFilterEmpty: function(column) {\r\n        if (this.getController(\"data\").isFilterSyncActive()) {\r\n            return !_utils2.default.filterHasField(this.option(\"filterValue\"), getColumnIdentifier(column))\r\n        }\r\n        return this.callBase(column)\r\n    },\r\n    _needUpdateFilterIndicators: function() {\r\n        return !this.getController(\"data\").isFilterSyncActive()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"filterValue\" === args.name) {\r\n            this._updateHeaderFilterIndicators()\r\n        } else {\r\n            this.callBase(args)\r\n        }\r\n    }\r\n};\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            filterValue: null,\r\n            filterSyncEnabled: \"auto\"\r\n        }\r\n    },\r\n    controllers: {\r\n        filterSync: FilterSyncController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: DataControllerFilterSyncExtender\r\n        },\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewFilterSyncExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}