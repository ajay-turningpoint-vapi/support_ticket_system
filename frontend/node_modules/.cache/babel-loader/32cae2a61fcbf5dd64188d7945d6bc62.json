{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _utils = require(\"../../events/utils\");\n\nvar eventUtils = _interopRequireWildcard(_utils);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _form = require(\"../form\");\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _themes = require(\"../themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nvar ROWS_VIEW = \"rowsView\";\nvar FOOTER_VIEW = \"footerView\";\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\n\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\n\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\n\nfunction adaptiveCellTemplate(container, options) {\n  var $adaptiveColumnButton;\n  var $container = (0, _renderer2.default)(container);\n  var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = (0, _renderer2.default)(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\n\n    _events_engine2.default.on($adaptiveColumnButton, eventUtils.addNamespace(_click2.default.name, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function () {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    _uiGrid_core4.default.setEmptyText($container);\n  }\n}\n\nvar AdaptiveColumnsController = _uiGrid_core2.default.ViewController.inherit({\n  _isRowEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_ROW;\n  },\n  _isItemModified: function (item, cellOptions) {\n    var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n    var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n\n    var row = this._dataController.items()[rowIndex + 1];\n\n    return row && row.modifiedValues && _type2.default.isDefined(row.modifiedValues[columnIndex]);\n  },\n  _renderFormViewTemplate: function (item, cellOptions, $container) {\n    var that = this;\n    var column = item.column;\n    var focusAction = that.createAction(function () {\n      _events_engine2.default.trigger($container, _click2.default.name);\n    });\n    var value = column.calculateCellValue(cellOptions.data);\n\n    var displayValue = _uiGrid_core4.default.getDisplayValue(column, value, cellOptions.data, cellOptions.rowType);\n\n    var text = _uiGrid_core4.default.formatValue(displayValue, column);\n\n    var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n\n    var rowsView = that._rowsView;\n\n    if (column.allowEditing && that.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\n\n      if (isCellOrBatchEditMode) {\n        _events_engine2.default.off($container, \"focus\", focusAction);\n\n        _events_engine2.default.on($container, \"focus\", focusAction);\n      }\n    }\n\n    if (column.cellTemplate) {\n      var templateOptions = (0, _extend.extend)({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      var isDomElement = !!$container.closest((0, _window.getWindow)().document).length;\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(function () {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      var container = $container.get(0);\n\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n\n      $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\n\n      if (!_type2.default.isDefined(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n\n      if (!that._isRowEditMode()) {\n        if (that._isItemModified(item, cellOptions)) {\n          $container.addClass(FORM_ITEM_MODIFIED);\n        }\n      }\n\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  },\n  _getTemplate: function (item, cellOptions) {\n    var that = this;\n    var column = item.column;\n    var editingController = this.getController(\"editing\");\n    return function (options, container) {\n      var $container = (0, _renderer2.default)(container);\n\n      var columnIndex = that._columnsController.getVisibleIndex(column.visibleIndex);\n\n      var templateOptions = (0, _extend.extend)({}, cellOptions);\n\n      var renderFormTemplate = function () {\n        var isItemEdited = that._isItemEdited(item);\n\n        templateOptions.value = cellOptions.row.values[columnIndex];\n\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditTemplate(templateOptions, item, options.component, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n\n      renderFormTemplate();\n      templateOptions.watch && templateOptions.watch(function () {\n        return {\n          isItemEdited: that._isItemEdited(item),\n          value: cellOptions.row.values[columnIndex]\n        };\n      }, function () {\n        $container.contents().remove();\n        $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\n        renderFormTemplate();\n      });\n    };\n  },\n  _isVisibleColumnsValid: function (visibleColumns) {\n    var getCommandColumnsCount = function () {\n      var result = 0;\n\n      for (var j = 0; j < visibleColumns.length; j++) {\n        var visibleColumn = visibleColumns[j];\n\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n\n      return result;\n    };\n\n    if (visibleColumns < 2) {\n      return false;\n    }\n\n    if (visibleColumns.length - getCommandColumnsCount() <= 1) {\n      return false;\n    }\n\n    return true;\n  },\n  _calculatePercentWidths: function (widths, visibleColumns) {\n    var that = this;\n    var percentWidths = 0;\n    visibleColumns.forEach(function (item, index) {\n      if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  },\n  _isPercentWidth: function (width) {\n    return _type2.default.isString(width) && \"%\" === width.slice(-1);\n  },\n  _isColumnHidden: function (column) {\n    return this._hiddenColumns.filter(function (hiddenColumn) {\n      return hiddenColumn.index === column.index;\n    }).length > 0;\n  },\n  _getAverageColumnsWidth: function (containerWidth, columns, columnsCanFit) {\n    var that = this;\n    var fixedColumnsWidth = 0;\n    var columnsWithoutFixedWidthCount = 0;\n    columns.forEach(function (column) {\n      if (!that._isColumnHidden(column)) {\n        var width = column.width;\n\n        if (_type2.default.isDefined(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  },\n  _calculateColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    var columnsCount = contentColumns.length;\n    var colWidth;\n\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return widthOption;\n      }\n    } else {\n      var columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n\n    return colWidth;\n  },\n  _calculatePercentWidth: function (options) {\n    var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  },\n  _getNotTruncatedColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n\n    var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n\n    return colWidth < bestFitWidth ? null : colWidth;\n  },\n  _getItemPercentWidth: function (item) {\n    var result = 0;\n\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n\n    return result;\n  },\n  _getCommandColumnsWidth: function () {\n    var that = this;\n\n    var columns = that._columnsController.getVisibleColumns();\n\n    var colWidth = 0;\n    (0, _iterator.each)(columns, function (index, column) {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  },\n  _isItemEdited: function (item) {\n    if (this.isFormEditMode()) {\n      return false;\n    }\n\n    if (this._isRowEditMode()) {\n      var editRowKey = this._editingController.getEditRowKey();\n\n      if ((0, _common.equalByValue)(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n\n      var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n  },\n  _getFormItemsByHiddenColumns: function (hiddenColumns) {\n    var items = [];\n    (0, _iterator.each)(hiddenColumns, function (_, column) {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  },\n  _getAdaptiveColumnVisibleIndex: function (visibleColumns) {\n    for (var i = 0; i < visibleColumns.length; i++) {\n      var column = visibleColumns[i];\n\n      if (column.command === ADAPTIVE_COLUMN_NAME) {\n        return i;\n      }\n    }\n  },\n  _hideAdaptiveColumn: function (resultWidths, visibleColumns) {\n    var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n\n    if (_type2.default.isDefined(visibleIndex)) {\n      resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  },\n  _showHiddenCellsInView: function (_ref) {\n    var $cells = _ref.$cells,\n        isCommandColumn = _ref.isCommandColumn;\n    var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cells.removeClass(cssClassNameToRemove);\n  },\n  _showHiddenColumns: function () {\n    for (var i = 0; i < COLUMN_VIEWS.length; i++) {\n      var view = this.getView(COLUMN_VIEWS[i]);\n\n      if (view && view.isVisible() && view.element()) {\n        var viewName = view.name;\n        var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n\n        var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  },\n  _isCellValid: function ($cell) {\n    return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS);\n  },\n  _hideVisibleColumn: function (_ref2) {\n    var isCommandColumn = _ref2.isCommandColumn,\n        visibleIndex = _ref2.visibleIndex;\n    var that = this;\n    COLUMN_VIEWS.forEach(function (viewName) {\n      var view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  },\n  _hideVisibleColumnInView: function (_ref3) {\n    var view = _ref3.view,\n        isCommandColumn = _ref3.isCommandColumn,\n        visibleIndex = _ref3.visibleIndex;\n    var viewName = view.name;\n    var $cellElement;\n\n    var column = this._columnsController.getVisibleColumns()[visibleIndex];\n\n    var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n\n    if (view && view.isVisible() && column) {\n      var rowsCount = view.getRowsCount();\n\n      var $rowElements = view._getRowElements();\n\n      for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n\n        if (!cancelClassAdding) {\n          var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n\n          if (currentVisibleIndex >= 0) {\n            var $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  },\n  _findCellElementInRow: function ($rowElement, visibleColumnIndex) {\n    var $rowCells = $rowElement.children();\n    var visibleIndex = visibleColumnIndex;\n    var cellIsInsideGroup = false;\n\n    if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\n      var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\n      var colSpan = $groupCell.attr(\"colspan\");\n\n      if ($groupCell.length && _type2.default.isDefined(colSpan)) {\n        var groupCellLength = parseInt(colSpan);\n        var endGroupIndex = $groupCell.index() + groupCellLength - 1;\n\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n\n    var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  },\n  _hideVisibleCellInView: function (_ref4) {\n    var $cell = _ref4.$cell,\n        isCommandColumn = _ref4.isCommandColumn;\n    var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cell.addClass(cssClassNameToAdd);\n  },\n  _getEditMode: function () {\n    return this._editingController.getEditMode();\n  },\n  isFormEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP;\n  },\n  hideRedundantColumns: function (resultWidths, visibleColumns, hiddenQueue) {\n    var that = this;\n    this._hiddenColumns = [];\n\n    if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      var totalWidth = 0;\n      var $rootElement = that.component.$element();\n\n      var rootElementWidth = $rootElement.width() - that._getCommandColumnsWidth();\n\n      var getVisibleContentColumns = function () {\n        var _this = this;\n\n        return visibleColumns.filter(function (item) {\n          return !item.command && 0 === _this._hiddenColumns.filter(function (i) {\n            return i.index === item.index;\n          }).length;\n        });\n      }.bind(this);\n\n      var visibleContentColumns = getVisibleContentColumns();\n      var contentColumnsCount = visibleContentColumns.length;\n      var i;\n      var hasHiddenColumns;\n      var needHideColumn;\n\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n\n        var percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\n\n        var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n\n        for (i = 0; i < visibleColumns.length; i++) {\n          var visibleColumn = visibleColumns[i];\n\n          var columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          var columnId = getColumnId(that, visibleColumn);\n\n          var widthOption = that._columnsController.columnOption(columnId, \"width\");\n\n          var minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\n\n          var columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n          if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\n            hasHiddenColumns = true;\n            continue;\n          }\n\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n\n          if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n\n        needHideColumn = needHideColumn || totalWidth > $rootElement.width();\n\n        if (needHideColumn) {\n          var column = hiddenQueue.pop();\n\n          var visibleIndex = that._columnsController.getVisibleIndex(column.index);\n\n          rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          that._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n\n          resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n          this._hiddenColumns.push(column);\n\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n\n      if (contentColumnsCount === visibleContentColumns.length) {\n        that._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      that._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  },\n  getItemContentByColumnIndex: function (visibleColumnIndex) {\n    var $itemContent;\n\n    for (var i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      var item = $itemContent.data(\"dx-form-item\");\n\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  },\n  toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n    if (!(this.isFormEditMode() && this._editingController.isEditing())) {\n      this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  },\n  createFormByHiddenColumns: function (container, options) {\n    var that = this;\n    var $container = (0, _renderer2.default)(container);\n    var userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: \"dx-\" + new _guid2.default()\n    };\n    var defaultFormOptions = _themes2.default.isMaterial() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($container), _form2.default, (0, _extend.extend)(defaultFormOptions, userFormOptions, {\n      customizeItem: function (item) {\n        var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady: function (e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS);\n      }\n    }));\n  },\n  hasAdaptiveDetailRowExpanded: function () {\n    return _type2.default.isDefined(this._dataController.adaptiveExpandedKey());\n  },\n  updateForm: function (hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && _type2.default.isDefined(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  },\n  updateHidingQueue: function (columns) {\n    var that = this;\n    var hideableColumns = columns.filter(function (column) {\n      return column.visible && !column.type && !column.fixed && !(_type2.default.isDefined(column.groupIndex) && column.groupIndex >= 0);\n    });\n    var columnsHasHidingPriority;\n    var i;\n    that._hidingColumnsQueue = [];\n\n    if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\n      return that._hidingColumnsQueue;\n    }\n\n    for (i = 0; i < hideableColumns.length; i++) {\n      if (_type2.default.isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n\n    if (columnsHasHidingPriority) {\n      that._hidingColumnsQueue.reverse();\n    } else {\n      if (that.option(\"columnHidingEnabled\")) {\n        for (i = 0; i < hideableColumns.length; i++) {\n          var visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\n\n          that._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n        }\n      }\n    }\n\n    that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\n    return that._hidingColumnsQueue;\n  },\n  getHiddenColumns: function () {\n    return this._hiddenColumns;\n  },\n  hasHiddenColumns: function () {\n    return this._hiddenColumns.length > 0;\n  },\n  getHidingColumnsQueue: function () {\n    return this._hidingColumnsQueue;\n  },\n  init: function () {\n    var that = this;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._rowsView = that.getView(\"rowsView\");\n\n    that._columnsController.addCommandColumn({\n      type: ADAPTIVE_COLUMN_NAME,\n      command: ADAPTIVE_COLUMN_NAME,\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n\n    that._columnsController.columnsChanged.add(function () {\n      var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\n\n      that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n\n    that._editingController = that.getController(\"editing\");\n    that._hidingColumnsQueue = [];\n    that._hiddenColumns = [];\n    that.createAction(\"onAdaptiveDetailRowPreparing\");\n    that.callBase();\n  },\n  optionChanged: function (args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n\n    this.callBase(args);\n  },\n  publicMethods: function () {\n    return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"];\n  },\n  isAdaptiveDetailRowExpanded: function (key) {\n    return this._dataController.adaptiveExpandedKey() && (0, _common.equalByValue)(this._dataController.adaptiveExpandedKey(), key);\n  },\n  expandAdaptiveDetailRow: function (key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  },\n  collapseAdaptiveDetailRow: function () {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  }\n});\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      columnHidingEnabled: false,\n      onAdaptiveDetailRowPreparing: null\n    };\n  },\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _getCellTemplate: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\n            return function (container, options) {\n              that._adaptiveColumnsController.createFormByHiddenColumns((0, _renderer2.default)(container), options);\n            };\n          }\n\n          return that.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\n            $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS);\n          }\n\n          return $row;\n        },\n        _renderCells: function ($row, options) {\n          this.callBase($row, options);\n\n          var hidingColumnsQueueLength = this._adaptiveColumnsController.getHidingColumnsQueue().length;\n\n          var hiddenColumnsLength = this._adaptiveColumnsController.getHiddenColumns().length;\n\n          if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n            getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS);\n          }\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n\n          if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n            var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          } else {\n            return this.callBase($element);\n          }\n        },\n        _cellPrepared: function ($cell, options) {\n          this.callBase.apply(this, arguments);\n\n          if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n          }\n        },\n        _getCellElement: function (rowIndex, columnIdentifier) {\n          var item = this._dataController.items()[rowIndex];\n\n          if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n          } else {\n            return this.callBase(rowIndex, columnIdentifier);\n          }\n        },\n        getContextMenuItems: function (options) {\n          if (options.row && \"detailAdaptive\" === options.row.rowType) {\n            var view = this.component.getView(\"columnHeadersView\");\n            var formItem = (0, _renderer2.default)(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n            options.column = formItem ? formItem.column : options.column;\n            return view.getContextMenuItems && view.getContextMenuItems(options);\n          }\n\n          return this.callBase && this.callBase(options);\n        },\n        isClickableElement: function ($target) {\n          var isClickable = this.callBase ? this.callBase($target) : false;\n          return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    },\n    controllers: {\n      \"export\": {\n        _updateColumnWidth: function (column, width) {\n          this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width);\n        }\n      },\n      columnsResizer: {\n        _pointCreated: function (point, cellsLength, columns) {\n          var result = this.callBase(point, cellsLength, columns);\n          var currentColumn = columns[point.columnIndex] || {};\n\n          var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n\n          var nextColumn = columns[nextColumnIndex] || {};\n          var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n          var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\n          return result || hasAdaptiveHiddenWidth;\n        },\n        _getNextColumnIndex: function (currentColumnIndex) {\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var index = this.callBase(currentColumnIndex);\n\n          while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            index++;\n          }\n\n          return index;\n        }\n      },\n      draggingHeader: {\n        _pointCreated: function (point, columns, location, sourceColumn) {\n          var result = this.callBase(point, columns, location, sourceColumn);\n          var column = columns[point.columnIndex - 1] || {};\n          var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\n          return result || hasAdaptiveHiddenWidth;\n        }\n      },\n      editing: {\n        _isRowEditMode: function () {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _getFormEditItemTemplate: function (cellOptions, column) {\n          if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n            return this.getColumnTemplate(cellOptions);\n          }\n\n          return this.callBase(cellOptions, column);\n        },\n        _closeEditItem: function ($targetElement) {\n          var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n          var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n          var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n\n          var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n\n          if (!this.isEditCell(rowIndex, columnIndex)) {\n            this.callBase($targetElement);\n          }\n        },\n        _beforeUpdateItems: function (rowIndices, rowIndex) {\n          if (!this._adaptiveController.isFormEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            var items = this._dataController.items();\n\n            var item = items[rowIndex];\n\n            var oldExpandRowIndex = _uiGrid_core4.default.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n\n            this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\n\n            if (oldExpandRowIndex >= 0 && rowIndex > oldExpandRowIndex) {\n              this._editRowIndex--;\n            }\n\n            if (oldExpandRowIndex >= 0) {\n              rowIndices.push(oldExpandRowIndex + 1);\n            }\n\n            rowIndices.push(rowIndex + 1);\n\n            this._dataController.adaptiveExpandedKey(item.key);\n          }\n        },\n        _afterInsertRow: function (options) {\n          this.callBase(options);\n\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._adaptiveController.toggleExpandAdaptiveDetailRow(options.key, this.isRowEditMode());\n\n            this._isForceRowAdaptiveExpand = true;\n          }\n        },\n        _collapseAdaptiveDetailRow: function () {\n          if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n\n            this._isForceRowAdaptiveExpand = false;\n          }\n        },\n        _cancelEditAdaptiveDetailRow: function () {\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._collapseAdaptiveDetailRow();\n          }\n        },\n        _afterSaveEditData: function () {\n          var _this2 = this;\n\n          this.callBase.apply(this, arguments);\n          var deferred = new _deferred.Deferred();\n\n          if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            (0, _deferred.when)(this.getController(\"validating\").validate(true)).done(function (isValid) {\n              if (isValid) {\n                _this2._cancelEditAdaptiveDetailRow();\n              }\n\n              deferred.resolve();\n            });\n          } else {\n            deferred.resolve();\n          }\n\n          return deferred.promise();\n        },\n        _beforeCancelEditData: function () {\n          this.callBase();\n\n          this._cancelEditAdaptiveDetailRow();\n        },\n        _getRowIndicesForCascadeUpdating: function (row) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\n            rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        _beforeCloseEditCellInBatchMode: function (rowIndices) {\n          var expandedKey = this._dataController._adaptiveExpandedKey;\n\n          if (expandedKey) {\n            var rowIndex = _uiGrid_core4.default.getIndexByKey(expandedKey, this._dataController.items());\n\n            if (rowIndex > -1) {\n              rowIndices.unshift(rowIndex);\n            }\n          }\n        },\n        editRow: function (rowIndex) {\n          if (this._adaptiveController.isFormEditMode()) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        deleteRow: function (rowIndex) {\n          var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      },\n      resizing: {\n        _needBestFit: function () {\n          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n        },\n        _updateScrollableForIE: function () {\n          var that = this;\n\n          if (_browser2.default.msie && parseInt(_browser2.default.version) <= 11) {\n            this._updateScrollableTimeoutID = setTimeout(function () {\n              that.getView(\"rowsView\")._updateScrollable();\n            });\n          }\n        },\n        _correctColumnWidths: function (resultWidths, visibleColumns) {\n          var adaptiveController = this._adaptiveColumnsController;\n          var columnAutoWidth = this.option(\"columnAutoWidth\");\n          var oldHiddenColumns = adaptiveController.getHiddenColumns();\n          var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n          var hiddenColumns = adaptiveController.getHiddenColumns();\n\n          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\n              adaptiveController.updateForm(hiddenColumns);\n            }\n          }\n\n          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n\n          if (columnAutoWidth && hidingColumnsQueue.length && !hiddenColumns.length) {\n            this._updateScrollableForIE();\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _toggleBestFitMode: function (isBestFit) {\n          isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n          this.callBase(isBestFit);\n        },\n        _needStretch: function () {\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n        },\n        init: function () {\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          this.callBase();\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._updateScrollableTimeoutID);\n        }\n      },\n      data: {\n        _processItems: function (items, change) {\n          var that = this;\n          var changeType = change.changeType;\n          items = that.callBase.apply(that, arguments);\n\n          if (\"loadingAll\" === changeType || !_type2.default.isDefined(that._adaptiveExpandedKey)) {\n            return items;\n          }\n\n          var expandRowIndex = _uiGrid_core4.default.getIndexByKey(that._adaptiveExpandedKey, items);\n\n          if (expandRowIndex >= 0) {\n            var item = items[expandRowIndex];\n            items.splice(expandRowIndex + 1, 0, {\n              visible: true,\n              rowType: ADAPTIVE_ROW_TYPE,\n              key: item.key,\n              data: item.data,\n              node: item.node,\n              modifiedValues: item.modifiedValues,\n              isNewRow: item.isNewRow,\n              values: item.values\n            });\n          } else {\n            if (\"refresh\" === changeType) {\n              that._adaptiveExpandedKey = void 0;\n            }\n          }\n\n          return items;\n        },\n        _getRowIndicesForExpand: function (key) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\n            var lastRowIndex = rowIndices[rowIndices.length - 1];\n            rowIndices.push(lastRowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        adaptiveExpandedKey: function (value) {\n          if (_type2.default.isDefined(value)) {\n            this._adaptiveExpandedKey = value;\n          } else {\n            return this._adaptiveExpandedKey;\n          }\n        },\n        toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n          var that = this;\n\n          var oldExpandLoadedRowIndex = _uiGrid_core4.default.getIndexByKey(that._adaptiveExpandedKey, that._items);\n\n          var newExpandLoadedRowIndex = _uiGrid_core4.default.getIndexByKey(key, that._items);\n\n          if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n            key = void 0;\n            newExpandLoadedRowIndex = -1;\n          }\n\n          that._adaptiveExpandedKey = key;\n\n          if (oldExpandLoadedRowIndex >= 0) {\n            oldExpandLoadedRowIndex++;\n          }\n\n          if (newExpandLoadedRowIndex >= 0) {\n            newExpandLoadedRowIndex++;\n          }\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          that.updateItems({\n            allowInvisibleRowIndices: true,\n            changeType: \"update\",\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n          });\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveExpandedKey = void 0;\n        }\n      },\n      editorFactory: {\n        _getFocusCellSelector: function () {\n          return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\";\n        },\n        _getTooltipsSelector: function () {\n          return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n        }\n      },\n      columns: {\n        _isColumnVisible: function (column) {\n          return this.callBase(column) && !column.adaptiveHidden;\n        }\n      },\n      keyboardNavigation: {\n        _isCellValid: function ($cell) {\n          return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n        },\n        _processNextCellInMasterDetail: function ($nextCell) {\n          this.callBase($nextCell);\n\n          var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n\n          if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\n            var focusHandler = function focusHandler() {\n              _events_engine2.default.off($nextCell, \"focus\", focusHandler);\n\n              _events_engine2.default.trigger($nextCell, \"dxclick\");\n            };\n\n            _events_engine2.default.on($nextCell, \"focus\", focusHandler);\n          }\n        },\n        _handleTabKeyOnMasterDetailCell: function (eventTarget, direction) {\n          var result = this.callBase(eventTarget, direction);\n\n          var $currentCell = this._getFocusedCell();\n\n          var $row = $currentCell && $currentCell.parent();\n\n          if (!result && $row && $row.length) {\n            var $dataCells = getDataCellElements($row);\n            var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\n            var rowIndex = $row.get(0).rowIndex;\n            var adaptiveController = this._adaptiveController;\n\n            var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\n\n            var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\n            return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals;\n          }\n\n          return result;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.adaptivity.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_renderer","require","_renderer2","_interopRequireDefault","_events_engine","_events_engine2","_utils","eventUtils","_interopRequireWildcard","_click","_click2","_type","_type2","_browser","_browser2","_guid","_guid2","_uiGrid_core","_uiGrid_core2","_form","_form2","_uiGrid_core3","_uiGrid_core4","_themes","_themes2","_window","_common","_iterator","_extend","_deferred","_getRequireWildcardCache","WeakMap","cache","__esModule","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","default","COLUMN_HEADERS_VIEW","ROWS_VIEW","FOOTER_VIEW","COLUMN_VIEWS","ADAPTIVE_NAMESPACE","HIDDEN_COLUMNS_WIDTH","ADAPTIVE_ROW_TYPE","FORM_ITEM_CONTENT_CLASS","FORM_ITEM_MODIFIED","HIDDEN_COLUMN_CLASS","ADAPTIVE_COLUMN_BUTTON_CLASS","ADAPTIVE_COLUMN_NAME_CLASS","COMMAND_ADAPTIVE_HIDDEN_CLASS","ADAPTIVE_DETAIL_ROW_CLASS","ADAPTIVE_ITEM_TEXT_CLASS","MASTER_DETAIL_CELL_CLASS","LAST_DATA_CELL_CLASS","ADAPTIVE_COLUMN_NAME","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_POPUP","REVERT_TOOLTIP_CLASS","GROUP_CELL_CLASS","GROUP_ROW_CLASS","getColumnId","that","column","_columnsController","getDataCellElements","$row","find","adaptiveCellTemplate","container","options","$adaptiveColumnButton","$container","adaptiveColumnsController","component","getController","rowType","addClass","addWidgetPrefix","on","addNamespace","name","createAction","toggleExpandAdaptiveDetailRow","appendTo","setEmptyText","AdaptiveColumnsController","ViewController","inherit","_isRowEditMode","editMode","_getEditMode","_isItemModified","item","cellOptions","columnIndex","getVisibleIndex","index","rowIndex","_dataController","getRowIndexByKey","row","items","modifiedValues","isDefined","_renderFormViewTemplate","focusAction","trigger","value","calculateCellValue","data","displayValue","getDisplayValue","text","formatValue","isCellOrBatchEditMode","_editingController","rowsView","_rowsView","allowEditing","isKeyboardEnabled","attr","option","off","cellTemplate","templateOptions","extend","isDomElement","closest","getWindow","document","length","renderTemplate","done","_cellPrepared","encodeHtml","textContent","innerHTML","html","_getTemplate","editingController","visibleIndex","renderFormTemplate","isItemEdited","_isItemEdited","values","showEditorAlways","renderFormEditTemplate","watch","contents","remove","removeClass","_isVisibleColumnsValid","visibleColumns","getCommandColumnsCount","result","j","visibleColumn","command","_calculatePercentWidths","widths","percentWidths","forEach","_getItemPercentWidth","_isPercentWidth","width","isString","slice","_isColumnHidden","_hiddenColumns","filter","hiddenColumn","_getAverageColumnsWidth","containerWidth","columns","columnsCanFit","fixedColumnsWidth","columnsWithoutFixedWidthCount","isNaN","parseFloat","_calculatePercentWidth","columnsCount","bestFitWidth","columnWidth","_calculateColumnWidth","contentColumns","columnId","widthOption","columnOption","colWidth","columnAutoWidth","columnFitted","partialWidth","resultWidth","_getNotTruncatedColumnWidth","_getCommandColumnsWidth","getVisibleColumns","each","isFormEditMode","editRowKey","getEditRowKey","equalByValue","adaptiveExpandedKey","isEditCell","_getFormItemsByHiddenColumns","hiddenColumns","_","push","dataField","_getAdaptiveColumnVisibleIndex","i","_hideAdaptiveColumn","resultWidths","_hideVisibleColumn","isCommandColumn","_showHiddenCellsInView","_ref","$cells","cssClassNameToRemove","_showHiddenColumns","view","getView","isVisible","element","viewName","$hiddenCommandCells","$hiddenCells","_isCellValid","$cell","hasClass","_ref2","_hideVisibleColumnInView","_ref3","$cellElement","editFormRowIndex","getEditFormRowIndex","rowsCount","getRowsCount","$rowElements","_getRowElements","cancelClassAdding","currentVisibleIndex","$rowElement","eq","_findCellElementInRow","_hideVisibleCellInView","visibleColumnIndex","$rowCells","children","cellIsInsideGroup","$groupCell","concat","colSpan","groupCellLength","parseInt","endGroupIndex","_ref4","cssClassNameToAdd","getEditMode","hideRedundantColumns","hiddenQueue","totalWidth","$rootElement","$element","rootElementWidth","getVisibleContentColumns","_this","bind","visibleContentColumns","contentColumnsCount","hasHiddenColumns","needHideColumn","minWidth","columnBestFitWidth","fixed","Math","max","pop","getItemContentByColumnIndex","$itemContent","_$itemContents","alwaysExpanded","isEditing","createFormByHiddenColumns","userFormOptions","formID","defaultFormOptions","isMaterial","colCount","executeAction","formOptions","_createComponent","customizeItem","label","caption","template","updateForm","onContentReady","e","hasAdaptiveDetailRowExpanded","_contentReadyAction","repaint","updateHidingQueue","hideableColumns","visible","type","groupIndex","columnsHasHidingPriority","_hidingColumnsQueue","hidingPriority","reverse","getHiddenColumns","getHidingColumnsQueue","init","addCommandColumn","adaptiveHidden","cssClass","alignment","fixedPosition","columnsChanged","add","isAdaptiveVisible","getColumns","callBase","optionChanged","args","publicMethods","isAdaptiveDetailRowExpanded","expandAdaptiveDetailRow","collapseAdaptiveDetailRow","module","exports","defaultOptions","columnHidingEnabled","onAdaptiveDetailRowPreparing","controllers","adaptiveColumns","extenders","views","_getCellTemplate","_adaptiveColumnsController","_createRow","_renderCells","hidingColumnsQueueLength","hiddenColumnsLength","last","_getColumnIndexByElementCore","formItem","first","apply","arguments","visibleWidth","_getCellElement","columnIdentifier","getContextMenuItems","targetElement","next","isClickableElement","$target","isClickable","_updateColumnWidth","columnsResizer","_pointCreated","point","cellsLength","currentColumn","nextColumnIndex","_getNextColumnIndex","nextColumn","hasHiddenColumnsOnly","hasAdaptiveHiddenWidth","currentColumnIndex","draggingHeader","location","sourceColumn","editing","_getFormEditItemTemplate","getColumnTemplate","_closeEditItem","$targetElement","$itemContents","_beforeUpdateItems","rowIndices","_adaptiveController","oldExpandRowIndex","getIndexByKey","_isForceRowAdaptiveExpand","_editRowIndex","_afterInsertRow","isRowEditMode","_collapseAdaptiveDetailRow","_cancelEditAdaptiveDetailRow","_afterSaveEditData","_this2","deferred","Deferred","when","validate","isValid","resolve","promise","_beforeCancelEditData","_getRowIndicesForCascadeUpdating","_beforeCloseEditCellInBatchMode","expandedKey","_adaptiveExpandedKey","unshift","editRow","deleteRow","rowKey","getKeyByRowIndex","resizing","_needBestFit","_updateScrollableForIE","msie","version","_updateScrollableTimeoutID","setTimeout","_updateScrollable","_correctColumnWidths","adaptiveController","oldHiddenColumns","hidingColumnsQueue","_toggleBestFitMode","isBestFit","_needStretch","dispose","clearTimeout","_processItems","change","changeType","expandRowIndex","splice","node","isNewRow","_getRowIndicesForExpand","lastRowIndex","oldExpandLoadedRowIndex","_items","newExpandLoadedRowIndex","rowIndexDelta","getRowIndexDelta","updateItems","allowInvisibleRowIndices","editorFactory","_getFocusCellSelector","_getTooltipsSelector","_isColumnVisible","keyboardNavigation","_processNextCellInMasterDetail","$nextCell","isCellOrBatchMode","_isInsideEditForm","focusHandler","_handleTabKeyOnMasterDetailCell","eventTarget","direction","$currentCell","_getFocusedCell","parent","$dataCells","$targetCell","isCellElementsEquals"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\n\r\nfunction _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n    if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\r\n        _typeof = function(obj) {\r\n            return typeof obj\r\n        }\r\n    } else {\r\n        _typeof = function(obj) {\r\n            return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj\r\n        }\r\n    }\r\n    return _typeof(obj)\r\n}\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _events_engine = require(\"../../events/core/events_engine\");\r\nvar _events_engine2 = _interopRequireDefault(_events_engine);\r\nvar _utils = require(\"../../events/utils\");\r\nvar eventUtils = _interopRequireWildcard(_utils);\r\nvar _click = require(\"../../events/click\");\r\nvar _click2 = _interopRequireDefault(_click);\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _type2 = _interopRequireDefault(_type);\r\nvar _browser = require(\"../../core/utils/browser\");\r\nvar _browser2 = _interopRequireDefault(_browser);\r\nvar _guid = require(\"../../core/guid\");\r\nvar _guid2 = _interopRequireDefault(_guid);\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _form = require(\"../form\");\r\nvar _form2 = _interopRequireDefault(_form);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\r\nvar _themes = require(\"../themes\");\r\nvar _themes2 = _interopRequireDefault(_themes);\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\n\r\nfunction _getRequireWildcardCache() {\r\n    if (\"function\" !== typeof WeakMap) {\r\n        return null\r\n    }\r\n    var cache = new WeakMap;\r\n    _getRequireWildcardCache = function() {\r\n        return cache\r\n    };\r\n    return cache\r\n}\r\n\r\nfunction _interopRequireWildcard(obj) {\r\n    if (obj && obj.__esModule) {\r\n        return obj\r\n    }\r\n    if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\r\n        return {\r\n            \"default\": obj\r\n        }\r\n    }\r\n    var cache = _getRequireWildcardCache();\r\n    if (cache && cache.has(obj)) {\r\n        return cache.get(obj)\r\n    }\r\n    var newObj = {};\r\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\r\n            if (desc && (desc.get || desc.set)) {\r\n                Object.defineProperty(newObj, key, desc)\r\n            } else {\r\n                newObj[key] = obj[key]\r\n            }\r\n        }\r\n    }\r\n    newObj.default = obj;\r\n    if (cache) {\r\n        cache.set(obj, newObj)\r\n    }\r\n    return newObj\r\n}\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nvar ROWS_VIEW = \"rowsView\";\r\nvar FOOTER_VIEW = \"footerView\";\r\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\r\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\r\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\r\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\r\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\r\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\r\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\r\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\r\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\r\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\r\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\n\r\nfunction getColumnId(that, column) {\r\n    return that._columnsController.getColumnId(column)\r\n}\r\n\r\nfunction getDataCellElements($row) {\r\n    return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\")\r\n}\r\n\r\nfunction adaptiveCellTemplate(container, options) {\r\n    var $adaptiveColumnButton;\r\n    var $container = (0, _renderer2.default)(container);\r\n    var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\r\n    if (\"data\" === options.rowType) {\r\n        $adaptiveColumnButton = (0, _renderer2.default)(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\r\n        _events_engine2.default.on($adaptiveColumnButton, eventUtils.addNamespace(_click2.default.name, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function() {\r\n            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)\r\n        }));\r\n        $adaptiveColumnButton.appendTo($container)\r\n    } else {\r\n        _uiGrid_core4.default.setEmptyText($container)\r\n    }\r\n}\r\nvar AdaptiveColumnsController = _uiGrid_core2.default.ViewController.inherit({\r\n    _isRowEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_ROW\r\n    },\r\n    _isItemModified: function(item, cellOptions) {\r\n        var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n        var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\r\n        var row = this._dataController.items()[rowIndex + 1];\r\n        return row && row.modifiedValues && _type2.default.isDefined(row.modifiedValues[columnIndex])\r\n    },\r\n    _renderFormViewTemplate: function(item, cellOptions, $container) {\r\n        var that = this;\r\n        var column = item.column;\r\n        var focusAction = that.createAction(function() {\r\n            _events_engine2.default.trigger($container, _click2.default.name)\r\n        });\r\n        var value = column.calculateCellValue(cellOptions.data);\r\n        var displayValue = _uiGrid_core4.default.getDisplayValue(column, value, cellOptions.data, cellOptions.rowType);\r\n        var text = _uiGrid_core4.default.formatValue(displayValue, column);\r\n        var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\r\n        var rowsView = that._rowsView;\r\n        if (column.allowEditing && that.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\r\n            $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\r\n            if (isCellOrBatchEditMode) {\r\n                _events_engine2.default.off($container, \"focus\", focusAction);\r\n                _events_engine2.default.on($container, \"focus\", focusAction)\r\n            }\r\n        }\r\n        if (column.cellTemplate) {\r\n            var templateOptions = (0, _extend.extend)({}, cellOptions, {\r\n                value: value,\r\n                displayValue: displayValue,\r\n                text: text,\r\n                column: column\r\n            });\r\n            var isDomElement = !!$container.closest((0, _window.getWindow)().document).length;\r\n            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(function() {\r\n                rowsView._cellPrepared($container, cellOptions)\r\n            })\r\n        } else {\r\n            var container = $container.get(0);\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n            $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n            if (!_type2.default.isDefined(text) || \"\" === text) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n            if (!that._isRowEditMode()) {\r\n                if (that._isItemModified(item, cellOptions)) {\r\n                    $container.addClass(FORM_ITEM_MODIFIED)\r\n                }\r\n            }\r\n            rowsView._cellPrepared($container, cellOptions)\r\n        }\r\n    },\r\n    _getTemplate: function(item, cellOptions) {\r\n        var that = this;\r\n        var column = item.column;\r\n        var editingController = this.getController(\"editing\");\r\n        return function(options, container) {\r\n            var $container = (0, _renderer2.default)(container);\r\n            var columnIndex = that._columnsController.getVisibleIndex(column.visibleIndex);\r\n            var templateOptions = (0, _extend.extend)({}, cellOptions);\r\n            var renderFormTemplate = function() {\r\n                var isItemEdited = that._isItemEdited(item);\r\n                templateOptions.value = cellOptions.row.values[columnIndex];\r\n                if (isItemEdited || column.showEditorAlways) {\r\n                    editingController.renderFormEditTemplate(templateOptions, item, options.component, $container, !isItemEdited)\r\n                } else {\r\n                    templateOptions.column = column;\r\n                    templateOptions.columnIndex = columnIndex;\r\n                    that._renderFormViewTemplate(item, templateOptions, $container)\r\n                }\r\n            };\r\n            renderFormTemplate();\r\n            templateOptions.watch && templateOptions.watch(function() {\r\n                return {\r\n                    isItemEdited: that._isItemEdited(item),\r\n                    value: cellOptions.row.values[columnIndex]\r\n                }\r\n            }, function() {\r\n                $container.contents().remove();\r\n                $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n                renderFormTemplate()\r\n            })\r\n        }\r\n    },\r\n    _isVisibleColumnsValid: function(visibleColumns) {\r\n        var getCommandColumnsCount = function() {\r\n            var result = 0;\r\n            for (var j = 0; j < visibleColumns.length; j++) {\r\n                var visibleColumn = visibleColumns[j];\r\n                if (visibleColumn.command) {\r\n                    result++\r\n                }\r\n            }\r\n            return result\r\n        };\r\n        if (visibleColumns < 2) {\r\n            return false\r\n        }\r\n        if (visibleColumns.length - getCommandColumnsCount() <= 1) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _calculatePercentWidths: function(widths, visibleColumns) {\r\n        var that = this;\r\n        var percentWidths = 0;\r\n        visibleColumns.forEach(function(item, index) {\r\n            if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\r\n                percentWidths += that._getItemPercentWidth(item)\r\n            }\r\n        });\r\n        return percentWidths\r\n    },\r\n    _isPercentWidth: function(width) {\r\n        return _type2.default.isString(width) && \"%\" === width.slice(-1)\r\n    },\r\n    _isColumnHidden: function(column) {\r\n        return this._hiddenColumns.filter(function(hiddenColumn) {\r\n            return hiddenColumn.index === column.index\r\n        }).length > 0\r\n    },\r\n    _getAverageColumnsWidth: function(containerWidth, columns, columnsCanFit) {\r\n        var that = this;\r\n        var fixedColumnsWidth = 0;\r\n        var columnsWithoutFixedWidthCount = 0;\r\n        columns.forEach(function(column) {\r\n            if (!that._isColumnHidden(column)) {\r\n                var width = column.width;\r\n                if (_type2.default.isDefined(width) && !isNaN(parseFloat(width))) {\r\n                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\r\n                        visibleIndex: column.visibleIndex,\r\n                        columnsCount: columns.length,\r\n                        columnsCanFit: columnsCanFit,\r\n                        bestFitWidth: column.bestFitWidth,\r\n                        columnWidth: width,\r\n                        containerWidth: containerWidth\r\n                    }) : parseFloat(width)\r\n                } else {\r\n                    columnsWithoutFixedWidthCount++\r\n                }\r\n            }\r\n        });\r\n        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount\r\n    },\r\n    _calculateColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        var columnsCount = contentColumns.length;\r\n        var colWidth;\r\n        if (widthOption && \"auto\" !== widthOption) {\r\n            if (this._isPercentWidth(widthOption)) {\r\n                colWidth = this._calculatePercentWidth({\r\n                    visibleIndex: column.visibleIndex,\r\n                    columnsCount: columnsCount,\r\n                    columnsCanFit: columnsCanFit,\r\n                    bestFitWidth: bestFitWidth,\r\n                    columnWidth: widthOption,\r\n                    containerWidth: containerWidth\r\n                })\r\n            } else {\r\n                return widthOption\r\n            }\r\n        } else {\r\n            var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)\r\n        }\r\n        return colWidth\r\n    },\r\n    _calculatePercentWidth: function(options) {\r\n        var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\r\n        var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\r\n        var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\r\n        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth\r\n    },\r\n    _getNotTruncatedColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\r\n            return parseFloat(widthOption)\r\n        }\r\n        var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\r\n        return colWidth < bestFitWidth ? null : colWidth\r\n    },\r\n    _getItemPercentWidth: function(item) {\r\n        var result = 0;\r\n        if (item.width && this._isPercentWidth(item.width)) {\r\n            result = parseFloat(item.width)\r\n        }\r\n        return result\r\n    },\r\n    _getCommandColumnsWidth: function() {\r\n        var that = this;\r\n        var columns = that._columnsController.getVisibleColumns();\r\n        var colWidth = 0;\r\n        (0, _iterator.each)(columns, function(index, column) {\r\n            if (column.index < 0 || column.command) {\r\n                colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0\r\n            }\r\n        });\r\n        return colWidth\r\n    },\r\n    _isItemEdited: function(item) {\r\n        if (this.isFormEditMode()) {\r\n            return false\r\n        }\r\n        if (this._isRowEditMode()) {\r\n            var editRowKey = this._editingController.getEditRowKey();\r\n            if ((0, _common.equalByValue)(editRowKey, this._dataController.adaptiveExpandedKey())) {\r\n                return true\r\n            }\r\n        } else {\r\n            var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n            var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n            return this._editingController.isEditCell(rowIndex, columnIndex)\r\n        }\r\n    },\r\n    _getFormItemsByHiddenColumns: function(hiddenColumns) {\r\n        var items = [];\r\n        (0, _iterator.each)(hiddenColumns, function(_, column) {\r\n            items.push({\r\n                column: column,\r\n                name: column.name,\r\n                dataField: column.dataField,\r\n                visibleIndex: column.visibleIndex\r\n            })\r\n        });\r\n        return items\r\n    },\r\n    _getAdaptiveColumnVisibleIndex: function(visibleColumns) {\r\n        for (var i = 0; i < visibleColumns.length; i++) {\r\n            var column = visibleColumns[i];\r\n            if (column.command === ADAPTIVE_COLUMN_NAME) {\r\n                return i\r\n            }\r\n        }\r\n    },\r\n    _hideAdaptiveColumn: function(resultWidths, visibleColumns) {\r\n        var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\r\n        if (_type2.default.isDefined(visibleIndex)) {\r\n            resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n            this._hideVisibleColumn({\r\n                isCommandColumn: true,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }\r\n    },\r\n    _showHiddenCellsInView: function(_ref) {\r\n        var $cells = _ref.$cells,\r\n            isCommandColumn = _ref.isCommandColumn;\r\n        var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cells.removeClass(cssClassNameToRemove)\r\n    },\r\n    _showHiddenColumns: function() {\r\n        for (var i = 0; i < COLUMN_VIEWS.length; i++) {\r\n            var view = this.getView(COLUMN_VIEWS[i]);\r\n            if (view && view.isVisible() && view.element()) {\r\n                var viewName = view.name;\r\n                var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCommandCells,\r\n                    isCommandColumn: true\r\n                });\r\n                var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCells\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _isCellValid: function($cell) {\r\n        return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS)\r\n    },\r\n    _hideVisibleColumn: function(_ref2) {\r\n        var isCommandColumn = _ref2.isCommandColumn,\r\n            visibleIndex = _ref2.visibleIndex;\r\n        var that = this;\r\n        COLUMN_VIEWS.forEach(function(viewName) {\r\n            var view = that.getView(viewName);\r\n            view && that._hideVisibleColumnInView({\r\n                view: view,\r\n                isCommandColumn: isCommandColumn,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        })\r\n    },\r\n    _hideVisibleColumnInView: function(_ref3) {\r\n        var view = _ref3.view,\r\n            isCommandColumn = _ref3.isCommandColumn,\r\n            visibleIndex = _ref3.visibleIndex;\r\n        var viewName = view.name;\r\n        var $cellElement;\r\n        var column = this._columnsController.getVisibleColumns()[visibleIndex];\r\n        var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\r\n        if (view && view.isVisible() && column) {\r\n            var rowsCount = view.getRowsCount();\r\n            var $rowElements = view._getRowElements();\r\n            for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n                var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\r\n                if (!cancelClassAdding) {\r\n                    var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\r\n                    if (currentVisibleIndex >= 0) {\r\n                        var $rowElement = $rowElements.eq(rowIndex);\r\n                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\r\n                        this._isCellValid($cellElement) && this._hideVisibleCellInView({\r\n                            viewName: viewName,\r\n                            isCommandColumn: isCommandColumn,\r\n                            $cell: $cellElement\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _findCellElementInRow: function($rowElement, visibleColumnIndex) {\r\n        var $rowCells = $rowElement.children();\r\n        var visibleIndex = visibleColumnIndex;\r\n        var cellIsInsideGroup = false;\r\n        if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\r\n            var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\r\n            var colSpan = $groupCell.attr(\"colspan\");\r\n            if ($groupCell.length && _type2.default.isDefined(colSpan)) {\r\n                var groupCellLength = parseInt(colSpan);\r\n                var endGroupIndex = $groupCell.index() + groupCellLength - 1;\r\n                if (visibleColumnIndex > endGroupIndex) {\r\n                    visibleIndex = visibleColumnIndex - groupCellLength + 1\r\n                } else {\r\n                    cellIsInsideGroup = true\r\n                }\r\n            }\r\n        }\r\n        var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\r\n        return $cellElement\r\n    },\r\n    _hideVisibleCellInView: function(_ref4) {\r\n        var $cell = _ref4.$cell,\r\n            isCommandColumn = _ref4.isCommandColumn;\r\n        var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cell.addClass(cssClassNameToAdd)\r\n    },\r\n    _getEditMode: function() {\r\n        return this._editingController.getEditMode()\r\n    },\r\n    isFormEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP\r\n    },\r\n    hideRedundantColumns: function(resultWidths, visibleColumns, hiddenQueue) {\r\n        var that = this;\r\n        this._hiddenColumns = [];\r\n        if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\r\n            var totalWidth = 0;\r\n            var $rootElement = that.component.$element();\r\n            var rootElementWidth = $rootElement.width() - that._getCommandColumnsWidth();\r\n            var getVisibleContentColumns = function() {\r\n                var _this = this;\r\n                return visibleColumns.filter(function(item) {\r\n                    return !item.command && 0 === _this._hiddenColumns.filter(function(i) {\r\n                        return i.index === item.index\r\n                    }).length\r\n                })\r\n            }.bind(this);\r\n            var visibleContentColumns = getVisibleContentColumns();\r\n            var contentColumnsCount = visibleContentColumns.length;\r\n            var i;\r\n            var hasHiddenColumns;\r\n            var needHideColumn;\r\n            do {\r\n                needHideColumn = false;\r\n                totalWidth = 0;\r\n                var percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\r\n                var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\r\n                for (i = 0; i < visibleColumns.length; i++) {\r\n                    var visibleColumn = visibleColumns[i];\r\n                    var columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    var columnId = getColumnId(that, visibleColumn);\r\n                    var widthOption = that._columnsController.columnOption(columnId, \"width\");\r\n                    var minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\r\n                    var columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n                    if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\r\n                        hasHiddenColumns = true;\r\n                        continue\r\n                    }\r\n                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\r\n                        needHideColumn = true;\r\n                        break\r\n                    }\r\n                    if (!widthOption || \"auto\" === widthOption) {\r\n                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)\r\n                    }\r\n                    if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\r\n                        totalWidth += columnWidth\r\n                    }\r\n                }\r\n                needHideColumn = needHideColumn || totalWidth > $rootElement.width();\r\n                if (needHideColumn) {\r\n                    var column = hiddenQueue.pop();\r\n                    var visibleIndex = that._columnsController.getVisibleIndex(column.index);\r\n                    rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    that._hideVisibleColumn({\r\n                        visibleIndex: visibleIndex\r\n                    });\r\n                    resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n                    this._hiddenColumns.push(column);\r\n                    visibleContentColumns = getVisibleContentColumns()\r\n                }\r\n            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\r\n            if (contentColumnsCount === visibleContentColumns.length) {\r\n                that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n            }\r\n        } else {\r\n            that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n        }\r\n    },\r\n    getItemContentByColumnIndex: function(visibleColumnIndex) {\r\n        var $itemContent;\r\n        for (var i = 0; i < this._$itemContents.length; i++) {\r\n            $itemContent = this._$itemContents.eq(i);\r\n            var item = $itemContent.data(\"dx-form-item\");\r\n            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\r\n                return $itemContent\r\n            }\r\n        }\r\n    },\r\n    toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n        if (!(this.isFormEditMode() && this._editingController.isEditing())) {\r\n            this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded)\r\n        }\r\n    },\r\n    createFormByHiddenColumns: function(container, options) {\r\n        var that = this;\r\n        var $container = (0, _renderer2.default)(container);\r\n        var userFormOptions = {\r\n            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\r\n            formID: \"dx-\" + new _guid2.default\r\n        };\r\n        var defaultFormOptions = _themes2.default.isMaterial() ? {\r\n            colCount: 2\r\n        } : {};\r\n        this.executeAction(\"onAdaptiveDetailRowPreparing\", {\r\n            formOptions: userFormOptions\r\n        });\r\n        that._$itemContents = null;\r\n        that._form = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($container), _form2.default, (0, _extend.extend)(defaultFormOptions, userFormOptions, {\r\n            customizeItem: function(item) {\r\n                var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    item.column = column;\r\n                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))\r\n                }\r\n                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)\r\n            },\r\n            onContentReady: function(e) {\r\n                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\r\n                that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS)\r\n            }\r\n        }))\r\n    },\r\n    hasAdaptiveDetailRowExpanded: function() {\r\n        return _type2.default.isDefined(this._dataController.adaptiveExpandedKey())\r\n    },\r\n    updateForm: function(hiddenColumns) {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            if (this._form && _type2.default.isDefined(this._form._contentReadyAction)) {\r\n                if (hiddenColumns && hiddenColumns.length) {\r\n                    this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns))\r\n                } else {\r\n                    this._form.repaint()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateHidingQueue: function(columns) {\r\n        var that = this;\r\n        var hideableColumns = columns.filter(function(column) {\r\n            return column.visible && !column.type && !column.fixed && !(_type2.default.isDefined(column.groupIndex) && column.groupIndex >= 0)\r\n        });\r\n        var columnsHasHidingPriority;\r\n        var i;\r\n        that._hidingColumnsQueue = [];\r\n        if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\r\n            return that._hidingColumnsQueue\r\n        }\r\n        for (i = 0; i < hideableColumns.length; i++) {\r\n            if (_type2.default.isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\r\n                columnsHasHidingPriority = true;\r\n                that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]\r\n            }\r\n        }\r\n        if (columnsHasHidingPriority) {\r\n            that._hidingColumnsQueue.reverse()\r\n        } else {\r\n            if (that.option(\"columnHidingEnabled\")) {\r\n                for (i = 0; i < hideableColumns.length; i++) {\r\n                    var visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\r\n                    that._hidingColumnsQueue[visibleIndex] = hideableColumns[i]\r\n                }\r\n            }\r\n        }\r\n        that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\r\n        return that._hidingColumnsQueue\r\n    },\r\n    getHiddenColumns: function() {\r\n        return this._hiddenColumns\r\n    },\r\n    hasHiddenColumns: function() {\r\n        return this._hiddenColumns.length > 0\r\n    },\r\n    getHidingColumnsQueue: function() {\r\n        return this._hidingColumnsQueue\r\n    },\r\n    init: function() {\r\n        var that = this;\r\n        that._columnsController = that.getController(\"columns\");\r\n        that._dataController = that.getController(\"data\");\r\n        that._rowsView = that.getView(\"rowsView\");\r\n        that._columnsController.addCommandColumn({\r\n            type: ADAPTIVE_COLUMN_NAME,\r\n            command: ADAPTIVE_COLUMN_NAME,\r\n            visible: true,\r\n            adaptiveHidden: true,\r\n            cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\r\n            alignment: \"center\",\r\n            width: \"auto\",\r\n            cellTemplate: adaptiveCellTemplate,\r\n            fixedPosition: \"right\"\r\n        });\r\n        that._columnsController.columnsChanged.add(function() {\r\n            var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\r\n            that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true)\r\n        });\r\n        that._editingController = that.getController(\"editing\");\r\n        that._hidingColumnsQueue = [];\r\n        that._hiddenColumns = [];\r\n        that.createAction(\"onAdaptiveDetailRowPreparing\");\r\n        that.callBase()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"columnHidingEnabled\" === args.name) {\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value)\r\n        }\r\n        this.callBase(args)\r\n    },\r\n    publicMethods: function() {\r\n        return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"]\r\n    },\r\n    isAdaptiveDetailRowExpanded: function(key) {\r\n        return this._dataController.adaptiveExpandedKey() && (0, _common.equalByValue)(this._dataController.adaptiveExpandedKey(), key)\r\n    },\r\n    expandAdaptiveDetailRow: function(key) {\r\n        if (!this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow(key)\r\n        }\r\n    },\r\n    collapseAdaptiveDetailRow: function() {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow()\r\n        }\r\n    }\r\n});\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnHidingEnabled: false,\r\n            onAdaptiveDetailRowPreparing: null\r\n        }\r\n    },\r\n    controllers: {\r\n        adaptiveColumns: AdaptiveColumnsController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\r\n                        return function(container, options) {\r\n                            that._adaptiveColumnsController.createFormByHiddenColumns((0, _renderer2.default)(container), options)\r\n                        }\r\n                    }\r\n                    return that.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\r\n                        $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS)\r\n                    }\r\n                    return $row\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    this.callBase($row, options);\r\n                    var hidingColumnsQueueLength = this._adaptiveColumnsController.getHidingColumnsQueue().length;\r\n                    var hiddenColumnsLength = this._adaptiveColumnsController.getHiddenColumns().length;\r\n                    if (hidingColumnsQueueLength && !hiddenColumnsLength) {\r\n                        getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS)\r\n                    }\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\r\n                        var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\r\n                        return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)\r\n                    } else {\r\n                        return this.callBase($element)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                    }\r\n                },\r\n                _getCellElement: function(rowIndex, columnIdentifier) {\r\n                    var item = this._dataController.items()[rowIndex];\r\n                    if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\r\n                        return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)\r\n                    } else {\r\n                        return this.callBase(rowIndex, columnIdentifier)\r\n                    }\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    if (options.row && \"detailAdaptive\" === options.row.rowType) {\r\n                        var view = this.component.getView(\"columnHeadersView\");\r\n                        var formItem = (0, _renderer2.default)(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\r\n                        options.column = formItem ? formItem.column : options.column;\r\n                        return view.getContextMenuItems && view.getContextMenuItems(options)\r\n                    }\r\n                    return this.callBase && this.callBase(options)\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isClickable = this.callBase ? this.callBase($target) : false;\r\n                    return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            \"export\": {\r\n                _updateColumnWidth: function(column, width) {\r\n                    this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width)\r\n                }\r\n            },\r\n            columnsResizer: {\r\n                _pointCreated: function(point, cellsLength, columns) {\r\n                    var result = this.callBase(point, cellsLength, columns);\r\n                    var currentColumn = columns[point.columnIndex] || {};\r\n                    var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\r\n                    var nextColumn = columns[nextColumnIndex] || {};\r\n                    var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\r\n                    var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                },\r\n                _getNextColumnIndex: function(currentColumnIndex) {\r\n                    var visibleColumns = this._columnsController.getVisibleColumns();\r\n                    var index = this.callBase(currentColumnIndex);\r\n                    while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        index++\r\n                    }\r\n                    return index\r\n                }\r\n            },\r\n            draggingHeader: {\r\n                _pointCreated: function(point, columns, location, sourceColumn) {\r\n                    var result = this.callBase(point, columns, location, sourceColumn);\r\n                    var column = columns[point.columnIndex - 1] || {};\r\n                    var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                }\r\n            },\r\n            editing: {\r\n                _isRowEditMode: function() {\r\n                    return this.getEditMode() === EDIT_MODE_ROW\r\n                },\r\n                _getFormEditItemTemplate: function(cellOptions, column) {\r\n                    if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\r\n                        cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\r\n                        return this.getColumnTemplate(cellOptions)\r\n                    }\r\n                    return this.callBase(cellOptions, column)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n                    var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\r\n                    var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\r\n                    if (!this.isEditCell(rowIndex, columnIndex)) {\r\n                        this.callBase($targetElement)\r\n                    }\r\n                },\r\n                _beforeUpdateItems: function(rowIndices, rowIndex) {\r\n                    if (!this._adaptiveController.isFormEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        var items = this._dataController.items();\r\n                        var item = items[rowIndex];\r\n                        var oldExpandRowIndex = _uiGrid_core4.default.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\r\n                        this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\r\n                        if (oldExpandRowIndex >= 0 && rowIndex > oldExpandRowIndex) {\r\n                            this._editRowIndex--\r\n                        }\r\n                        if (oldExpandRowIndex >= 0) {\r\n                            rowIndices.push(oldExpandRowIndex + 1)\r\n                        }\r\n                        rowIndices.push(rowIndex + 1);\r\n                        this._dataController.adaptiveExpandedKey(item.key)\r\n                    }\r\n                },\r\n                _afterInsertRow: function(options) {\r\n                    this.callBase(options);\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._adaptiveController.toggleExpandAdaptiveDetailRow(options.key, this.isRowEditMode());\r\n                        this._isForceRowAdaptiveExpand = true\r\n                    }\r\n                },\r\n                _collapseAdaptiveDetailRow: function() {\r\n                    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow();\r\n                        this._isForceRowAdaptiveExpand = false\r\n                    }\r\n                },\r\n                _cancelEditAdaptiveDetailRow: function() {\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._collapseAdaptiveDetailRow()\r\n                    }\r\n                },\r\n                _afterSaveEditData: function() {\r\n                    var _this2 = this;\r\n                    this.callBase.apply(this, arguments);\r\n                    var deferred = new _deferred.Deferred;\r\n                    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        (0, _deferred.when)(this.getController(\"validating\").validate(true)).done(function(isValid) {\r\n                            if (isValid) {\r\n                                _this2._cancelEditAdaptiveDetailRow()\r\n                            }\r\n                            deferred.resolve()\r\n                        })\r\n                    } else {\r\n                        deferred.resolve()\r\n                    }\r\n                    return deferred.promise()\r\n                },\r\n                _beforeCancelEditData: function() {\r\n                    this.callBase();\r\n                    this._cancelEditAdaptiveDetailRow()\r\n                },\r\n                _getRowIndicesForCascadeUpdating: function(row) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\r\n                        rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _beforeCloseEditCellInBatchMode: function(rowIndices) {\r\n                    var expandedKey = this._dataController._adaptiveExpandedKey;\r\n                    if (expandedKey) {\r\n                        var rowIndex = _uiGrid_core4.default.getIndexByKey(expandedKey, this._dataController.items());\r\n                        if (rowIndex > -1) {\r\n                            rowIndices.unshift(rowIndex)\r\n                        }\r\n                    }\r\n                },\r\n                editRow: function(rowIndex) {\r\n                    if (this._adaptiveController.isFormEditMode()) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                    if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            },\r\n            resizing: {\r\n                _needBestFit: function() {\r\n                    return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length\r\n                },\r\n                _updateScrollableForIE: function() {\r\n                    var that = this;\r\n                    if (_browser2.default.msie && parseInt(_browser2.default.version) <= 11) {\r\n                        this._updateScrollableTimeoutID = setTimeout(function() {\r\n                            that.getView(\"rowsView\")._updateScrollable()\r\n                        })\r\n                    }\r\n                },\r\n                _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n                    var adaptiveController = this._adaptiveColumnsController;\r\n                    var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n                    var oldHiddenColumns = adaptiveController.getHiddenColumns();\r\n                    var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\r\n                    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\r\n                    var hiddenColumns = adaptiveController.getHiddenColumns();\r\n                    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\r\n                        if (oldHiddenColumns.length !== hiddenColumns.length) {\r\n                            adaptiveController.updateForm(hiddenColumns)\r\n                        }\r\n                    }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\r\n                    if (columnAutoWidth && hidingColumnsQueue.length && !hiddenColumns.length) {\r\n                        this._updateScrollableForIE()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _toggleBestFitMode: function(isBestFit) {\r\n                    isBestFit && this._adaptiveColumnsController._showHiddenColumns();\r\n                    this.callBase(isBestFit)\r\n                },\r\n                _needStretch: function() {\r\n                    var adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()\r\n                },\r\n                init: function() {\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    this.callBase()\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._updateScrollableTimeoutID)\r\n                }\r\n            },\r\n            data: {\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var changeType = change.changeType;\r\n                    items = that.callBase.apply(that, arguments);\r\n                    if (\"loadingAll\" === changeType || !_type2.default.isDefined(that._adaptiveExpandedKey)) {\r\n                        return items\r\n                    }\r\n                    var expandRowIndex = _uiGrid_core4.default.getIndexByKey(that._adaptiveExpandedKey, items);\r\n                    if (expandRowIndex >= 0) {\r\n                        var item = items[expandRowIndex];\r\n                        items.splice(expandRowIndex + 1, 0, {\r\n                            visible: true,\r\n                            rowType: ADAPTIVE_ROW_TYPE,\r\n                            key: item.key,\r\n                            data: item.data,\r\n                            node: item.node,\r\n                            modifiedValues: item.modifiedValues,\r\n                            isNewRow: item.isNewRow,\r\n                            values: item.values\r\n                        })\r\n                    } else {\r\n                        if (\"refresh\" === changeType) {\r\n                            that._adaptiveExpandedKey = void 0\r\n                        }\r\n                    }\r\n                    return items\r\n                },\r\n                _getRowIndicesForExpand: function(key) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\r\n                        var lastRowIndex = rowIndices[rowIndices.length - 1];\r\n                        rowIndices.push(lastRowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                adaptiveExpandedKey: function(value) {\r\n                    if (_type2.default.isDefined(value)) {\r\n                        this._adaptiveExpandedKey = value\r\n                    } else {\r\n                        return this._adaptiveExpandedKey\r\n                    }\r\n                },\r\n                toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n                    var that = this;\r\n                    var oldExpandLoadedRowIndex = _uiGrid_core4.default.getIndexByKey(that._adaptiveExpandedKey, that._items);\r\n                    var newExpandLoadedRowIndex = _uiGrid_core4.default.getIndexByKey(key, that._items);\r\n                    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\r\n                        key = void 0;\r\n                        newExpandLoadedRowIndex = -1\r\n                    }\r\n                    that._adaptiveExpandedKey = key;\r\n                    if (oldExpandLoadedRowIndex >= 0) {\r\n                        oldExpandLoadedRowIndex++\r\n                    }\r\n                    if (newExpandLoadedRowIndex >= 0) {\r\n                        newExpandLoadedRowIndex++\r\n                    }\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    that.updateItems({\r\n                        allowInvisibleRowIndices: true,\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\r\n                    })\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveExpandedKey = void 0\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _getFocusCellSelector: function() {\r\n                    return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\"\r\n                },\r\n                _getTooltipsSelector: function() {\r\n                    return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)\r\n                }\r\n            },\r\n            columns: {\r\n                _isColumnVisible: function(column) {\r\n                    return this.callBase(column) && !column.adaptiveHidden\r\n                }\r\n            },\r\n            keyboardNavigation: {\r\n                _isCellValid: function($cell) {\r\n                    return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                },\r\n                _processNextCellInMasterDetail: function($nextCell) {\r\n                    this.callBase($nextCell);\r\n                    var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\r\n                    if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\r\n                        var focusHandler = function focusHandler() {\r\n                            _events_engine2.default.off($nextCell, \"focus\", focusHandler);\r\n                            _events_engine2.default.trigger($nextCell, \"dxclick\")\r\n                        };\r\n                        _events_engine2.default.on($nextCell, \"focus\", focusHandler)\r\n                    }\r\n                },\r\n                _handleTabKeyOnMasterDetailCell: function(eventTarget, direction) {\r\n                    var result = this.callBase(eventTarget, direction);\r\n                    var $currentCell = this._getFocusedCell();\r\n                    var $row = $currentCell && $currentCell.parent();\r\n                    if (!result && $row && $row.length) {\r\n                        var $dataCells = getDataCellElements($row);\r\n                        var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\r\n                        var rowIndex = $row.get(0).rowIndex;\r\n                        var adaptiveController = this._adaptiveController;\r\n                        var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\r\n                        var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\r\n                        return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals\r\n                    }\r\n                    return result\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}