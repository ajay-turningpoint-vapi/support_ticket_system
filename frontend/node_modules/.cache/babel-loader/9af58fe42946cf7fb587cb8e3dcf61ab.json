{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.grouping.expanded.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _utils = require(\"../../data/utils\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _store_helper = require(\"../../data/store_helper\");\n\nvar _uiData_grid = require(\"./ui.data_grid.core\");\n\nvar _uiData_gridGrouping = require(\"./ui.data_grid.grouping.core\");\n\nvar _uiData_grid2 = require(\"./ui.data_grid.utils\");\n\nvar _query = require(\"../../data/query\");\n\nvar _query2 = _interopRequireDefault(_query);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar loadTotalCount = function (dataSource, options) {\n  var d = new _deferred.Deferred();\n  var loadOptions = (0, _extend.extend)({\n    skip: 0,\n    take: 1,\n    requireTotalCount: true\n  }, options);\n  dataSource.load(loadOptions).done(function (data, extra) {\n    d.resolve(extra && extra.totalCount);\n  }).fail(d.reject.bind(d));\n  return d;\n};\n\nexports.GroupingHelper = _uiData_gridGrouping.GroupingHelper.inherit(function () {\n  var foreachCollapsedGroups = function (that, callback, updateOffsets) {\n    return that.foreachGroups(function (groupInfo) {\n      if (!groupInfo.isExpanded) {\n        return callback(groupInfo);\n      }\n    }, false, false, updateOffsets, true);\n  };\n\n  var correctSkipLoadOption = function (that, skip) {\n    var skipCorrection = 0;\n    var resultSkip = skip || 0;\n\n    if (skip) {\n      foreachCollapsedGroups(that, function (groupInfo) {\n        if (groupInfo.offset - skipCorrection >= skip) {\n          return false;\n        }\n\n        skipCorrection += groupInfo.count - 1;\n      });\n      resultSkip += skipCorrection;\n    }\n\n    return resultSkip;\n  };\n\n  var processGroupItems = function processGroupItems(that, items, path, offset, skipFirstItem, take) {\n    var removeLastItemsCount = 0;\n    var needRemoveFirstItem = false;\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (void 0 !== item.items) {\n        path.push(item.key);\n        var groupInfo = that.findGroupInfo(path);\n\n        if (groupInfo && !groupInfo.isExpanded) {\n          item.collapsedItems = item.items;\n          item.items = null;\n          offset += groupInfo.count;\n          take--;\n\n          if (take < 0) {\n            removeLastItemsCount++;\n          }\n\n          if (skipFirstItem) {\n            needRemoveFirstItem = true;\n          }\n        } else {\n          if (item.items) {\n            var offsetInfo = processGroupItems(that, item.items, path, offset, skipFirstItem, take);\n\n            if (skipFirstItem) {\n              if (offsetInfo.offset - offset > 1) {\n                item.isContinuation = true;\n              } else {\n                needRemoveFirstItem = true;\n              }\n            }\n\n            offset = offsetInfo.offset;\n            take = offsetInfo.take;\n\n            if (take < 0) {\n              if (item.items.length) {\n                item.isContinuationOnNextPage = true;\n              } else {\n                removeLastItemsCount++;\n              }\n            }\n          }\n        }\n\n        path.pop();\n      } else {\n        if (skipFirstItem) {\n          needRemoveFirstItem = true;\n        }\n\n        offset++;\n        take--;\n\n        if (take < 0) {\n          removeLastItemsCount++;\n        }\n      }\n\n      skipFirstItem = false;\n    }\n\n    if (needRemoveFirstItem) {\n      items.splice(0, 1);\n    }\n\n    if (removeLastItemsCount) {\n      items.splice(-removeLastItemsCount, removeLastItemsCount);\n    }\n\n    return {\n      offset: offset,\n      take: take\n    };\n  };\n\n  var pathEquals = function (path1, path2) {\n    if (path1.length !== path2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < path1.length; i++) {\n      if (!(0, _utils.keysEqual)(null, path1[i], path2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var updateGroupOffsets = function updateGroupOffsets(that, items, path, offset, additionalGroupInfo) {\n    if (!items) {\n      return;\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (\"key\" in item && void 0 !== item.items) {\n        path.push(item.key);\n\n        if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {\n          additionalGroupInfo.offset = offset;\n        }\n\n        var groupInfo = that.findGroupInfo(path);\n\n        if (groupInfo && !item.isContinuation) {\n          groupInfo.offset = offset;\n        }\n\n        if (groupInfo && !groupInfo.isExpanded) {\n          offset += groupInfo.count;\n        } else {\n          offset = updateGroupOffsets(that, item.items, path, offset, additionalGroupInfo);\n        }\n\n        path.pop();\n      } else {\n        offset++;\n      }\n    }\n\n    return offset;\n  };\n\n  var removeGroupLoadOption = function (storeLoadOptions, loadOptions) {\n    if (loadOptions.group) {\n      var groups = (0, _uiData_grid.normalizeSortingInfo)(loadOptions.group);\n      var sorts = (0, _uiData_grid.normalizeSortingInfo)(storeLoadOptions.sort);\n      storeLoadOptions.sort = (0, _store_helper.arrangeSortingInfo)(groups, sorts);\n      delete loadOptions.group;\n    }\n  };\n\n  var createNotGroupFilter = function (path, storeLoadOptions, group) {\n    var groups = (0, _uiData_grid.normalizeSortingInfo)(group || storeLoadOptions.group);\n    var filter = [];\n\n    for (var i = 0; i < path.length; i++) {\n      var filterElement = [];\n\n      for (var j = 0; j <= i; j++) {\n        filterElement.push([groups[j].selector, i === j ? \"<>\" : \"=\", path[j]]);\n      }\n\n      filter.push((0, _uiData_grid.combineFilters)(filterElement));\n    }\n\n    filter = (0, _uiData_grid.combineFilters)(filter, \"or\");\n    return (0, _uiData_grid.combineFilters)([filter, storeLoadOptions.filter]);\n  };\n\n  var getGroupCount = function getGroupCount(item, groupCount) {\n    var count = item.count || item.items.length;\n\n    if (!item.count && groupCount > 1) {\n      count = 0;\n\n      for (var i = 0; i < item.items.length; i++) {\n        count += getGroupCount(item.items[i], groupCount - 1);\n      }\n    }\n\n    return count;\n  };\n\n  return {\n    handleDataLoading: function (options) {\n      var that = this;\n      var storeLoadOptions = options.storeLoadOptions;\n      var collapsedGroups = [];\n      var collapsedItemsCount = 0;\n      var skipFirstItem = false;\n      var take;\n      var group = options.loadOptions.group;\n      var skipCorrection = 0;\n      removeGroupLoadOption(storeLoadOptions, options.loadOptions);\n      options.group = options.group || group;\n\n      if (options.isCustomLoading) {\n        return;\n      }\n\n      var loadOptions = (0, _extend.extend)({}, storeLoadOptions);\n      loadOptions.skip = correctSkipLoadOption(that, storeLoadOptions.skip);\n\n      if (loadOptions.skip && loadOptions.take && group) {\n        loadOptions.skip--;\n        loadOptions.take++;\n        skipFirstItem = true;\n      }\n\n      if (loadOptions.take && group) {\n        take = loadOptions.take;\n        loadOptions.take++;\n      }\n\n      foreachCollapsedGroups(that, function (groupInfo) {\n        if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {\n          return false;\n        } else {\n          if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {\n            skipCorrection += groupInfo.count - 1;\n            collapsedGroups.push(groupInfo);\n            collapsedItemsCount += groupInfo.count;\n          }\n        }\n      });\n      (0, _iterator.each)(collapsedGroups, function () {\n        loadOptions.filter = createNotGroupFilter(this.path, loadOptions, group);\n      });\n      options.storeLoadOptions = loadOptions;\n      options.collapsedGroups = collapsedGroups;\n      options.collapsedItemsCount = collapsedItemsCount;\n      options.skip = loadOptions.skip || 0;\n      options.skipFirstItem = skipFirstItem;\n      options.take = take;\n    },\n    handleDataLoaded: function (options, callBase) {\n      var that = this;\n      var data = options.data;\n      var collapsedGroups = options.collapsedGroups;\n      var groups = (0, _uiData_grid.normalizeSortingInfo)(options.group);\n      var groupCount = groups.length;\n\n      function appendCollapsedPath(data, path, groups, collapsedGroup, offset) {\n        if (!data || !path.length || !groups.length) {\n          return;\n        }\n\n        var keyValue;\n        var i;\n        var pathValue = (0, _data.toComparable)(path[0], true);\n\n        for (i = 0; i < data.length; i++) {\n          keyValue = (0, _data.toComparable)(data[i].key, true);\n\n          if (offset >= collapsedGroup.offset || pathValue === keyValue) {\n            break;\n          } else {\n            offset += getGroupCount(data[i], groups.length);\n          }\n        }\n\n        if (!data.length || pathValue !== keyValue) {\n          data.splice(i, 0, {\n            key: path[0],\n            items: [],\n            count: 1 === path.length ? collapsedGroup.count : void 0\n          });\n        }\n\n        appendCollapsedPath(data[i].items, path.slice(1), groups.slice(1), collapsedGroup, offset);\n      }\n\n      if (options.collapsedItemsCount && options.extra && options.extra.totalCount >= 0) {\n        options.extra.totalCount += options.collapsedItemsCount;\n      }\n\n      callBase(options);\n\n      if (groupCount) {\n        var query = (0, _query2.default)(data);\n        (0, _store_helper.multiLevelGroup)(query, groups).enumerate().done(function (groupedData) {\n          data = groupedData;\n        });\n\n        if (collapsedGroups) {\n          for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {\n            appendCollapsedPath(data, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options.skip);\n          }\n        }\n\n        if (!options.isCustomLoading) {\n          processGroupItems(that, data, [], options.skip, options.skipFirstItem, options.take);\n        }\n\n        options.data = data;\n      }\n    },\n    isGroupItemCountable: function (item) {\n      return null === item.items;\n    },\n    updateTotalItemsCount: function () {\n      var itemsCountCorrection = 0;\n      foreachCollapsedGroups(this, function (groupInfo) {\n        if (groupInfo.count) {\n          itemsCountCorrection -= groupInfo.count - 1;\n        }\n      });\n      this.callBase(itemsCountCorrection);\n    },\n    changeRowExpand: function (path) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();\n      var dataSourceItems = dataSource.items();\n      var offset = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());\n      var groupInfo = that.findGroupInfo(path);\n      var groupCountQuery;\n\n      if (groupInfo && !groupInfo.isExpanded) {\n        groupCountQuery = new _deferred.Deferred().resolve(groupInfo.count);\n      } else {\n        groupCountQuery = loadTotalCount(dataSource, {\n          filter: (0, _uiData_grid2.createGroupFilter)(path, {\n            filter: dataSource.filter(),\n            group: dataSource.group()\n          })\n        });\n      }\n\n      return (0, _deferred.when)(groupCountQuery).done(function (count) {\n        count = parseInt(count.length ? count[0] : count);\n\n        if (groupInfo) {\n          updateGroupOffsets(that, dataSourceItems, [], offset);\n          groupInfo.isExpanded = !groupInfo.isExpanded;\n          groupInfo.count = count;\n        } else {\n          groupInfo = {\n            offset: -1,\n            count: count,\n            path: path,\n            isExpanded: false\n          };\n          updateGroupOffsets(that, dataSourceItems, [], offset, groupInfo);\n\n          if (groupInfo.offset >= 0) {\n            that.addGroupInfo(groupInfo);\n          }\n        }\n\n        that.updateTotalItemsCount();\n      }).fail(function () {\n        dataSource._eventsStrategy.fireEvent(\"loadError\", arguments);\n      });\n    },\n    allowCollapseAll: function () {\n      return false;\n    },\n    refresh: function (options, operationTypes) {\n      var that = this;\n      var storeLoadOptions = options.storeLoadOptions;\n      var dataSource = that._dataSource;\n      this.callBase.apply(this, arguments);\n\n      if (operationTypes.reload) {\n        return foreachCollapsedGroups(that, function (groupInfo) {\n          var groupCountQuery = loadTotalCount(dataSource, {\n            filter: (0, _uiData_grid2.createGroupFilter)(groupInfo.path, storeLoadOptions)\n          });\n          var groupOffsetQuery = loadTotalCount(dataSource, {\n            filter: (0, _uiData_gridGrouping.createOffsetFilter)(groupInfo.path, storeLoadOptions)\n          });\n          return (0, _deferred.when)(groupOffsetQuery, groupCountQuery).done(function (offset, count) {\n            offset = parseInt(offset.length ? offset[0] : offset);\n            count = parseInt(count.length ? count[0] : count);\n            groupInfo.offset = offset;\n\n            if (groupInfo.count !== count) {\n              groupInfo.count = count;\n              that.updateTotalItemsCount();\n            }\n          });\n        }, true);\n      }\n    }\n  };\n}());","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/data_grid/ui.data_grid.grouping.expanded.js"],"names":["_data","require","_utils","_iterator","_extend","_store_helper","_uiData_grid","_uiData_gridGrouping","_uiData_grid2","_query","_query2","_interopRequireDefault","_deferred","obj","__esModule","loadTotalCount","dataSource","options","d","Deferred","loadOptions","extend","skip","take","requireTotalCount","load","done","data","extra","resolve","totalCount","fail","reject","bind","exports","GroupingHelper","inherit","foreachCollapsedGroups","that","callback","updateOffsets","foreachGroups","groupInfo","isExpanded","correctSkipLoadOption","skipCorrection","resultSkip","offset","count","processGroupItems","items","path","skipFirstItem","removeLastItemsCount","needRemoveFirstItem","i","length","item","push","key","findGroupInfo","collapsedItems","offsetInfo","isContinuation","isContinuationOnNextPage","pop","splice","pathEquals","path1","path2","keysEqual","updateGroupOffsets","additionalGroupInfo","removeGroupLoadOption","storeLoadOptions","group","groups","normalizeSortingInfo","sorts","sort","arrangeSortingInfo","createNotGroupFilter","filter","filterElement","j","selector","combineFilters","getGroupCount","groupCount","handleDataLoading","collapsedGroups","collapsedItemsCount","isCustomLoading","each","handleDataLoaded","callBase","appendCollapsedPath","collapsedGroup","keyValue","pathValue","toComparable","slice","query","default","multiLevelGroup","enumerate","groupedData","pathIndex","isGroupItemCountable","updateTotalItemsCount","itemsCountCorrection","changeRowExpand","_dataSource","beginPageIndex","pageIndex","dataSourceItems","pageSize","groupCountQuery","createGroupFilter","when","parseInt","addGroupInfo","_eventsStrategy","fireEvent","arguments","allowCollapseAll","refresh","operationTypes","apply","reload","groupOffsetQuery","createOffsetFilter"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.grouping.expanded.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _data = require(\"../../core/utils/data\");\r\nvar _utils = require(\"../../data/utils\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _store_helper = require(\"../../data/store_helper\");\r\nvar _uiData_grid = require(\"./ui.data_grid.core\");\r\nvar _uiData_gridGrouping = require(\"./ui.data_grid.grouping.core\");\r\nvar _uiData_grid2 = require(\"./ui.data_grid.utils\");\r\nvar _query = require(\"../../data/query\");\r\nvar _query2 = _interopRequireDefault(_query);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar loadTotalCount = function(dataSource, options) {\r\n    var d = new _deferred.Deferred;\r\n    var loadOptions = (0, _extend.extend)({\r\n        skip: 0,\r\n        take: 1,\r\n        requireTotalCount: true\r\n    }, options);\r\n    dataSource.load(loadOptions).done(function(data, extra) {\r\n        d.resolve(extra && extra.totalCount)\r\n    }).fail(d.reject.bind(d));\r\n    return d\r\n};\r\nexports.GroupingHelper = _uiData_gridGrouping.GroupingHelper.inherit(function() {\r\n    var foreachCollapsedGroups = function(that, callback, updateOffsets) {\r\n        return that.foreachGroups(function(groupInfo) {\r\n            if (!groupInfo.isExpanded) {\r\n                return callback(groupInfo)\r\n            }\r\n        }, false, false, updateOffsets, true)\r\n    };\r\n    var correctSkipLoadOption = function(that, skip) {\r\n        var skipCorrection = 0;\r\n        var resultSkip = skip || 0;\r\n        if (skip) {\r\n            foreachCollapsedGroups(that, function(groupInfo) {\r\n                if (groupInfo.offset - skipCorrection >= skip) {\r\n                    return false\r\n                }\r\n                skipCorrection += groupInfo.count - 1\r\n            });\r\n            resultSkip += skipCorrection\r\n        }\r\n        return resultSkip\r\n    };\r\n    var processGroupItems = function processGroupItems(that, items, path, offset, skipFirstItem, take) {\r\n        var removeLastItemsCount = 0;\r\n        var needRemoveFirstItem = false;\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (void 0 !== item.items) {\r\n                path.push(item.key);\r\n                var groupInfo = that.findGroupInfo(path);\r\n                if (groupInfo && !groupInfo.isExpanded) {\r\n                    item.collapsedItems = item.items;\r\n                    item.items = null;\r\n                    offset += groupInfo.count;\r\n                    take--;\r\n                    if (take < 0) {\r\n                        removeLastItemsCount++\r\n                    }\r\n                    if (skipFirstItem) {\r\n                        needRemoveFirstItem = true\r\n                    }\r\n                } else {\r\n                    if (item.items) {\r\n                        var offsetInfo = processGroupItems(that, item.items, path, offset, skipFirstItem, take);\r\n                        if (skipFirstItem) {\r\n                            if (offsetInfo.offset - offset > 1) {\r\n                                item.isContinuation = true\r\n                            } else {\r\n                                needRemoveFirstItem = true\r\n                            }\r\n                        }\r\n                        offset = offsetInfo.offset;\r\n                        take = offsetInfo.take;\r\n                        if (take < 0) {\r\n                            if (item.items.length) {\r\n                                item.isContinuationOnNextPage = true\r\n                            } else {\r\n                                removeLastItemsCount++\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                path.pop()\r\n            } else {\r\n                if (skipFirstItem) {\r\n                    needRemoveFirstItem = true\r\n                }\r\n                offset++;\r\n                take--;\r\n                if (take < 0) {\r\n                    removeLastItemsCount++\r\n                }\r\n            }\r\n            skipFirstItem = false\r\n        }\r\n        if (needRemoveFirstItem) {\r\n            items.splice(0, 1)\r\n        }\r\n        if (removeLastItemsCount) {\r\n            items.splice(-removeLastItemsCount, removeLastItemsCount)\r\n        }\r\n        return {\r\n            offset: offset,\r\n            take: take\r\n        }\r\n    };\r\n    var pathEquals = function(path1, path2) {\r\n        if (path1.length !== path2.length) {\r\n            return false\r\n        }\r\n        for (var i = 0; i < path1.length; i++) {\r\n            if (!(0, _utils.keysEqual)(null, path1[i], path2[i])) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    };\r\n    var updateGroupOffsets = function updateGroupOffsets(that, items, path, offset, additionalGroupInfo) {\r\n        if (!items) {\r\n            return\r\n        }\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (\"key\" in item && void 0 !== item.items) {\r\n                path.push(item.key);\r\n                if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {\r\n                    additionalGroupInfo.offset = offset\r\n                }\r\n                var groupInfo = that.findGroupInfo(path);\r\n                if (groupInfo && !item.isContinuation) {\r\n                    groupInfo.offset = offset\r\n                }\r\n                if (groupInfo && !groupInfo.isExpanded) {\r\n                    offset += groupInfo.count\r\n                } else {\r\n                    offset = updateGroupOffsets(that, item.items, path, offset, additionalGroupInfo)\r\n                }\r\n                path.pop()\r\n            } else {\r\n                offset++\r\n            }\r\n        }\r\n        return offset\r\n    };\r\n    var removeGroupLoadOption = function(storeLoadOptions, loadOptions) {\r\n        if (loadOptions.group) {\r\n            var groups = (0, _uiData_grid.normalizeSortingInfo)(loadOptions.group);\r\n            var sorts = (0, _uiData_grid.normalizeSortingInfo)(storeLoadOptions.sort);\r\n            storeLoadOptions.sort = (0, _store_helper.arrangeSortingInfo)(groups, sorts);\r\n            delete loadOptions.group\r\n        }\r\n    };\r\n    var createNotGroupFilter = function(path, storeLoadOptions, group) {\r\n        var groups = (0, _uiData_grid.normalizeSortingInfo)(group || storeLoadOptions.group);\r\n        var filter = [];\r\n        for (var i = 0; i < path.length; i++) {\r\n            var filterElement = [];\r\n            for (var j = 0; j <= i; j++) {\r\n                filterElement.push([groups[j].selector, i === j ? \"<>\" : \"=\", path[j]])\r\n            }\r\n            filter.push((0, _uiData_grid.combineFilters)(filterElement))\r\n        }\r\n        filter = (0, _uiData_grid.combineFilters)(filter, \"or\");\r\n        return (0, _uiData_grid.combineFilters)([filter, storeLoadOptions.filter])\r\n    };\r\n    var getGroupCount = function getGroupCount(item, groupCount) {\r\n        var count = item.count || item.items.length;\r\n        if (!item.count && groupCount > 1) {\r\n            count = 0;\r\n            for (var i = 0; i < item.items.length; i++) {\r\n                count += getGroupCount(item.items[i], groupCount - 1)\r\n            }\r\n        }\r\n        return count\r\n    };\r\n    return {\r\n        handleDataLoading: function(options) {\r\n            var that = this;\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var collapsedGroups = [];\r\n            var collapsedItemsCount = 0;\r\n            var skipFirstItem = false;\r\n            var take;\r\n            var group = options.loadOptions.group;\r\n            var skipCorrection = 0;\r\n            removeGroupLoadOption(storeLoadOptions, options.loadOptions);\r\n            options.group = options.group || group;\r\n            if (options.isCustomLoading) {\r\n                return\r\n            }\r\n            var loadOptions = (0, _extend.extend)({}, storeLoadOptions);\r\n            loadOptions.skip = correctSkipLoadOption(that, storeLoadOptions.skip);\r\n            if (loadOptions.skip && loadOptions.take && group) {\r\n                loadOptions.skip--;\r\n                loadOptions.take++;\r\n                skipFirstItem = true\r\n            }\r\n            if (loadOptions.take && group) {\r\n                take = loadOptions.take;\r\n                loadOptions.take++\r\n            }\r\n            foreachCollapsedGroups(that, function(groupInfo) {\r\n                if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {\r\n                    return false\r\n                } else {\r\n                    if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {\r\n                        skipCorrection += groupInfo.count - 1;\r\n                        collapsedGroups.push(groupInfo);\r\n                        collapsedItemsCount += groupInfo.count\r\n                    }\r\n                }\r\n            });\r\n            (0, _iterator.each)(collapsedGroups, function() {\r\n                loadOptions.filter = createNotGroupFilter(this.path, loadOptions, group)\r\n            });\r\n            options.storeLoadOptions = loadOptions;\r\n            options.collapsedGroups = collapsedGroups;\r\n            options.collapsedItemsCount = collapsedItemsCount;\r\n            options.skip = loadOptions.skip || 0;\r\n            options.skipFirstItem = skipFirstItem;\r\n            options.take = take\r\n        },\r\n        handleDataLoaded: function(options, callBase) {\r\n            var that = this;\r\n            var data = options.data;\r\n            var collapsedGroups = options.collapsedGroups;\r\n            var groups = (0, _uiData_grid.normalizeSortingInfo)(options.group);\r\n            var groupCount = groups.length;\r\n\r\n            function appendCollapsedPath(data, path, groups, collapsedGroup, offset) {\r\n                if (!data || !path.length || !groups.length) {\r\n                    return\r\n                }\r\n                var keyValue;\r\n                var i;\r\n                var pathValue = (0, _data.toComparable)(path[0], true);\r\n                for (i = 0; i < data.length; i++) {\r\n                    keyValue = (0, _data.toComparable)(data[i].key, true);\r\n                    if (offset >= collapsedGroup.offset || pathValue === keyValue) {\r\n                        break\r\n                    } else {\r\n                        offset += getGroupCount(data[i], groups.length)\r\n                    }\r\n                }\r\n                if (!data.length || pathValue !== keyValue) {\r\n                    data.splice(i, 0, {\r\n                        key: path[0],\r\n                        items: [],\r\n                        count: 1 === path.length ? collapsedGroup.count : void 0\r\n                    })\r\n                }\r\n                appendCollapsedPath(data[i].items, path.slice(1), groups.slice(1), collapsedGroup, offset)\r\n            }\r\n            if (options.collapsedItemsCount && options.extra && options.extra.totalCount >= 0) {\r\n                options.extra.totalCount += options.collapsedItemsCount\r\n            }\r\n            callBase(options);\r\n            if (groupCount) {\r\n                var query = (0, _query2.default)(data);\r\n                (0, _store_helper.multiLevelGroup)(query, groups).enumerate().done(function(groupedData) {\r\n                    data = groupedData\r\n                });\r\n                if (collapsedGroups) {\r\n                    for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {\r\n                        appendCollapsedPath(data, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options.skip)\r\n                    }\r\n                }\r\n                if (!options.isCustomLoading) {\r\n                    processGroupItems(that, data, [], options.skip, options.skipFirstItem, options.take)\r\n                }\r\n                options.data = data\r\n            }\r\n        },\r\n        isGroupItemCountable: function(item) {\r\n            return null === item.items\r\n        },\r\n        updateTotalItemsCount: function() {\r\n            var itemsCountCorrection = 0;\r\n            foreachCollapsedGroups(this, function(groupInfo) {\r\n                if (groupInfo.count) {\r\n                    itemsCountCorrection -= groupInfo.count - 1\r\n                }\r\n            });\r\n            this.callBase(itemsCountCorrection)\r\n        },\r\n        changeRowExpand: function(path) {\r\n            var that = this;\r\n            var dataSource = that._dataSource;\r\n            var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();\r\n            var dataSourceItems = dataSource.items();\r\n            var offset = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());\r\n            var groupInfo = that.findGroupInfo(path);\r\n            var groupCountQuery;\r\n            if (groupInfo && !groupInfo.isExpanded) {\r\n                groupCountQuery = (new _deferred.Deferred).resolve(groupInfo.count)\r\n            } else {\r\n                groupCountQuery = loadTotalCount(dataSource, {\r\n                    filter: (0, _uiData_grid2.createGroupFilter)(path, {\r\n                        filter: dataSource.filter(),\r\n                        group: dataSource.group()\r\n                    })\r\n                })\r\n            }\r\n            return (0, _deferred.when)(groupCountQuery).done(function(count) {\r\n                count = parseInt(count.length ? count[0] : count);\r\n                if (groupInfo) {\r\n                    updateGroupOffsets(that, dataSourceItems, [], offset);\r\n                    groupInfo.isExpanded = !groupInfo.isExpanded;\r\n                    groupInfo.count = count\r\n                } else {\r\n                    groupInfo = {\r\n                        offset: -1,\r\n                        count: count,\r\n                        path: path,\r\n                        isExpanded: false\r\n                    };\r\n                    updateGroupOffsets(that, dataSourceItems, [], offset, groupInfo);\r\n                    if (groupInfo.offset >= 0) {\r\n                        that.addGroupInfo(groupInfo)\r\n                    }\r\n                }\r\n                that.updateTotalItemsCount()\r\n            }).fail(function() {\r\n                dataSource._eventsStrategy.fireEvent(\"loadError\", arguments)\r\n            })\r\n        },\r\n        allowCollapseAll: function() {\r\n            return false\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            var that = this;\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var dataSource = that._dataSource;\r\n            this.callBase.apply(this, arguments);\r\n            if (operationTypes.reload) {\r\n                return foreachCollapsedGroups(that, function(groupInfo) {\r\n                    var groupCountQuery = loadTotalCount(dataSource, {\r\n                        filter: (0, _uiData_grid2.createGroupFilter)(groupInfo.path, storeLoadOptions)\r\n                    });\r\n                    var groupOffsetQuery = loadTotalCount(dataSource, {\r\n                        filter: (0, _uiData_gridGrouping.createOffsetFilter)(groupInfo.path, storeLoadOptions)\r\n                    });\r\n                    return (0, _deferred.when)(groupOffsetQuery, groupCountQuery).done(function(offset, count) {\r\n                        offset = parseInt(offset.length ? offset[0] : offset);\r\n                        count = parseInt(count.length ? count[0] : count);\r\n                        groupInfo.offset = offset;\r\n                        if (groupInfo.count !== count) {\r\n                            groupInfo.count = count;\r\n                            that.updateTotalItemsCount()\r\n                        }\r\n                    })\r\n                }, true)\r\n            }\r\n        }\r\n    }\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}