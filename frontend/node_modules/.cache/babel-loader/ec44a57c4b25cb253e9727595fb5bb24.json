{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.native.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar DateBoxStrategy = require(\"./ui.date_box.strategy\");\n\nvar support = require(\"../../core/utils/support\");\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar dateUtils = require(\"./ui.date_utils\");\n\nvar dateSerialization = require(\"../../core/utils/date_serialization\");\n\nvar NativeStrategy = DateBoxStrategy.inherit({\n  NAME: \"Native\",\n  popupConfig: noop,\n  getParsedText: function (text, format) {\n    if (!text) {\n      return null;\n    }\n\n    if (\"datetime\" === this.dateBox.option(\"type\")) {\n      return new Date(text.replace(/-/g, \"/\").replace(\"T\", \" \").split(\".\")[0]);\n    }\n\n    if (this._isTextInput()) {\n      return this.callBase(text, format);\n    } else {\n      return dateUtils.fromStandardDateFormat(text);\n    }\n  },\n  _isTextInput: function () {\n    return \"text\" === this.dateBox._input().prop(\"type\");\n  },\n  renderPopupContent: noop,\n  _getWidgetName: noop,\n  _getWidgetOptions: noop,\n  _getDateBoxType: function () {\n    var type = this.dateBox.option(\"type\");\n\n    if (inArray(type, dateUtils.SUPPORTED_FORMATS) === -1) {\n      type = \"date\";\n    } else {\n      if (\"datetime\" === type && !support.inputType(type)) {\n        type = \"datetime-local\";\n      }\n    }\n\n    return type;\n  },\n  customizeButtons: function () {\n    var dropDownButton = this.dateBox.getButton(\"dropDown\");\n\n    if (dropDownButton) {\n      dropDownButton.on(\"click\", function () {\n        this.dateBox._input().get(0).click();\n      }.bind(this));\n    }\n  },\n  getDefaultOptions: function () {\n    return {\n      mode: this._getDateBoxType()\n    };\n  },\n  getDisplayFormat: function (displayFormat) {\n    var type = this._getDateBoxType();\n\n    return displayFormat || dateUtils.FORMATS_MAP[type];\n  },\n  renderInputMinMax: function ($input) {\n    $input.attr({\n      min: dateSerialization.serializeDate(this.dateBox.dateOption(\"min\"), \"yyyy-MM-dd\"),\n      max: dateSerialization.serializeDate(this.dateBox.dateOption(\"max\"), \"yyyy-MM-dd\")\n    });\n  }\n});\nmodule.exports = NativeStrategy;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/date_box/ui.date_box.strategy.native.js"],"names":["noop","require","DateBoxStrategy","support","inArray","dateUtils","dateSerialization","NativeStrategy","inherit","NAME","popupConfig","getParsedText","text","format","dateBox","option","Date","replace","split","_isTextInput","callBase","fromStandardDateFormat","_input","prop","renderPopupContent","_getWidgetName","_getWidgetOptions","_getDateBoxType","type","SUPPORTED_FORMATS","inputType","customizeButtons","dropDownButton","getButton","on","get","click","bind","getDefaultOptions","mode","getDisplayFormat","displayFormat","FORMATS_MAP","renderInputMinMax","$input","attr","min","serializeDate","dateOption","max","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.native.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar noop = require(\"../../core/utils/common\").noop;\r\nvar DateBoxStrategy = require(\"./ui.date_box.strategy\");\r\nvar support = require(\"../../core/utils/support\");\r\nvar inArray = require(\"../../core/utils/array\").inArray;\r\nvar dateUtils = require(\"./ui.date_utils\");\r\nvar dateSerialization = require(\"../../core/utils/date_serialization\");\r\nvar NativeStrategy = DateBoxStrategy.inherit({\r\n    NAME: \"Native\",\r\n    popupConfig: noop,\r\n    getParsedText: function(text, format) {\r\n        if (!text) {\r\n            return null\r\n        }\r\n        if (\"datetime\" === this.dateBox.option(\"type\")) {\r\n            return new Date(text.replace(/-/g, \"/\").replace(\"T\", \" \").split(\".\")[0])\r\n        }\r\n        if (this._isTextInput()) {\r\n            return this.callBase(text, format)\r\n        } else {\r\n            return dateUtils.fromStandardDateFormat(text)\r\n        }\r\n    },\r\n    _isTextInput: function() {\r\n        return \"text\" === this.dateBox._input().prop(\"type\")\r\n    },\r\n    renderPopupContent: noop,\r\n    _getWidgetName: noop,\r\n    _getWidgetOptions: noop,\r\n    _getDateBoxType: function() {\r\n        var type = this.dateBox.option(\"type\");\r\n        if (inArray(type, dateUtils.SUPPORTED_FORMATS) === -1) {\r\n            type = \"date\"\r\n        } else {\r\n            if (\"datetime\" === type && !support.inputType(type)) {\r\n                type = \"datetime-local\"\r\n            }\r\n        }\r\n        return type\r\n    },\r\n    customizeButtons: function() {\r\n        var dropDownButton = this.dateBox.getButton(\"dropDown\");\r\n        if (dropDownButton) {\r\n            dropDownButton.on(\"click\", function() {\r\n                this.dateBox._input().get(0).click()\r\n            }.bind(this))\r\n        }\r\n    },\r\n    getDefaultOptions: function() {\r\n        return {\r\n            mode: this._getDateBoxType()\r\n        }\r\n    },\r\n    getDisplayFormat: function(displayFormat) {\r\n        var type = this._getDateBoxType();\r\n        return displayFormat || dateUtils.FORMATS_MAP[type]\r\n    },\r\n    renderInputMinMax: function($input) {\r\n        $input.attr({\r\n            min: dateSerialization.serializeDate(this.dateBox.dateOption(\"min\"), \"yyyy-MM-dd\"),\r\n            max: dateSerialization.serializeDate(this.dateBox.dateOption(\"max\"), \"yyyy-MM-dd\")\r\n        })\r\n    }\r\n});\r\nmodule.exports = NativeStrategy;\r\n"]},"metadata":{},"sourceType":"script"}