{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _double_click = require(\"../../events/double_click\");\n\nvar _double_click2 = _interopRequireDefault(_double_click);\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _utils = require(\"../../events/utils\");\n\nvar _dialog = require(\"../dialog\");\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _form = require(\"../form\");\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _hold = require(\"../../events/hold\");\n\nvar _hold2 = _interopRequireDefault(_hold);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _deferred2 = _interopRequireDefault(_deferred);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _common2 = _interopRequireDefault(_common);\n\nvar _icon = require(\"../../core/utils/icon\");\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _ui3 = require(\"../scroll_view/ui.scrollable\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar EDIT_FORM_CLASS = \"edit-form\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar READONLY_CLASS = \"readonly\";\nvar EDIT_POPUP_CLASS = \"edit-popup\";\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar LINK_CLASS = \"dx-link\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_ROW = \"dx-edit-row\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar SCROLLABLE_CONTAINER_CLASS = \"dx-scrollable-container\";\nvar BUTTON_CLASS = \"dx-button\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_REMOVED = \"dx-row-removed\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar CELL_HIGHLIGHT_OUTLINE = \"dx-highlight-outline\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nvar FOCUSABLE_ELEMENT_SELECTOR = \"[tabindex], \" + EDITORS_INPUT_SELECTOR;\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_CELL = \"cell\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\nvar POINTER_EVENTS_TARGET_CLASS = \"dx-pointer-events-target\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP];\nvar ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP];\nvar CELL_BASED_MODES = [EDIT_MODE_BATCH, EDIT_MODE_CELL];\nvar FORM_BASED_MODES = [EDIT_MODE_FORM, EDIT_MODE_POPUP];\nvar MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM];\nvar TARGET_COMPONENT_NAME = \"targetComponent\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  \"delete\": \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  \"delete\": \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  \"delete\": \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  \"delete\": \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_POPUP_OPTION_NAME = \"editing.popup\";\n\nvar createFailureHandler = function (deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar _getEditMode = function (that) {\n  var editMode = that.option(\"editing.mode\");\n\n  if (EDIT_MODES.indexOf(editMode) !== -1) {\n    return editMode;\n  }\n\n  return EDIT_MODE_ROW;\n};\n\nvar _isRowEditMode = function (that) {\n  var editMode = _getEditMode(that);\n\n  return ROW_BASED_MODES.indexOf(editMode) !== -1;\n};\n\nvar EditingController = _uiGrid_core2.default.ViewController.inherit(function () {\n  var getDefaultEditorTemplate = function (that) {\n    return function (container, options) {\n      var $editor = (0, _renderer2.default)(\"<div>\").appendTo(container);\n      that.getController(\"editorFactory\").createEditor($editor, (0, _extend.extend)({}, options.column, {\n        value: options.value,\n        setValue: options.setValue,\n        row: options.row,\n        parentType: \"dataRow\",\n        width: null,\n        readOnly: !options.setValue,\n        isOnForm: options.isOnForm,\n        id: options.id\n      }));\n    };\n  };\n\n  var getEditingTexts = function (options) {\n    var editingTexts = options.component.option(\"editing.texts\") || {};\n    return {\n      save: editingTexts.saveRowChanges,\n      cancel: editingTexts.cancelRowChanges,\n      edit: editingTexts.editRow,\n      undelete: editingTexts.undeleteRow,\n      \"delete\": editingTexts.deleteRow,\n      add: editingTexts.addRowToNode\n    };\n  };\n\n  var getButtonIndex = function (buttons, name) {\n    var result = -1;\n    buttons.some(function (button, index) {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return _type2.default.isObject(button) ? button.name : button;\n  }\n\n  var getEditorType = function (item) {\n    var column = item.column;\n    return item.isCustomEditorType ? item.editorType : column.formItem && column.formItem.editorType;\n  };\n\n  var forEachFormItems = function forEachFormItems(items, callBack) {\n    items.forEach(function (item) {\n      if (item.items || item.tabs) {\n        forEachFormItems(item.items || item.tabs, callBack);\n      } else {\n        callBack(item);\n      }\n    });\n  };\n\n  return {\n    init: function () {\n      var that = this;\n      that._editRowIndex = -1;\n      that._editData = [];\n      that._editColumnIndex = -1;\n      that._columnsController = that.getController(\"columns\");\n      that._dataController = that.getController(\"data\");\n      that._rowsView = that.getView(\"rowsView\");\n      that._editForm = null;\n      that._updateEditFormDeferred = null;\n      that._lastOperation = null;\n\n      if (that._deferreds) {\n        that._deferreds.forEach(function (d) {\n          return d.reject(\"cancel\");\n        });\n      }\n\n      that._deferreds = [];\n\n      if (!that._dataChangedHandler) {\n        that._dataChangedHandler = that._handleDataChanged.bind(that);\n\n        that._dataController.changed.add(that._dataChangedHandler);\n      }\n\n      if (!that._saveEditorHandler) {\n        that.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        var $pointerDownTarget;\n        var isResizing;\n\n        that._pointerUpEditorHandler = function () {\n          var _that$getController;\n\n          isResizing = null === (_that$getController = that.getController(\"columnsResizer\")) || void 0 === _that$getController ? void 0 : _that$getController.isResizing();\n        };\n\n        that._pointerDownEditorHandler = function (e) {\n          return $pointerDownTarget = (0, _renderer2.default)(e.target);\n        };\n\n        that._saveEditorHandler = that.createAction(function (e) {\n          var event = e.event;\n          var $target = (0, _renderer2.default)(event.target);\n          var targetComponent = event[TARGET_COMPONENT_NAME];\n\n          if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\n            return;\n          }\n\n          function checkEditorPopup($element) {\n            return $element && !!$element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n          }\n\n          if (!_isRowEditMode(that) && !that._editCellInProgress) {\n            var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\n            var isDomElement = !!$target.closest((0, _window.getWindow)().document).length;\n            var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== that.component;\n            var isAddRowButton = !!$target.closest(\".\".concat(that.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\n            var isFocusOverlay = $target.hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n            var isCellEditMode = _getEditMode(that) === EDIT_MODE_CELL;\n\n            if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && that.isEditing()) && (isDomElement || isAnotherComponent)) {\n              that._closeEditItem.bind(that)($target);\n            }\n          }\n        });\n\n        _events_engine2.default.on(_dom_adapter2.default.getDocument(), _pointer2.default.up, that._pointerUpEditorHandler);\n\n        _events_engine2.default.on(_dom_adapter2.default.getDocument(), _pointer2.default.down, that._pointerDownEditorHandler);\n\n        _events_engine2.default.on(_dom_adapter2.default.getDocument(), _click2.default.name, that._saveEditorHandler);\n      }\n\n      that._updateEditColumn();\n\n      that._updateEditButtons();\n    },\n    getUpdatedData: function (data) {\n      var key = this._dataController.keyOf(data);\n\n      var editData = this._editData;\n      var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, editData);\n\n      if (editData[editIndex]) {\n        return (0, _uiGrid_core3.createObjectWithChanges)(data, editData[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function () {\n      return this._editData.filter(function (editData) {\n        return editData.data && editData.type === DATA_EDIT_DATA_INSERT_TYPE;\n      }).map(function (editData) {\n        return editData.data;\n      });\n    },\n    getRemovedData: function () {\n      return this._editData.filter(function (editData) {\n        return editData.oldData && editData.type === DATA_EDIT_DATA_REMOVE_TYPE;\n      }).map(function (editData) {\n        return editData.oldData;\n      });\n    },\n    _fireDataErrorOccurred: function (arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: function ($targetElement) {\n      var $element = this.component.$element();\n      var result = this.isEditing();\n      var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n\n      if (isCurrentComponentElement) {\n        var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\n\n        if (isDataRow) {\n          var rowsView = this.getView(\"rowsView\");\n          var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\n          var rowIndex = rowsView.getRowIndex($targetCell.parent());\n          var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\n\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\n          result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex);\n        }\n      }\n\n      return result;\n    },\n    _closeEditItem: function ($targetElement) {\n      if (this._needToCloseEditableCell($targetElement)) {\n        this.closeEditCell();\n      }\n    },\n    _handleDataChanged: function (args) {\n      var that = this;\n      var editForm = that._editForm;\n\n      if (\"standard\" === that.option(\"scrolling.mode\")) {\n        that.resetRowAndPageIndices();\n      }\n\n      if (\"prepend\" === args.changeType) {\n        (0, _iterator.each)(that._editData, function (_, editData) {\n          editData.rowIndex += args.items.length;\n        });\n      }\n\n      if (\"refresh\" === args.changeType && _getEditMode(that) === EDIT_MODE_POPUP && editForm && editForm.option(\"visible\")) {\n        this._repaintEditPopup();\n      }\n    },\n    _isDefaultButtonVisible: function (button, options) {\n      var result = true;\n\n      var isRowMode = _isRowEditMode(this);\n\n      var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex() && isRowMode;\n\n      switch (button.name) {\n        case \"edit\":\n          result = !isEditRow && this.allowUpdating(options) && isRowMode;\n          break;\n\n        case \"save\":\n        case \"cancel\":\n          result = isEditRow;\n          break;\n\n        case \"delete\":\n          result = !isEditRow && this.allowDeleting(options) && !options.row.removed;\n          break;\n\n        case \"undelete\":\n          result = this.allowDeleting(options) && options.row.removed;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function (button, options) {\n      var visible = button.visible;\n\n      if (!_type2.default.isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return _type2.default.isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _getButtonConfig: function (button, options) {\n      var _this = this;\n\n      var config = _type2.default.isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n      var editingTexts = getEditingTexts(options);\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return (0, _extend.extend)({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName],\n        onClick: function (e) {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(function () {\n            options.row && allowAction && _this[methodName] && _this[methodName](options.row.rowIndex);\n          });\n        }\n      }, config);\n    },\n    _getEditingButtons: function (options) {\n      var _this2 = this;\n\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(function (button) {\n        return _this2._getButtonConfig(button, options);\n      });\n    },\n    _renderEditingButtons: function ($container, buttons, options) {\n      var _this3 = this;\n\n      buttons.forEach(function (button) {\n        if (_this3._isButtonVisible(button, options)) {\n          _this3._createButton($container, button, options);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function () {\n      var _this4 = this;\n\n      return function (container, options) {\n        var $container = (0, _renderer2.default)(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = _this4._getEditingButtons(options);\n\n          _this4._renderEditingButtons($container, buttons, options);\n\n          options.watch && options.watch(function () {\n            return buttons.map(function (button) {\n              return _this4._isButtonVisible(button, options);\n            });\n          }, function () {\n            $container.empty();\n\n            _this4._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          (0, _uiGrid_core3.setEmptyText)($container);\n        }\n      };\n    },\n    correctEditRowIndexAfterExpand: function (key) {\n      if (this._editRowIndex > this._dataController.getRowIndexByKey(key)) {\n        this._editRowIndex++;\n      }\n    },\n    correctEditRowIndex: function (getRowIndexCorrection) {\n      this._editRowIndex += getRowIndexCorrection(this._getVisibleEditRowIndex());\n    },\n    isRowEditMode: function () {\n      return _isRowEditMode(this);\n    },\n    isFormEditMode: function () {\n      var editMode = _getEditMode(this);\n\n      return FORM_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    isCellOrBatchEditMode: function () {\n      var editMode = this.getEditMode();\n      return editMode === EDIT_MODE_BATCH || editMode === EDIT_MODE_CELL;\n    },\n    getEditMode: function () {\n      return _getEditMode(this);\n    },\n    getFirstEditableColumnIndex: function () {\n      var columnsController = this.getController(\"columns\");\n      var firstFormItem = this._firstFormItem;\n      var columnIndex;\n\n      if (_getEditMode(this) === EDIT_MODE_FORM && firstFormItem) {\n        var $editFormElements = this._rowsView.getCellElements(this._editRowIndex);\n\n        columnIndex = this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n      } else {\n        var visibleColumns = columnsController.getVisibleColumns();\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          if (column.allowEditing) {\n            columnIndex = index;\n            return false;\n          }\n        });\n      }\n\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function (rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function (rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function (key, items) {\n      return (0, _uiGrid_core3.getIndexByKey)(key, items);\n    },\n    hasChanges: function (rowIndex) {\n      var that = this;\n      var result = false;\n\n      for (var i = 0; i < that._editData.length; i++) {\n        if (that._editData[i].type && (!_type2.default.isDefined(rowIndex) || that._dataController.getRowIndexByKey(that._editData[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function () {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n\n      _events_engine2.default.off(_dom_adapter2.default.getDocument(), _pointer2.default.up, this._pointerUpEditorHandler);\n\n      _events_engine2.default.off(_dom_adapter2.default.getDocument(), _pointer2.default.down, this._pointerDownEditorHandler);\n\n      _events_engine2.default.off(_dom_adapter2.default.getDocument(), _click2.default.name, this._saveEditorHandler);\n    },\n    optionChanged: function (args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n        var editPopup = this._editPopup;\n\n        if (fullName && 0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\n          if (editPopup) {\n            var popupOptionName = fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\n\n            if (popupOptionName) {\n              editPopup.option(popupOptionName, args.value);\n            } else {\n              editPopup.option(args.value);\n            }\n          }\n        } else {\n          if (editPopup && editPopup.option(\"visible\") && 0 === fullName.indexOf(\"editing.form\")) {\n            this._repaintEditPopup();\n          } else {\n            this.init();\n          }\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    publicMethods: function () {\n      return [\"insertRow\", \"addRow\", \"removeRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"editCell\", \"closeEditCell\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function (isPageChanged) {\n      var editMode = _getEditMode(this);\n\n      var needResetIndexes = editMode === EDIT_MODE_BATCH || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\n\n      if (editMode !== EDIT_MODE_BATCH && editMode !== EDIT_MODE_CELL) {\n        this.init();\n      } else {\n        if (needResetIndexes) {\n          this._editRowIndex = -1;\n          this._editColumnIndex = -1;\n        }\n      }\n    },\n    isEditing: function () {\n      return this._editRowIndex > -1;\n    },\n    isEditRow: function (rowIndex) {\n      var editMode = _getEditMode(this);\n\n      return this._getVisibleEditRowIndex() === rowIndex && ROW_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    getEditRowKey: function () {\n      var items = this._dataController.items();\n\n      var item = items[this._getVisibleEditRowIndex()];\n\n      return item && item.key;\n    },\n    getEditRowIndex: function () {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function () {\n      var editMode = _getEditMode(this);\n\n      return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP ? this._getVisibleEditRowIndex() : -1;\n    },\n    isEditCell: function (visibleRowIndex, columnIndex) {\n      var hasEditData = !!(Array.isArray(this._editData) && this._editData.length);\n      return hasEditData && this._getVisibleEditRowIndex() === visibleRowIndex && this._editColumnIndex === columnIndex;\n    },\n    getPopupContent: function () {\n      var editMode = _getEditMode(this);\n\n      var popupVisible = this._editPopup && this._editPopup.option(\"visible\");\n\n      if (editMode === EDIT_MODE_POPUP && popupVisible) {\n        return this._$popupContent;\n      }\n    },\n    getEditForm: function () {\n      return this._editForm;\n    },\n    _needInsertItem: function (editData, changeType) {\n      var that = this;\n\n      var dataSource = that._dataController.dataSource();\n\n      var scrollingMode = that.option(\"scrolling.mode\");\n      var pageIndex = dataSource.pageIndex();\n      var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex;\n      var endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\n\n      if (\"standard\" !== scrollingMode) {\n        switch (changeType) {\n          case \"append\":\n            return editData.key.pageIndex === endPageIndex;\n\n          case \"prepend\":\n            return editData.key.pageIndex === beginPageIndex;\n\n          case \"refresh\":\n            editData.key.rowIndex = 0;\n            editData.key.dataRowIndex = 0;\n            editData.key.pageIndex = 0;\n            break;\n\n          default:\n            return editData.key.pageIndex >= beginPageIndex && editData.key.pageIndex <= endPageIndex;\n        }\n      }\n\n      return editData.key.pageIndex === pageIndex;\n    },\n    _generateNewItem: function (key) {\n      var item = {\n        key: key\n      };\n\n      if (key && key[INSERT_INDEX]) {\n        item[INSERT_INDEX] = key[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    processItems: function (items, change) {\n      var changeType = change.changeType;\n      var dataController = this._dataController;\n      var dataRowIndex = -1;\n      this.update(changeType);\n      var editData = this._editData;\n\n      for (var i = 0; i < editData.length; i++) {\n        var key = editData[i].key;\n\n        if (key) {\n          var rowIndexOffset = dataController.getRowIndexOffset();\n          dataRowIndex = key.dataRowIndex - rowIndexOffset + dataController.getRowIndexDelta();\n\n          if (\"append\" === changeType) {\n            dataRowIndex -= dataController.items(true).length;\n\n            if (change.removeCount) {\n              dataRowIndex += change.removeCount;\n            }\n          }\n\n          var item = this._generateNewItem(key);\n\n          if (dataRowIndex >= 0 && editData[i].type === DATA_EDIT_DATA_INSERT_TYPE && this._needInsertItem(editData[i], changeType, items, item)) {\n            items.splice(key.dataRowIndex ? dataRowIndex : 0, 0, item);\n          }\n        }\n      }\n\n      return items;\n    },\n    processDataItem: function (item, options, generateDataValues) {\n      var that = this;\n      var data;\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        var editMode = _getEditMode(that);\n\n        var editData = that._editData[editIndex];\n        data = editData.data;\n\n        switch (editData.type) {\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            if (editMode === EDIT_MODE_POPUP) {\n              item.visible = false;\n            }\n\n            item.isNewRow = true;\n            item.key = key;\n            item.data = data;\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            item.modified = true;\n            item.oldData = item.data;\n            item.data = (0, _uiGrid_core3.createObjectWithChanges)(item.data, data);\n            item.modifiedValues = generateDataValues(data, columns, true);\n            break;\n\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            if (editMode === EDIT_MODE_BATCH) {\n              item.data = (0, _uiGrid_core3.createObjectWithChanges)(item.data, data);\n            }\n\n            item.removed = true;\n        }\n      }\n    },\n    insertRow: function () {\n      _ui2.default.log(\"W0002\", \"dxDataGrid\", \"insertRow\", \"15.2\", \"Use the 'addRow' method instead\");\n\n      return this.addRow();\n    },\n    _initNewRow: function (options) {\n      var _this5 = this;\n\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new _deferred.Deferred();\n        (0, _deferred.when)((0, _deferred.fromPromise)(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this5._fireDataErrorOccurred(arg);\n        });\n        return deferred;\n      }\n    },\n    _getInsertKey: function (parentKey) {\n      var that = this;\n      var dataController = that._dataController;\n      var rows = dataController.items();\n\n      var editMode = _getEditMode(that);\n\n      var insertKey = {\n        parentKey: parentKey,\n        pageIndex: dataController.pageIndex(),\n        rowIndex: that._getInsertRowIndex(parentKey)\n      };\n      var row = rows[insertKey.rowIndex];\n\n      if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n        insertKey.rowIndex++;\n      }\n\n      insertKey.dataRowIndex = dataController.getRowIndexOffset() + rows.filter(function (row, index) {\n        return index < insertKey.rowIndex && (\"data\" === row.rowType || \"group\" === row.rowType || row.isNewRow);\n      }).length;\n\n      if (editMode !== EDIT_MODE_BATCH) {\n        that._editRowIndex = insertKey.rowIndex + that._dataController.getRowIndexOffset();\n      }\n\n      insertKey[INSERT_INDEX] = that._getInsertIndex();\n      return insertKey;\n    },\n    _getInsertRowIndex: function (parentKey) {\n      var that = this;\n      var rowsView = that.getView(\"rowsView\");\n\n      var parentRowIndex = that._dataController.getRowIndexByKey(parentKey);\n\n      if (parentRowIndex >= 0) {\n        return parentRowIndex + 1;\n      }\n\n      if (rowsView) {\n        return rowsView.getTopVisibleItemIndex(true);\n      }\n\n      return 0;\n    },\n    _getInsertIndex: function () {\n      var maxInsertIndex = 0;\n\n      this._editData.forEach(function (editItem) {\n        if (editItem.type === DATA_EDIT_DATA_INSERT_TYPE && editItem.key[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = editItem.key[INSERT_INDEX];\n        }\n      });\n\n      return maxInsertIndex + 1;\n    },\n    addRow: function (parentKey) {\n      var that = this;\n      var dataController = that._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var editMode = _getEditMode(that);\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var deferred = new _deferred.Deferred();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return deferred.reject();\n      }\n\n      if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\n        that.saveEditData().done(function () {\n          if (!that.hasChanges()) {\n            that.addRow(parentKey).done(deferred.resolve).fail(deferred.reject);\n          } else {\n            deferred.reject(\"cancel\");\n          }\n        });\n        return deferred.promise();\n      }\n\n      that.refresh();\n\n      if (!that._allowRowAdding()) {\n        return deferred.reject(\"cancel\");\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new _guid2.default());\n      }\n\n      (0, _deferred.when)(that._initNewRow(param, parentKey)).done(function () {\n        if (that._allowRowAdding()) {\n          that._addRowCore(param.data, parentKey, oldEditRowIndex);\n\n          deferred.resolve();\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function () {\n      var that = this;\n\n      var editMode = _getEditMode(that);\n\n      var insertIndex = that._getInsertIndex();\n\n      if (editMode !== EDIT_MODE_BATCH && insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function (data, parentKey, initialOldEditRowIndex) {\n      var that = this;\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var insertKey = that._getInsertKey(parentKey);\n\n      var editMode = _getEditMode(that);\n\n      that._addEditData({\n        key: insertKey,\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      });\n\n      that._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [initialOldEditRowIndex, oldEditRowIndex, insertKey.rowIndex]\n      });\n\n      if (editMode === EDIT_MODE_POPUP) {\n        that._showEditPopup(insertKey.rowIndex);\n      } else {\n        that._focusFirstEditableCellInRow(insertKey.rowIndex);\n      }\n\n      that._afterInsertRow({\n        key: insertKey,\n        data: data\n      });\n    },\n    _focusFirstEditableCellInRow: function (rowIndex) {\n      var that = this;\n      var $firstCell = that.getFirstEditableCellInRow(rowIndex);\n      that._editCellInProgress = true;\n\n      that._delayedInputFocus($firstCell, function () {\n        that._editCellInProgress = false;\n        var $cell = that.getFirstEditableCellInRow(rowIndex);\n        var eventToTrigger = \"dblClick\" === that.option(\"editing.startEditAction\") ? _double_click2.default.name : _click2.default.name;\n        $cell && _events_engine2.default.trigger($cell, eventToTrigger);\n      });\n    },\n    _isEditingStart: function (options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeEditCell: function (rowIndex, columnIndex, item) {\n      var that = this;\n\n      if (_getEditMode(that) === EDIT_MODE_CELL && !item.isNewRow && that.hasChanges()) {\n        var d = new _deferred.Deferred();\n        that.saveEditData().always(function () {\n          d.resolve(that.hasChanges());\n        });\n        return d;\n      }\n    },\n    _beforeUpdateItems: function () {},\n    _getVisibleEditRowIndex: function () {\n      return this._editRowIndex >= 0 ? this._editRowIndex - this._dataController.getRowIndexOffset() : -1;\n    },\n    editRow: function (rowIndex) {\n      var that = this;\n      var dataController = that._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var $editingCell;\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldEditRowIndex) {\n        return true;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (that._isEditingStart(params)) {\n        return;\n      }\n\n      that.init();\n      that._pageIndex = dataController.pageIndex();\n      that._editRowIndex = (items[0].isNewRow ? rowIndex - 1 : rowIndex) + that._dataController.getRowIndexOffset();\n\n      that._addEditData({\n        data: {},\n        key: item.key,\n        oldData: item.data\n      });\n\n      var rowIndices = [oldEditRowIndex, rowIndex];\n\n      var editMode = _getEditMode(that);\n\n      that._beforeUpdateItems(rowIndices, rowIndex, oldEditRowIndex);\n\n      if (editMode === EDIT_MODE_POPUP) {\n        that._showEditPopup(rowIndex);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: rowIndices\n        });\n      }\n\n      if (MODES_WITH_DELAYED_FOCUS.indexOf(editMode) !== -1) {\n        $editingCell = that.getFocusedCellInRow(that._getVisibleEditRowIndex());\n\n        that._delayedInputFocus($editingCell, function () {\n          $editingCell && that.component.focus($editingCell);\n        });\n      }\n    },\n    _showEditPopup: function (rowIndex, repaintForm) {\n      var that = this;\n\n      var isMobileDevice = \"desktop\" !== _devices2.default.current().deviceType;\n\n      var popupOptions = (0, _extend.extend)({\n        showTitle: false,\n        fullScreen: isMobileDevice,\n        toolbarItems: [{\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: that._getSaveButtonConfig()\n        }, {\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: that._getCancelButtonConfig()\n        }],\n        contentTemplate: that._getPopupEditFormTemplate(rowIndex)\n      }, that.option(EDITING_POPUP_OPTION_NAME));\n\n      if (!that._editPopup) {\n        var $popupContainer = (0, _renderer2.default)(\"<div>\").appendTo(that.component.$element()).addClass(that.addWidgetPrefix(EDIT_POPUP_CLASS));\n        that._editPopup = that._createComponent($popupContainer, _popup2.default, {});\n\n        that._editPopup.on(\"hiding\", that._getEditPopupHiddenHandler());\n\n        that._editPopup.on(\"shown\", function (e) {\n          _events_engine2.default.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\" + SCROLLABLE_CONTAINER_CLASS).first(), \"focus\");\n\n          if (repaintForm) {\n            that._editForm && that._editForm.repaint();\n          }\n        });\n      }\n\n      that._editPopup.option(popupOptions);\n\n      that._editPopup.show();\n    },\n    _repaintEditPopup: function () {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      if (this._editPopup && this._editPopup.option(\"visible\") && rowIndex >= 0) {\n        var defaultAnimation = this._editPopup.option(\"animation\");\n\n        this._editPopup.option(\"animation\", null);\n\n        this._showEditPopup(rowIndex, true);\n\n        this._editPopup.option(\"animation\", defaultAnimation);\n      }\n    },\n    _getEditPopupHiddenHandler: function () {\n      var that = this;\n      return function (e) {\n        if (that.isEditing()) {\n          that.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: function (rowIndex) {\n      var that = this;\n      var row = that.component.getVisibleRows()[rowIndex];\n      var templateOptions = {\n        row: row,\n        rowType: row.rowType,\n        key: row.key\n      };\n      return function (container) {\n        var formTemplate = that.getEditFormTemplate();\n\n        var scrollable = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo(container), _ui4.default);\n\n        that._$popupContent = scrollable.$content();\n        formTemplate(that._$popupContent, templateOptions, true);\n      };\n    },\n    _getSaveButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeEditDataItem: function (index) {\n      if (index >= 0) {\n        this._editData.splice(index, 1);\n      }\n    },\n    executeOperation: function (deferred, func) {\n      var _this6 = this;\n\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(function () {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        _this6._lastOperation = null;\n      }).fail(function () {\n        deferred.reject();\n        _this6._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function () {\n      return _deferred.when.apply(void 0, _toConsumableArray(this._deferreds));\n    },\n    editCell: function (rowIndex, columnIndex) {\n      var _this7 = this;\n\n      var d = new _deferred.Deferred();\n      var coreResult;\n      this.executeOperation(d, function () {\n        coreResult = _this7._editCellCore(rowIndex, columnIndex);\n        (0, _deferred.when)(coreResult).done(d.resolve).fail(d.reject);\n      });\n      return void 0 !== coreResult ? coreResult : d.promise();\n    },\n    _editCellCore: function (rowIndex, columnIndex) {\n      var that = this;\n      var columnsController = that._columnsController;\n      var dataController = that._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var visibleColumns = columnsController.getVisibleColumns();\n      var oldColumn = visibleColumns[that._editColumnIndex];\n\n      if (_type2.default.isString(columnIndex)) {\n        columnIndex = columnsController.columnOption(columnIndex, \"index\");\n        columnIndex = columnsController.getVisibleIndex(columnIndex);\n      }\n\n      var column = params.column = visibleColumns[columnIndex];\n\n      if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && !_isRowEditMode(that)) {\n        if (that.isEditCell(rowIndex, columnIndex)) {\n          return true;\n        }\n\n        var editRowIndex = rowIndex + dataController.getRowIndexOffset();\n        return (0, _deferred.when)(that._beforeEditCell(rowIndex, columnIndex, item)).done(function (cancel) {\n          if (cancel) {\n            return;\n          }\n\n          if (that._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n            _common2.default.deferRender(function () {\n              that._repaintEditCell(column, oldColumn, oldEditRowIndex);\n            });\n          } else {\n            that._processCanceledEditingCell();\n          }\n        });\n      }\n\n      return false;\n    },\n    _processCanceledEditingCell: function () {},\n    _prepareEditCell: function (params, item, editColumnIndex, editRowIndex) {\n      var that = this;\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (that._isEditingStart(params)) {\n        return false;\n      }\n\n      that._editRowIndex = editRowIndex;\n      that._editColumnIndex = editColumnIndex;\n      that._pageIndex = that._dataController.pageIndex();\n\n      that._addEditData({\n        data: {},\n        key: item.key,\n        oldData: item.data\n      });\n\n      return true;\n    },\n    _repaintEditCell: function (column, oldColumn, oldEditRowIndex) {\n      var that = this;\n      var rowsView = that._rowsView;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        that._editCellInProgress = true;\n        that.getController(\"editorFactory\").loseFocus();\n\n        that._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, that._getVisibleEditRowIndex()]\n        });\n      }\n\n      var $cell = rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), that._editColumnIndex);\n\n      if ($cell && !$cell.find(\":focus\").length) {\n        that._focusEditingCell(function () {\n          that._editCellInProgress = false;\n        }, $cell, true);\n      } else {\n        that._editCellInProgress = false;\n      }\n    },\n    _delayedInputFocus: function ($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var that = this;\n\n      function inputFocus() {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          (0, _uiGrid_core3.focusAndSelectElement)(that, $focusableElement);\n        }\n\n        that._beforeFocusCallback = null;\n      }\n\n      if (_devices2.default.real().ios || _devices2.default.real().android) {\n        inputFocus();\n      } else {\n        if (that._beforeFocusCallback) {\n          that._beforeFocusCallback();\n        }\n\n        clearTimeout(that._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          that._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        that._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function (beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var that = this;\n      var rowsView = that.getView(\"rowsView\");\n      $editCell = $editCell || rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), that._editColumnIndex);\n\n      that._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n    },\n    removeRow: function (rowIndex) {\n      _ui2.default.log(\"W0002\", \"dxDataGrid\", \"removeRow\", \"15.2\", \"Use the 'deleteRow' method instead\");\n\n      return this.deleteRow(rowIndex);\n    },\n    deleteRow: function (rowIndex) {\n      var _this8 = this;\n\n      if (\"cell\" === this.option(\"editing.mode\") && this.isEditing()) {\n        var isNewRow = this._dataController.items()[rowIndex].isNewRow;\n\n        this.closeEditCell(null, isNewRow).always(function () {\n          _this8._checkAndDeleteRow(rowIndex);\n        });\n      } else {\n        this._checkAndDeleteRow(rowIndex);\n      }\n    },\n    _checkAndDeleteRow: function (rowIndex) {\n      var that = this;\n      var editingOptions = that.option(\"editing\");\n      var editingTexts = editingOptions && editingOptions.texts;\n      var isBatchMode = editingOptions && editingOptions.mode === EDIT_MODE_BATCH;\n      var confirmDelete = editingOptions && editingOptions.confirmDelete;\n      var confirmDeleteMessage = editingTexts && editingTexts.confirmDeleteMessage;\n\n      var item = that._dataController.items()[rowIndex];\n\n      var allowDeleting = isBatchMode || !that.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (isBatchMode || !confirmDelete || !confirmDeleteMessage) {\n          that._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = _type2.default.isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n\n          _dialog2.default.confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function (confirmResult) {\n            if (confirmResult) {\n              that._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var isBatchMode = this.option(\"editing.mode\") === EDIT_MODE_BATCH;\n      this.refresh();\n      var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, this._editData);\n\n      if (editIndex >= 0) {\n        if (this._editData[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeEditDataItem(editIndex);\n        } else {\n          this._addEditData({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addEditData({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      if (isBatchMode) {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, rowIndex]\n        });\n      } else {\n        this.saveEditData();\n      }\n    },\n    undeleteRow: function (rowIndex) {\n      var that = this;\n      var dataController = that._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n\n      if (item) {\n        var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n\n        if (editIndex >= 0) {\n          var editData = that._editData[editIndex];\n\n          if (_type2.default.isEmptyObject(editData.data)) {\n            that._removeEditDataItem(editIndex);\n          } else {\n            that._addEditData({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _saveEditDataCore: function (deferreds, results, changes) {\n      var that = this;\n\n      var store = that._dataController.store();\n\n      var isDataSaved = true;\n\n      function executeEditingAction(actionName, params, func) {\n        var deferred = new _deferred.Deferred();\n        that.executeAction(actionName, params);\n        (0, _deferred.when)((0, _deferred.fromPromise)(params.cancel)).done(function (cancel) {\n          if (cancel) {\n            setTimeout(function () {\n              deferred.resolve(\"cancel\");\n            });\n          } else {\n            func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n          }\n        }).fail(createFailureHandler(deferred));\n        return deferred;\n      }\n\n      (0, _iterator.each)(that._editData, function (index, editData) {\n        var data = editData.data;\n        var oldData = editData.oldData;\n        var type = editData.type;\n        var deferred;\n        var params;\n\n        if (that._beforeSaveEditData(editData, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: editData.key,\n              cancel: false\n            };\n            deferred = executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(editData.key).done(function (key) {\n                changes.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (_type2.default.isDefined(key)) {\n                  editData.key = key;\n                }\n\n                if (data && _type2.default.isObject(data) && data !== params.data) {\n                  editData.data = data;\n                }\n\n                changes.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: editData.key,\n              cancel: false\n            };\n            deferred = executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(editData.key, params.newData).done(function (data, key) {\n                if (data && _type2.default.isObject(data) && data !== params.newData) {\n                  editData.data = data;\n                }\n\n                changes.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        if (deferred) {\n          var doneDeferred = new _deferred.Deferred();\n          deferred.always(function (data) {\n            isDataSaved = \"cancel\" !== data;\n            results.push({\n              key: editData.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n      return isDataSaved;\n    },\n    _processSaveEditDataResult: function (results) {\n      var that = this;\n      var hasSavedData = false;\n\n      var editMode = _getEditMode(that);\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = (0, _uiGrid_core3.getIndexByKey)(results[i].key, that._editData);\n        var editData = that._editData[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (editData) {\n            editData.error = arg;\n          }\n\n          that._fireDataErrorOccurred(arg);\n\n          if (editMode !== EDIT_MODE_BATCH) {\n            if (editData && editData.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n              that._removeEditDataItem(editIndex);\n            }\n\n            break;\n          }\n        } else {\n          if (!cancel || !editData || editMode !== EDIT_MODE_BATCH && editData.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n            that._removeEditDataItem(editIndex);\n\n            hasSavedData = !cancel;\n          }\n        }\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function (editData) {\n      var that = this;\n      (0, _iterator.each)(editData, function (_, itemData) {\n        var data = itemData.data;\n        var key = itemData.key;\n        var type = itemData.type;\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (itemData.error) {\n          params.error = itemData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            that.executeAction(\"onRowRemoved\", (0, _extend.extend)({}, params, {\n              data: itemData.oldData\n            }));\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            that.executeAction(\"onRowInserted\", params);\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            that.executeAction(\"onRowUpdated\", params);\n        }\n      });\n    },\n    saveEditData: function () {\n      var _this9 = this;\n\n      var deferred = new _deferred.Deferred();\n\n      var afterSaveEditData = function (cancel) {\n        (0, _deferred.when)(_this9._afterSaveEditData(cancel)).done(function () {\n          deferred.resolve();\n        });\n      };\n\n      this.waitForDeferredOperations().done(function () {\n        if (_this9._saving) {\n          afterSaveEditData();\n          return;\n        }\n\n        (0, _deferred.when)(_this9._beforeSaveEditData()).done(function (cancel) {\n          if (cancel) {\n            afterSaveEditData(cancel);\n            return;\n          }\n\n          _this9._saveEditDataInner().done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _saveEditDataInner: function () {\n      var _this10 = this;\n\n      var results = [];\n      var deferreds = [];\n      var changes = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n\n      var editMode = _getEditMode(this);\n\n      var result = new _deferred.Deferred();\n\n      var editData = this._editData.slice(0);\n\n      var resetEditIndices = function () {\n        if (editMode !== EDIT_MODE_CELL) {\n          _this10._editColumnIndex = -1;\n          _this10._editRowIndex = -1;\n        }\n      };\n\n      var resetModifiedClassCells = function () {\n        if (editMode === EDIT_MODE_BATCH) {\n          var columnsCount = _this10._columnsController.getVisibleColumns().length;\n\n          editData.forEach(function (_ref) {\n            var key = _ref.key;\n\n            var rowIndex = _this10._dataController.getRowIndexByKey(key);\n\n            if (rowIndex !== -1) {\n              for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                _this10._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED);\n              }\n            }\n          });\n        }\n      };\n\n      var afterSaveEditData = function (error) {\n        (0, _deferred.when)(_this10._afterSaveEditData()).done(function () {\n          result.resolve(error);\n        });\n      };\n\n      if (!this._saveEditDataCore(deferreds, results, changes) && editMode === EDIT_MODE_CELL) {\n        this._focusEditingCell();\n      }\n\n      if (deferreds.length) {\n        this._saving = true;\n        dataSource && dataSource.beginLoading();\n\n        _deferred.when.apply(_renderer2.default, deferreds).done(function () {\n          if (_this10._processSaveEditDataResult(results)) {\n            resetModifiedClassCells();\n            resetEditIndices();\n\n            if (editMode === EDIT_MODE_POPUP && _this10._editPopup) {\n              _this10._editPopup.hide();\n            }\n\n            dataSource && dataSource.endLoading();\n\n            var refreshMode = _this10.option(\"editing.refreshMode\");\n\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n            if (!isFullRefresh) {\n              dataController.push(changes);\n            }\n\n            (0, _deferred.when)(dataController.refresh({\n              selection: isFullRefresh,\n              reload: isFullRefresh,\n              load: \"reshape\" === refreshMode,\n              changesOnly: _this10.option(\"repaintChangesOnly\")\n            })).always(function () {\n              _this10._fireSaveEditDataEvents(editData);\n            }).done(function () {\n              afterSaveEditData();\n            }).fail(function (error) {\n              afterSaveEditData(error);\n            });\n          } else {\n            dataSource && dataSource.endLoading();\n            result.resolve();\n          }\n        }).fail(function (error) {\n          dataSource && dataSource.endLoading();\n          result.resolve(error);\n        });\n\n        return result.always(function () {\n          _this10._focusEditingCell();\n\n          _this10._saving = false;\n        }).promise();\n      }\n\n      if (_isRowEditMode(this)) {\n        if (!this.hasChanges()) {\n          this.cancelEditData();\n        }\n      } else {\n        if (CELL_BASED_MODES.indexOf(editMode) !== -1) {\n          resetEditIndices();\n          dataController.updateItems();\n        } else {\n          this._focusEditingCell();\n        }\n      }\n\n      afterSaveEditData();\n      return result.promise();\n    },\n    isSaving: function () {\n      return this._saving;\n    },\n    _updateEditColumn: function () {\n      var that = this;\n\n      var isEditColumnVisible = that._isEditColumnVisible();\n\n      var useIcons = that.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      that._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: that._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      that._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function () {\n      var that = this;\n      var editingOptions = that.option(\"editing\");\n\n      if (editingOptions) {\n        var editMode = _getEditMode(that);\n\n        var isVisibleWithCurrentEditMode = false;\n\n        switch (editMode) {\n          case EDIT_MODE_ROW:\n            isVisibleWithCurrentEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n            break;\n\n          case EDIT_MODE_FORM:\n          case EDIT_MODE_POPUP:\n            isVisibleWithCurrentEditMode = editingOptions.allowUpdating;\n        }\n\n        return editingOptions.allowDeleting || isVisibleWithCurrentEditMode;\n      }\n    },\n    _updateEditButtons: function () {\n      var that = this;\n      var headerPanel = that.getView(\"headerPanel\");\n      var hasChanges = that.hasChanges();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", !hasChanges);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", !hasChanges);\n      }\n    },\n    _applyModified: function ($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: function () {},\n    cancelEditData: function () {\n      var that = this;\n\n      var editMode = _getEditMode(that);\n\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      var dataController = that._dataController;\n\n      that._beforeCancelEditData();\n\n      that.init();\n\n      if (ROW_BASED_MODES.indexOf(editMode) !== -1 && rowIndex >= 0) {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [rowIndex, rowIndex + 1]\n        });\n      } else {\n        dataController.updateItems({\n          repaintChangesOnly: that.option(\"repaintChangesOnly\")\n        });\n      }\n\n      if (editMode === EDIT_MODE_POPUP) {\n        that._hideEditPopup();\n      }\n    },\n    _hideEditPopup: function () {\n      this._editPopup && this._editPopup.option(\"visible\", false);\n    },\n    hasEditData: function () {\n      return this.hasChanges();\n    },\n    closeEditCell: function (isError, withoutSaveEditData) {\n      var _this11 = this;\n\n      var that = this;\n\n      var result = _deferred2.default.when();\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      if (!_isRowEditMode(that)) {\n        result = _deferred2.default.Deferred();\n        this.executeOperation(result, function () {\n          _this11._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData);\n\n          result.resolve();\n        });\n      }\n\n      return result.promise();\n    },\n    _closeEditCellCore: function (isError, oldEditRowIndex, withoutSaveEditData) {\n      var that = this;\n\n      var editMode = _getEditMode(that);\n\n      var dataController = that._dataController;\n\n      if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\n        if (!withoutSaveEditData) {\n          that.saveEditData().done(function (error) {\n            if (!that.hasChanges()) {\n              that.closeEditCell(!!error);\n            }\n          });\n        }\n      } else {\n        if (oldEditRowIndex >= 0) {\n          var rowIndices = [oldEditRowIndex];\n          that._editRowIndex = -1;\n          that._editColumnIndex = -1;\n\n          that._beforeCloseEditCellInBatchMode(rowIndices);\n\n          if (!isError) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndices\n            });\n          }\n        }\n      }\n    },\n    update: function (changeType) {\n      var that = this;\n      var dataController = that._dataController;\n\n      if (dataController && that._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          that.refresh(true);\n        }\n\n        that._pageIndex = dataController.pageIndex();\n      }\n\n      that._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function (row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function (deferred) {\n      var _this12 = this;\n\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(function () {\n          var index = _this12._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            _this12._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareEditDataParams: function (options, value, text) {\n      var _options$row;\n\n      var that = this;\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var $cellElement = (0, _renderer2.default)(options.cellElement);\n\n      var editMode = _getEditMode(that);\n\n      var deferred = new _deferred.Deferred();\n\n      if (void 0 !== rowKey) {\n        if (editMode === EDIT_MODE_BATCH) {\n          that._applyModified($cellElement, options);\n        }\n\n        options.value = value;\n        var setCellValueResult = (0, _deferred.fromPromise)(options.column.setCellValue(newData, value, (0, _extend.extend)(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return that._fireDataErrorOccurred(arg);\n        });\n\n        if (_type2.default.isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        if (options.values) {\n          options.values[options.columnIndex] = value;\n        }\n\n        that.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    updateFieldValue: function (options, value, text, forceUpdateRow) {\n      var _this13 = this;\n\n      var rowKey = options.key;\n      var deferred = new _deferred.Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareEditDataParams(options, value, text).done(function (params) {\n          (0, _deferred.when)(_this13._applyEditDataParams(options, params, forceUpdateRow)).always(function () {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function (options) {\n      var that = this;\n\n      if (that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex)) {\n        that._focusEditingCell();\n\n        that._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function (column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = visibleColumns[this._editColumnIndex];\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(function (visibleColumn) {\n        return visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue;\n      });\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyEditDataParams: function (options, params, forceUpdateRow) {\n      var that = this;\n\n      var editMode = _getEditMode(that);\n\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var showEditorAlways = options.column.showEditorAlways;\n      var isUpdateInCellMode = editMode === EDIT_MODE_CELL && options.row && !options.row.isNewRow;\n      var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex);\n\n      if (focusPreviousEditingCell) {\n        that._focusEditingCell();\n\n        that._updateEditRow(options.row, true, isCustomSetCellValue);\n\n        return;\n      }\n\n      that._addEditData(params, options.row);\n\n      that._updateEditButtons();\n\n      if (showEditorAlways && !forceUpdateRow) {\n        if (isUpdateInCellMode) {\n          that._editRowIndex = options.row.rowIndex + that._dataController.getRowIndexOffset();\n          that._editColumnIndex = options.columnIndex;\n          return that.saveEditData();\n        } else {\n          if (editMode === EDIT_MODE_BATCH) {\n            forceUpdateRow = that._needUpdateRow(options.column);\n          }\n        }\n      }\n\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          that._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else {\n          if (row.update) {\n            row.update();\n          }\n        }\n      }\n    },\n    _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n      var that = this;\n      var editForm = that._editForm;\n\n      var editMode = _getEditMode(that);\n\n      if (editMode === EDIT_MODE_POPUP) {\n        if (that.option(\"repaintChangesOnly\")) {\n          row.update && row.update(row);\n        } else {\n          if (editForm) {\n            that._updateEditFormDeferred = new _deferred.Deferred().done(function () {\n              return editForm.repaint();\n            });\n\n            if (!that._updateLockCount) {\n              that._updateEditFormDeferred.resolve();\n            }\n          }\n        }\n      } else {\n        that._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: that._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n        });\n      }\n\n      if (isCustomSetCellValue && that._editForm && !row.isNewRow) {\n        that._editForm.validate();\n      }\n    },\n    _endUpdateCore: function () {\n      this._updateEditFormDeferred && this._updateEditFormDeferred.resolve();\n    },\n    _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n      var that = this;\n\n      if (forceUpdateRow || !_isRowEditMode(that)) {\n        that._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n        if (!forceUpdateRow) {\n          that._focusEditingCell();\n        }\n      } else {\n        var deferred = new _deferred.Deferred();\n        that.addDeferred(deferred);\n        setTimeout(function () {\n          var $focusedElement = (0, _renderer2.default)(_dom_adapter2.default.getActiveElement());\n\n          var columnIndex = that._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n          var focusedElement = $focusedElement.get(0);\n          var selectionRange = (0, _uiGrid_core3.getSelectionRange)(focusedElement);\n\n          that._updateEditRowCore(row, false, isCustomSetCellValue);\n\n          if (columnIndex >= 0) {\n            var $focusedItem = that._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n            that._delayedInputFocus($focusedItem, function () {\n              setTimeout(function () {\n                focusedElement = _dom_adapter2.default.getActiveElement();\n\n                if (selectionRange.selectionStart >= 0) {\n                  (0, _uiGrid_core3.setSelectionRange)(focusedElement, selectionRange);\n                }\n              });\n            });\n          }\n\n          deferred.resolve();\n        });\n      }\n    },\n    _addEditData: function (options, row) {\n      var that = this;\n      var editDataIndex = (0, _uiGrid_core3.getIndexByKey)(options.key, that._editData);\n\n      if (editDataIndex < 0) {\n        editDataIndex = that._editData.length;\n\n        that._editData.push(options);\n      }\n\n      if (that._editData[editDataIndex]) {\n        if (options.data) {\n          that._editData[editDataIndex].data = (0, _uiGrid_core3.createObjectWithChanges)(that._editData[editDataIndex].data, options.data);\n        }\n\n        if ((!that._editData[editDataIndex].type || !options.data) && options.type) {\n          that._editData[editDataIndex].type = options.type;\n        }\n\n        if (row) {\n          row.oldData = that._editData[editDataIndex].oldData;\n          row.data = (0, _uiGrid_core3.createObjectWithChanges)(row.data, options.data);\n        }\n      }\n\n      return editDataIndex;\n    },\n    _getFormEditItemTemplate: function (cellOptions, column) {\n      return column.editCellTemplate || getDefaultEditorTemplate(this);\n    },\n    renderFormEditTemplate: function (detailCellOptions, item, form, container, isReadOnly) {\n      var that = this;\n      var $container = (0, _renderer2.default)(container);\n      var column = item.column;\n      var editorType = getEditorType(item);\n      var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\n      var cellOptions = (0, _extend.extend)({}, detailCellOptions, {\n        data: rowData,\n        cellElement: null,\n        isOnForm: true,\n        item: item,\n        column: (0, _extend.extend)({}, column, {\n          editorType: editorType,\n          editorOptions: item.editorOptions\n        }),\n        id: form.getItemID(item.name || item.dataField),\n        columnIndex: column.index,\n        setValue: !isReadOnly && column.allowEditing && function (value) {\n          that.updateFieldValue(cellOptions, value);\n        }\n      });\n      cellOptions.value = column.calculateCellValue(rowData);\n\n      var template = that._getFormEditItemTemplate.bind(that)(cellOptions, column);\n\n      that._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest((0, _window.getWindow)().document).length).done(function () {\n        that._rowsView._updateCell($container, cellOptions);\n      });\n\n      return cellOptions;\n    },\n    getFormEditorTemplate: function (cellOptions, item) {\n      var that = this;\n      var column = this.component.columnOption(item.dataField);\n      return function (options, container) {\n        var $container = (0, _renderer2.default)(container);\n        cellOptions.row.watch && cellOptions.row.watch(function () {\n          return column.selector(cellOptions.row.data);\n        }, function () {\n          var _validator;\n\n          var $editorElement = $container.find(\".dx-widget\").first();\n          var validator = $editorElement.data(\"dxValidator\");\n          var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\n          $container.contents().remove();\n          cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\n          $editorElement = $container.find(\".dx-widget\").first();\n          validator = $editorElement.data(\"dxValidator\");\n\n          if (validatorOptions && !validator) {\n            $editorElement.dxValidator({\n              validationRules: validatorOptions.validationRules,\n              validationGroup: validatorOptions.validationGroup,\n              dataGetter: validatorOptions.dataGetter\n            });\n          }\n        });\n        cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\n      };\n    },\n    getEditFormTemplate: function () {\n      var that = this;\n      return function ($container, detailOptions, renderFormOnly) {\n        var editFormOptions = that.option(\"editing.form\");\n        var items = that.option(\"editing.form.items\");\n        var userCustomizeItem = that.option(\"editing.form.customizeItem\");\n\n        var editData = that._editData[(0, _uiGrid_core3.getIndexByKey)(detailOptions.key, that._editData)];\n\n        var editFormItemClass = that.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\n        var isCustomEditorType = {};\n\n        if (!items) {\n          var columns = that.getController(\"columns\").getColumns();\n          items = [];\n          (0, _iterator.each)(columns, function (_, column) {\n            if (!column.isBand && !column.type) {\n              items.push({\n                column: column,\n                name: column.name,\n                dataField: column.dataField\n              });\n            }\n          });\n        } else {\n          forEachFormItems(items, function (item) {\n            var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\n\n            if (itemId) {\n              isCustomEditorType[itemId] = !!item.editorType;\n            }\n          });\n        }\n\n        that._firstFormItem = void 0;\n        that._editForm = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($container), _form2.default, (0, _extend.extend)({}, editFormOptions, {\n          items: items,\n          formID: \"dx-\" + new _guid2.default(),\n          validationGroup: editData,\n          customizeItem: function (item) {\n            var column;\n            var itemId = item.name || item.dataField;\n\n            if (item.column || itemId) {\n              column = item.column || that._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField);\n            }\n\n            if (column) {\n              item.label = item.label || {};\n              item.label.text = item.label.text || column.caption;\n              item.template = item.template || that.getFormEditorTemplate(detailOptions, item);\n              item.column = column;\n              item.isCustomEditorType = isCustomEditorType[itemId];\n\n              if (column.formItem) {\n                (0, _extend.extend)(item, column.formItem);\n              }\n\n              if (void 0 === item.isRequired && column.validationRules) {\n                item.isRequired = column.validationRules.some(function (rule) {\n                  return \"required\" === rule.type;\n                });\n                item.validationRules = [];\n              }\n\n              var itemVisible = _type2.default.isDefined(item.visible) ? item.visible : true;\n\n              if (!that._firstFormItem && itemVisible) {\n                that._firstFormItem = item;\n              }\n            }\n\n            userCustomizeItem && userCustomizeItem.call(this, item);\n            item.cssClass = _type2.default.isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass;\n          }\n        }));\n\n        if (!renderFormOnly) {\n          var $buttonsContainer = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n\n          that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($buttonsContainer), _button2.default, that._getSaveButtonConfig());\n\n          that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($buttonsContainer), _button2.default, that._getCancelButtonConfig());\n        }\n\n        that._editForm.on(\"contentReady\", function () {\n          that._editPopup && that._editPopup.repaint();\n        });\n      };\n    },\n    getColumnTemplate: function (options) {\n      var that = this;\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n\n      var isRowMode = _isRowEditMode(that);\n\n      var isRowEditing = that.isEditRow(rowIndex);\n      var isCellEditing = that.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = that.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowMode && isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            that._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = function (value, text) {\n              that.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || getDefaultEditorTemplate(that);\n      } else {\n        if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n          template = that.getEditFormTemplate(options);\n        }\n      }\n\n      return template;\n    },\n    _createButton: function ($container, button, options) {\n      var that = this;\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = that.option(\"editing.useIcons\");\n      var $button = (0, _renderer2.default)(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template) {\n        that._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n\n          var iconType = _icon2.default.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = _icon2.default.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", _message2.default.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if (_type2.default.isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        _events_engine2.default.on($button, (0, _utils.addNamespace)(\"click\", EDITING_NAMESPACE), that.createAction(function (e) {\n          button.onClick.call(button, (0, _extend.extend)({}, e, {\n            row: options.row,\n            column: options.column\n          }));\n          e.event.preventDefault();\n          e.event.stopPropagation();\n        }));\n\n        $container.append($button, \"&nbsp;\");\n      }\n    },\n    getButtonLocalizationNames: function () {\n      return {\n        edit: \"dxDataGrid-editingEditRow\",\n        save: \"dxDataGrid-editingSaveRowChanges\",\n        \"delete\": \"dxDataGrid-editingDeleteRow\",\n        undelete: \"dxDataGrid-editingUndeleteRow\",\n        cancel: \"dxDataGrid-editingCancelRowChanges\"\n      };\n    },\n    prepareEditButtons: function (headerPanel) {\n      var that = this;\n      var editingOptions = that.option(\"editing\") || {};\n      var editingTexts = that.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var classNameButtonByNames = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      };\n      var buttonItems = [];\n\n      var prepareButtonItem = function (name, methodName, sortIndex) {\n        var className = classNameButtonByNames[name];\n\n        var onInitialized = function (e) {\n          (0, _renderer2.default)(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + that.addWidgetPrefix(className) + \"-button\"));\n        };\n\n        var hintText = titleButtonTextByClassNames[name];\n        var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && !that.hasChanges();\n        return {\n          widget: \"dxButton\",\n          options: {\n            onInitialized: onInitialized,\n            icon: \"edit-button-\" + className,\n            disabled: isButtonDisabled,\n            onClick: function () {\n              setTimeout(function () {\n                that[methodName]();\n              });\n            },\n            text: hintText,\n            hint: hintText\n          },\n          showText: \"inMenu\",\n          name: name + \"Button\",\n          location: \"after\",\n          locateInMenu: \"auto\",\n          sortIndex: sortIndex\n        };\n      };\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(prepareButtonItem(\"addRow\", \"addRow\", 20));\n      }\n\n      if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && _getEditMode(that) === EDIT_MODE_BATCH) {\n        buttonItems.push(prepareButtonItem(\"save\", \"saveEditData\", 21));\n        buttonItems.push(prepareButtonItem(\"revert\", \"cancelEditData\", 22));\n      }\n\n      return buttonItems;\n    },\n    showHighlighting: function ($cell) {\n      var $highlight = $cell.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\n\n      if (\"TD\" === $cell.get(0).tagName && !$highlight.length) {\n        $cell.wrapInner((0, _renderer2.default)(\"<div>\").addClass(CELL_HIGHLIGHT_OUTLINE + \" \" + POINTER_EVENTS_TARGET_CLASS));\n      }\n    },\n    highlightDataCell: function ($cell, parameters) {\n      var isEditableCell = parameters.setValue;\n      var cellModified = this.isCellModified(parameters);\n\n      if (cellModified && parameters.column.setCellValue) {\n        this.showHighlighting($cell);\n        $cell.addClass(CELL_MODIFIED);\n      } else {\n        if (isEditableCell) {\n          this.showHighlighting($cell);\n        }\n      }\n    },\n    resetRowAndPageIndices: function () {\n      var that = this;\n      (0, _iterator.each)(that._editData, function (_, editData) {\n        if (editData.pageIndex !== that._pageIndex) {\n          delete editData.pageIndex;\n          delete editData.rowIndex;\n        }\n      });\n    },\n    _afterInsertRow: function () {},\n    _beforeSaveEditData: function (editData) {\n      if (editData && !_type2.default.isDefined(editData.key) && _type2.default.isDefined(editData.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: function () {},\n    _beforeCancelEditData: function () {},\n    _allowEditAction: function (actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if (_type2.default.isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function (options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function (options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function (parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    }\n  };\n}());\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: _message2.default.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: _message2.default.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: _message2.default.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: _message2.default.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: _message2.default.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: _message2.default.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: _message2.default.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: _message2.default.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: _message2.default.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\"\n      }\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function (full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function () {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (items) {\n          var editingController = this._editingController;\n          var editRowIndex = editingController.getEditRowIndex();\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            editItem.isEditing = true;\n\n            if (editingController.getEditMode() === EDIT_MODE_FORM) {\n              editItem.rowType = \"detail\";\n            }\n          }\n        },\n        _updateItemsCore: function (change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items());\n        },\n        _applyChangeUpdate: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function (items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function (dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function (item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _correctRowIndices: function (getRowIndexCorrection) {\n          this.callBase.apply(this, arguments);\n\n          this._editingController.correctEditRowIndex(getRowIndexCorrection);\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var isRowEditMode = editingController.isRowEditMode();\n\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed || isRowEditMode && oldItem.isEditing !== newItem.isEditing) {\n            return;\n          }\n\n          if (oldItem.rowType === newItem.rowType && isRowEditMode && editingController.isEditRow(rowIndex) && isLiveUpdate) {\n            return [];\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellElements: function (rowIndex) {\n          var $cellElements = this.callBase(rowIndex);\n          var editingController = this._editingController;\n          var editForm = editingController.getEditForm();\n          var editFormRowIndex = editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n            return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS);\n          }\n\n          return $cellElements;\n        },\n        getCellIndex: function ($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            (0, _iterator.each)($cellElements, function (index, cellElement) {\n              if ((0, _renderer2.default)(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _getVisibleColumnIndex: function ($cells, rowIndex, columnIdentifier) {\n          var editFormRowIndex = this._editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && _type2.default.isString(columnIdentifier)) {\n            var column = this._columnsController.columnOption(columnIdentifier);\n\n            return this._getEditFormEditorVisibleIndex($cells, column);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _getEditFormEditorVisibleIndex: function ($cells, column) {\n          var visibleIndex = -1;\n          (0, _iterator.each)($cells, function (index, cellElement) {\n            var item = (0, _renderer2.default)(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n\n            if (item && item.column && column && item.column.index === column.index) {\n              visibleIndex = index;\n              return false;\n            }\n          });\n          return visibleIndex;\n        },\n        publicMethods: function () {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function (options) {\n          var that = this;\n\n          var template = that._editingController.getColumnTemplate(options);\n\n          return template || that.callBase(options);\n        },\n        _isNativeClick: function () {\n          return (_devices2.default.real().ios || _devices2.default.real().android) && this.option(\"editing.allowUpdating\");\n        },\n        _createTable: function () {\n          var that = this;\n          var $table = that.callBase.apply(that, arguments);\n\n          if (!_isRowEditMode(that) && that.option(\"editing.allowUpdating\")) {\n            _events_engine2.default.on($table, (0, _utils.addNamespace)(_hold2.default.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", that.createAction(function () {\n              var editingController = that._editingController;\n\n              if (editingController.isEditing()) {\n                editingController.closeEditCell();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var editingController = this._editingController;\n            var isEditRow = editingController.isEditRow(row.rowIndex);\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n\n            if (_getEditMode(this) === EDIT_MODE_BATCH) {\n              isRowRemoved && $row.addClass(ROW_REMOVED);\n            } else {\n              isEditRow && $row.addClass(EDIT_ROW);\n            }\n\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isEditRow || isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n\n            if (isEditRow && \"detail\" === row.rowType) {\n              $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function ($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function (e, eventName) {\n          var that = this;\n          var editingController = that._editingController;\n          var $targetElement = (0, _renderer2.default)(e.event.target);\n\n          var columnIndex = that._getColumnIndexByElement($targetElement);\n\n          var row = that._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = that._columnsController.getVisibleColumns()[columnIndex];\n\n          var allowEditing = allowUpdating && column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex));\n          var startEditAction = that.option(\"editing.startEditAction\") || \"click\";\n\n          if (\"down\" === eventName) {\n            return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\n            editingController.closeEditCell();\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function (e) {\n          var _this14 = this;\n\n          this._pointerDownTimeout = setTimeout(function () {\n            _this14._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function (e) {\n          var isEditForm = (0, _renderer2.default)(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function (e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function ($cell, parameters) {\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditing = parameters.isEditing || editingController.isEditRow(parameters.rowIndex) && parameters.column.allowEditing;\n\n          if (\"data\" === parameters.rowType && !parameters.column.command && (isEditing || parameters.column.showEditorAlways)) {\n            var alignment = parameters.column.alignment;\n            $cell.addClass(EDITOR_CELL_CLASS).toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          if (parameters.column && !isCommandCell) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: function ($cell) {},\n        _formItemPrepared: function () {},\n        _isFormItem: function (parameters) {\n          var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\n\n          var isPopupEditing = \"data\" === parameters.rowType && \"popup\" === _getEditMode(this);\n\n          return (isDetailRow || isPopupEditing) && parameters.item;\n        },\n        _updateCell: function ($cell, parameters) {\n          if (this._isFormItem(parameters)) {\n            this._formItemPrepared(parameters, $cell);\n          } else {\n            this.callBase($cell, parameters);\n          }\n        },\n        _update: function (change) {\n          this.callBase(change);\n\n          if (\"updateSelection\" === change.changeType) {\n            this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED);\n          }\n        },\n        _getCellOptions: function (options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _renderCellContent: function ($cell, options) {\n          if (\"data\" === options.rowType && _getEditMode(this) === EDIT_MODE_POPUP && false === options.row.visible) {\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        cellValue: function (rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var isEditingPopupOption = fullName && 0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME);\n\n              if (!isEditingPopupOption) {\n                this._invalidate();\n              }\n\n              this.callBase(args);\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var that = this;\n          var editingOptions = that.getController(\"editing\").option(\"editing\");\n          return that.callBase() || editingOptions && (editingOptions.allowAdding || (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.editing.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_dom_adapter","_dom_adapter2","_window","_events_engine","_events_engine2","_guid","_guid2","_type","_type2","_iterator","_extend","_uiGrid_core","_uiGrid_core2","_click","_click2","_double_click","_double_click2","_pointer","_pointer2","_uiGrid_core3","_utils","_dialog","_dialog2","_message","_message2","_button","_button2","_popup","_popup2","_ui","_ui2","_devices","_devices2","_form","_form2","_hold","_hold2","_deferred","_deferred2","_common","_common2","_icon","_icon2","_ui3","_ui4","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","EDIT_FORM_CLASS","EDIT_FORM_ITEM_CLASS","FOCUS_OVERLAY_CLASS","READONLY_CLASS","EDIT_POPUP_CLASS","FORM_BUTTONS_CONTAINER_CLASS","ADD_ROW_BUTTON_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","LINK_CLASS","EDITOR_CELL_CLASS","ROW_SELECTED","EDIT_ROW","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","SCROLLABLE_CONTAINER_CLASS","BUTTON_CLASS","INSERT_INDEX","ROW_CLASS","ROW_REMOVED","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","CELL_HIGHLIGHT_OUTLINE","EDITING_NAMESPACE","DATA_ROW_CLASS","CELL_FOCUS_DISABLED_CLASS","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_CELL","EDIT_MODE_FORM","EDIT_MODE_POPUP","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_UPDATE_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","POINTER_EVENTS_TARGET_CLASS","DEFAULT_START_EDIT_ACTION","EDIT_MODES","ROW_BASED_MODES","CELL_BASED_MODES","FORM_BASED_MODES","MODES_WITH_DELAYED_FOCUS","TARGET_COMPONENT_NAME","EDIT_LINK_CLASS","save","cancel","edit","undelete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_POPUP_OPTION_NAME","createFailureHandler","deferred","arg","error","Error","String","reject","_getEditMode","that","editMode","option","indexOf","_isRowEditMode","EditingController","default","ViewController","inherit","getDefaultEditorTemplate","container","options","$editor","appendTo","getController","createEditor","extend","column","value","setValue","row","parentType","width","readOnly","isOnForm","id","getEditingTexts","editingTexts","component","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","getButtonIndex","buttons","result","some","button","index","getButtonName","isObject","getEditorType","item","isCustomEditorType","editorType","formItem","forEachFormItems","items","callBack","forEach","tabs","init","_editRowIndex","_editData","_editColumnIndex","_columnsController","_dataController","_rowsView","getView","_editForm","_updateEditFormDeferred","_lastOperation","_deferreds","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","$pointerDownTarget","isResizing","_pointerUpEditorHandler","_that$getController","_pointerDownEditorHandler","e","target","event","$target","targetComponent","is","checkEditorPopup","$element","closest","concat","_editCellInProgress","isEditorPopup","isDomElement","getWindow","document","isAnotherComponent","_disposed","isAddRowButton","addWidgetPrefix","isFocusOverlay","hasClass","isCellEditMode","isEditing","_closeEditItem","on","getDocument","up","down","_updateEditColumn","_updateEditButtons","getUpdatedData","data","key","keyOf","editData","editIndex","getIndexByKey","createObjectWithChanges","getInsertedData","filter","type","map","getRemovedData","oldData","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","$targetElement","isCurrentComponentElement","isDataRow","rowsView","$targetCell","rowIndex","getRowIndex","parent","columnIndex","getCellElements","visibleColumns","getVisibleColumns","allowEditing","isEditCell","closeEditCell","args","editForm","resetRowAndPageIndices","changeType","each","_","_repaintEditPopup","_isDefaultButtonVisible","isRowMode","isEditRow","_getVisibleEditRowIndex","allowUpdating","allowDeleting","removed","_isButtonVisible","visible","isDefined","isFunction","_getButtonConfig","_this","config","buttonName","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","stopPropagation","preventDefault","setTimeout","_getEditingButtons","_this2","buttonIndex","haveCustomButtons","splice","_renderEditingButtons","$container","_this3","_createButton","_getEditCommandCellTemplate","_this4","rowType","watch","empty","setEmptyText","correctEditRowIndexAfterExpand","getRowIndexByKey","correctEditRowIndex","getRowIndexCorrection","isRowEditMode","isFormEditMode","isCellOrBatchEditMode","getEditMode","getFirstEditableColumnIndex","columnsController","firstFormItem","_firstFormItem","$editFormElements","_getEditFormEditorVisibleIndex","getFirstEditableCellInRow","_getCellElement","getFocusedCellInRow","hasChanges","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","optionChanged","fullName","editPopup","_editPopup","popupOptionName","handled","publicMethods","refresh","isPageChanged","needResetIndexes","getEditRowKey","getEditRowIndex","getEditFormRowIndex","visibleRowIndex","hasEditData","popupVisible","_$popupContent","getEditForm","_needInsertItem","dataSource","scrollingMode","pageIndex","beginPageIndex","endPageIndex","dataRowIndex","_generateNewItem","processItems","change","dataController","update","rowIndexOffset","getRowIndexOffset","getRowIndexDelta","removeCount","processDataItem","generateDataValues","columns","isNewRow","modified","modifiedValues","insertRow","log","addRow","_initNewRow","_this5","executeAction","promise","Deferred","when","fromPromise","done","resolve","fail","_getInsertKey","parentKey","rows","insertKey","_getInsertRowIndex","_getInsertIndex","parentRowIndex","getTopVisibleItemIndex","maxInsertIndex","editItem","store","param","oldEditRowIndex","fireError","NAME","saveEditData","_allowRowAdding","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","_addEditData","updateItems","rowIndices","_showEditPopup","_focusFirstEditableCellInRow","_afterInsertRow","$firstCell","_delayedInputFocus","$cell","eventToTrigger","trigger","_isEditingStart","_beforeEditCell","always","_beforeUpdateItems","params","$editingCell","_pageIndex","focus","repaintForm","isMobileDevice","current","deviceType","popupOptions","showTitle","fullScreen","toolbarItems","toolbar","location","widget","_getSaveButtonConfig","_getCancelButtonConfig","contentTemplate","_getPopupEditFormTemplate","$popupContainer","addClass","_createComponent","_getEditPopupHiddenHandler","$content","find","not","first","repaint","show","defaultAnimation","cancelEditData","getVisibleRows","templateOptions","formTemplate","getEditFormTemplate","scrollable","_removeEditDataItem","executeOperation","func","_this6","waitForDeferredOperations","state","apply","editCell","_this7","coreResult","_editCellCore","oldColumn","isString","columnOption","getVisibleIndex","editRowIndex","_prepareEditCell","deferRender","_repaintEditCell","_processCanceledEditingCell","editColumnIndex","showEditorAlways","loseFocus","_focusEditingCell","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","focusAndSelectElement","_beforeFocusCallback","real","ios","android","$editCell","removeRow","_this8","_checkAndDeleteRow","texts","isBatchMode","mode","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirm","confirmResult","isEmptyObject","_saveEditDataCore","deferreds","results","changes","isDataSaved","executeEditingAction","_beforeSaveEditData","remove","push","insert","newData","doneDeferred","_processSaveEditDataResult","hasSavedData","isError","_fireSaveEditDataEvents","itemData","_this9","afterSaveEditData","_afterSaveEditData","_saving","_saveEditDataInner","_this10","resetEditIndices","resetModifiedClassCells","columnsCount","_ref","removeClass","beginLoading","hide","endLoading","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isSaving","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","command","alignment","cellTemplate","fixedPosition","isVisibleWithCurrentEditMode","allowAdding","headerPanel","setToolbarItemDisabled","_applyModified","_beforeCloseEditCellInBatchMode","_beforeCancelEditData","repaintChangesOnly","_hideEditPopup","withoutSaveEditData","_this11","_closeEditCellCore","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_this12","_prepareEditDataParams","_options$row","rowKey","$cellElement","cellElement","setCellValueResult","setCellValue","displayValueMap","values","updateFieldValue","forceUpdateRow","_this13","_applyEditDataParams","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","isUpdateInCellMode","focusPreviousEditingCell","_updateEditRowCore","_updateLockCount","validate","_endUpdateCore","$focusedElement","getActiveElement","getCellIndex","focusedElement","get","selectionRange","getSelectionRange","$focusedItem","selectionStart","setSelectionRange","editDataIndex","_getFormEditItemTemplate","cellOptions","editCellTemplate","renderFormEditTemplate","detailCellOptions","form","isReadOnly","rowData","editorOptions","getItemID","dataField","template","renderTemplate","_updateCell","getFormEditorTemplate","selector","_validator","$editorElement","validator","validatorOptions","contents","dxValidator","validationRules","validationGroup","dataGetter","detailOptions","renderFormOnly","editFormOptions","userCustomizeItem","editFormItemClass","getColumns","isBand","itemId","formID","customizeItem","label","caption","isRequired","rule","itemVisible","$buttonsContainer","getColumnTemplate","isRowEditing","isCellEditing","editingStartOptions","icon","$button","attr","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","addNamespace","append","prepareEditButtons","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","classNameButtonByNames","buttonItems","prepareButtonItem","sortIndex","className","onInitialized","element","_getToolbarButtonClass","hintText","isButtonDisabled","disabled","showText","locateInMenu","showHighlighting","$highlight","tagName","wrapInner","highlightDataCell","parameters","isEditableCell","cellModified","isCellModified","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","arguments","module","exports","defaultOptions","editing","selectTextOnEditStart","colCount","popup","controllers","extenders","_editingController","full","repaintRows","editingController","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_correctRowIndices","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","_isCellChanged","oldRow","newRow","cell","cells","views","$cellElements","editFormRowIndex","cellIndex","_getVisibleColumnIndex","$cells","columnIdentifier","visibleIndex","_getCellTemplate","_isNativeClick","_createTable","$table","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","_getColumnIndexByElement","$tableElement","$tableElements","getTableElements","_getColumnIndexByElementCore","_editCellByClick","_rowPointerDown","_this14","_pointerDownTimeout","_rowClick","isEditForm","rowElement","_rowDblClick","_cellPrepared","isCommandCell","toggleClass","css","_editCellPrepared","_formItemPrepared","_isFormItem","isDetailRow","isPopupEditing","_update","children","_getCellOptions","_renderCellContent","cellValue","getCellOptions","_getToolbarItems","editButtonItems","isEditingPopupOption","_invalidate","isVisible"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _dom_adapter = require(\"../../core/dom_adapter\");\r\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _events_engine = require(\"../../events/core/events_engine\");\r\nvar _events_engine2 = _interopRequireDefault(_events_engine);\r\nvar _guid = require(\"../../core/guid\");\r\nvar _guid2 = _interopRequireDefault(_guid);\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _type2 = _interopRequireDefault(_type);\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _click = require(\"../../events/click\");\r\nvar _click2 = _interopRequireDefault(_click);\r\nvar _double_click = require(\"../../events/double_click\");\r\nvar _double_click2 = _interopRequireDefault(_double_click);\r\nvar _pointer = require(\"../../events/pointer\");\r\nvar _pointer2 = _interopRequireDefault(_pointer);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _utils = require(\"../../events/utils\");\r\nvar _dialog = require(\"../dialog\");\r\nvar _dialog2 = _interopRequireDefault(_dialog);\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _button = require(\"../button\");\r\nvar _button2 = _interopRequireDefault(_button);\r\nvar _popup = require(\"../popup\");\r\nvar _popup2 = _interopRequireDefault(_popup);\r\nvar _ui = require(\"../widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _devices = require(\"../../core/devices\");\r\nvar _devices2 = _interopRequireDefault(_devices);\r\nvar _form = require(\"../form\");\r\nvar _form2 = _interopRequireDefault(_form);\r\nvar _hold = require(\"../../events/hold\");\r\nvar _hold2 = _interopRequireDefault(_hold);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _deferred2 = _interopRequireDefault(_deferred);\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _common2 = _interopRequireDefault(_common);\r\nvar _icon = require(\"../../core/utils/icon\");\r\nvar _icon2 = _interopRequireDefault(_icon);\r\nvar _ui3 = require(\"../scroll_view/ui.scrollable\");\r\nvar _ui4 = _interopRequireDefault(_ui3);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread()\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) {\r\n        return\r\n    }\r\n    if (\"string\" === typeof o) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (\"Object\" === n && o.constructor) {\r\n        n = o.constructor.name\r\n    }\r\n    if (\"Map\" === n || \"Set\" === n) {\r\n        return Array.from(o)\r\n    }\r\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n    if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\r\n        return Array.from(iter)\r\n    }\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n        return _arrayLikeToArray(arr)\r\n    }\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n    if (null == len || len > arr.length) {\r\n        len = arr.length\r\n    }\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n        arr2[i] = arr[i]\r\n    }\r\n    return arr2\r\n}\r\nvar EDIT_FORM_CLASS = \"edit-form\";\r\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar EDIT_POPUP_CLASS = \"edit-popup\";\r\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\r\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_ROW = \"dx-edit-row\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar SCROLLABLE_CONTAINER_CLASS = \"dx-scrollable-container\";\r\nvar BUTTON_CLASS = \"dx-button\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar ROW_REMOVED = \"dx-row-removed\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar CELL_HIGHLIGHT_OUTLINE = \"dx-highlight-outline\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\r\nvar FOCUSABLE_ELEMENT_SELECTOR = \"[tabindex], \" + EDITORS_INPUT_SELECTOR;\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nvar POINTER_EVENTS_TARGET_CLASS = \"dx-pointer-events-target\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP];\r\nvar ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP];\r\nvar CELL_BASED_MODES = [EDIT_MODE_BATCH, EDIT_MODE_CELL];\r\nvar FORM_BASED_MODES = [EDIT_MODE_FORM, EDIT_MODE_POPUP];\r\nvar MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM];\r\nvar TARGET_COMPONENT_NAME = \"targetComponent\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    \"delete\": \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    \"delete\": \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    \"delete\": \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    \"delete\": \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_POPUP_OPTION_NAME = \"editing.popup\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar _getEditMode = function(that) {\r\n    var editMode = that.option(\"editing.mode\");\r\n    if (EDIT_MODES.indexOf(editMode) !== -1) {\r\n        return editMode\r\n    }\r\n    return EDIT_MODE_ROW\r\n};\r\nvar _isRowEditMode = function(that) {\r\n    var editMode = _getEditMode(that);\r\n    return ROW_BASED_MODES.indexOf(editMode) !== -1\r\n};\r\nvar EditingController = _uiGrid_core2.default.ViewController.inherit(function() {\r\n    var getDefaultEditorTemplate = function(that) {\r\n        return function(container, options) {\r\n            var $editor = (0, _renderer2.default)(\"<div>\").appendTo(container);\r\n            that.getController(\"editorFactory\").createEditor($editor, (0, _extend.extend)({}, options.column, {\r\n                value: options.value,\r\n                setValue: options.setValue,\r\n                row: options.row,\r\n                parentType: \"dataRow\",\r\n                width: null,\r\n                readOnly: !options.setValue,\r\n                isOnForm: options.isOnForm,\r\n                id: options.id\r\n            }))\r\n        }\r\n    };\r\n    var getEditingTexts = function(options) {\r\n        var editingTexts = options.component.option(\"editing.texts\") || {};\r\n        return {\r\n            save: editingTexts.saveRowChanges,\r\n            cancel: editingTexts.cancelRowChanges,\r\n            edit: editingTexts.editRow,\r\n            undelete: editingTexts.undeleteRow,\r\n            \"delete\": editingTexts.deleteRow,\r\n            add: editingTexts.addRowToNode\r\n        }\r\n    };\r\n    var getButtonIndex = function(buttons, name) {\r\n        var result = -1;\r\n        buttons.some(function(button, index) {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return _type2.default.isObject(button) ? button.name : button\r\n    }\r\n    var getEditorType = function(item) {\r\n        var column = item.column;\r\n        return item.isCustomEditorType ? item.editorType : column.formItem && column.formItem.editorType\r\n    };\r\n    var forEachFormItems = function forEachFormItems(items, callBack) {\r\n        items.forEach(function(item) {\r\n            if (item.items || item.tabs) {\r\n                forEachFormItems(item.items || item.tabs, callBack)\r\n            } else {\r\n                callBack(item)\r\n            }\r\n        })\r\n    };\r\n    return {\r\n        init: function() {\r\n            var that = this;\r\n            that._editRowIndex = -1;\r\n            that._editData = [];\r\n            that._editColumnIndex = -1;\r\n            that._columnsController = that.getController(\"columns\");\r\n            that._dataController = that.getController(\"data\");\r\n            that._rowsView = that.getView(\"rowsView\");\r\n            that._editForm = null;\r\n            that._updateEditFormDeferred = null;\r\n            that._lastOperation = null;\r\n            if (that._deferreds) {\r\n                that._deferreds.forEach(function(d) {\r\n                    return d.reject(\"cancel\")\r\n                })\r\n            }\r\n            that._deferreds = [];\r\n            if (!that._dataChangedHandler) {\r\n                that._dataChangedHandler = that._handleDataChanged.bind(that);\r\n                that._dataController.changed.add(that._dataChangedHandler)\r\n            }\r\n            if (!that._saveEditorHandler) {\r\n                that.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                var $pointerDownTarget;\r\n                var isResizing;\r\n                that._pointerUpEditorHandler = function() {\r\n                    var _that$getController;\r\n                    isResizing = null === (_that$getController = that.getController(\"columnsResizer\")) || void 0 === _that$getController ? void 0 : _that$getController.isResizing()\r\n                };\r\n                that._pointerDownEditorHandler = function(e) {\r\n                    return $pointerDownTarget = (0, _renderer2.default)(e.target)\r\n                };\r\n                that._saveEditorHandler = that.createAction(function(e) {\r\n                    var event = e.event;\r\n                    var $target = (0, _renderer2.default)(event.target);\r\n                    var targetComponent = event[TARGET_COMPONENT_NAME];\r\n                    if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\r\n                        return\r\n                    }\r\n\r\n                    function checkEditorPopup($element) {\r\n                        return $element && !!$element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length\r\n                    }\r\n                    if (!_isRowEditMode(that) && !that._editCellInProgress) {\r\n                        var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\r\n                        var isDomElement = !!$target.closest((0, _window.getWindow)().document).length;\r\n                        var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== that.component;\r\n                        var isAddRowButton = !!$target.closest(\".\".concat(that.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\r\n                        var isFocusOverlay = $target.hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\r\n                        var isCellEditMode = _getEditMode(that) === EDIT_MODE_CELL;\r\n                        if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && that.isEditing()) && (isDomElement || isAnotherComponent)) {\r\n                            that._closeEditItem.bind(that)($target)\r\n                        }\r\n                    }\r\n                });\r\n                _events_engine2.default.on(_dom_adapter2.default.getDocument(), _pointer2.default.up, that._pointerUpEditorHandler);\r\n                _events_engine2.default.on(_dom_adapter2.default.getDocument(), _pointer2.default.down, that._pointerDownEditorHandler);\r\n                _events_engine2.default.on(_dom_adapter2.default.getDocument(), _click2.default.name, that._saveEditorHandler)\r\n            }\r\n            that._updateEditColumn();\r\n            that._updateEditButtons()\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var editData = this._editData;\r\n            var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, editData);\r\n            if (editData[editIndex]) {\r\n                return (0, _uiGrid_core3.createObjectWithChanges)(data, editData[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this._editData.filter(function(editData) {\r\n                return editData.data && editData.type === DATA_EDIT_DATA_INSERT_TYPE\r\n            }).map(function(editData) {\r\n                return editData.data\r\n            })\r\n        },\r\n        getRemovedData: function() {\r\n            return this._editData.filter(function(editData) {\r\n                return editData.oldData && editData.type === DATA_EDIT_DATA_REMOVE_TYPE\r\n            }).map(function(editData) {\r\n                return editData.oldData\r\n            })\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: function($targetElement) {\r\n            var $element = this.component.$element();\r\n            var result = this.isEditing();\r\n            var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\r\n            if (isCurrentComponentElement) {\r\n                var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\r\n                if (isDataRow) {\r\n                    var rowsView = this.getView(\"rowsView\");\r\n                    var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\r\n                    var rowIndex = rowsView.getRowIndex($targetCell.parent());\r\n                    var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\r\n                    var visibleColumns = this._columnsController.getVisibleColumns();\r\n                    var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\r\n                    result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex)\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        _closeEditItem: function($targetElement) {\r\n            if (this._needToCloseEditableCell($targetElement)) {\r\n                this.closeEditCell()\r\n            }\r\n        },\r\n        _handleDataChanged: function(args) {\r\n            var that = this;\r\n            var editForm = that._editForm;\r\n            if (\"standard\" === that.option(\"scrolling.mode\")) {\r\n                that.resetRowAndPageIndices()\r\n            }\r\n            if (\"prepend\" === args.changeType) {\r\n                (0, _iterator.each)(that._editData, function(_, editData) {\r\n                    editData.rowIndex += args.items.length\r\n                })\r\n            }\r\n            if (\"refresh\" === args.changeType && _getEditMode(that) === EDIT_MODE_POPUP && editForm && editForm.option(\"visible\")) {\r\n                this._repaintEditPopup()\r\n            }\r\n        },\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            var isRowMode = _isRowEditMode(this);\r\n            var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex() && isRowMode;\r\n            switch (button.name) {\r\n                case \"edit\":\r\n                    result = !isEditRow && this.allowUpdating(options) && isRowMode;\r\n                    break;\r\n                case \"save\":\r\n                case \"cancel\":\r\n                    result = isEditRow;\r\n                    break;\r\n                case \"delete\":\r\n                    result = !isEditRow && this.allowDeleting(options) && !options.row.removed;\r\n                    break;\r\n                case \"undelete\":\r\n                    result = this.allowDeleting(options) && options.row.removed\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!_type2.default.isDefined(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return _type2.default.isFunction(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var _this = this;\r\n            var config = _type2.default.isObject(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = getEditingTexts(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return (0, _extend.extend)({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName],\r\n                onClick: function(e) {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(function() {\r\n                        options.row && allowAction && _this[methodName] && _this[methodName](options.row.rowIndex)\r\n                    })\r\n                }\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var _this2 = this;\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(function(button) {\r\n                return _this2._getButtonConfig(button, options)\r\n            })\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options) {\r\n            var _this3 = this;\r\n            buttons.forEach(function(button) {\r\n                if (_this3._isButtonVisible(button, options)) {\r\n                    _this3._createButton($container, button, options)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            var _this4 = this;\r\n            return function(container, options) {\r\n                var $container = (0, _renderer2.default)(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = _this4._getEditingButtons(options);\r\n                    _this4._renderEditingButtons($container, buttons, options);\r\n                    options.watch && options.watch(function() {\r\n                        return buttons.map(function(button) {\r\n                            return _this4._isButtonVisible(button, options)\r\n                        })\r\n                    }, function() {\r\n                        $container.empty();\r\n                        _this4._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    (0, _uiGrid_core3.setEmptyText)($container)\r\n                }\r\n            }\r\n        },\r\n        correctEditRowIndexAfterExpand: function(key) {\r\n            if (this._editRowIndex > this._dataController.getRowIndexByKey(key)) {\r\n                this._editRowIndex++\r\n            }\r\n        },\r\n        correctEditRowIndex: function(getRowIndexCorrection) {\r\n            this._editRowIndex += getRowIndexCorrection(this._getVisibleEditRowIndex())\r\n        },\r\n        isRowEditMode: function() {\r\n            return _isRowEditMode(this)\r\n        },\r\n        isFormEditMode: function() {\r\n            var editMode = _getEditMode(this);\r\n            return FORM_BASED_MODES.indexOf(editMode) !== -1\r\n        },\r\n        isCellOrBatchEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return editMode === EDIT_MODE_BATCH || editMode === EDIT_MODE_CELL\r\n        },\r\n        getEditMode: function() {\r\n            return _getEditMode(this)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var firstFormItem = this._firstFormItem;\r\n            var columnIndex;\r\n            if (_getEditMode(this) === EDIT_MODE_FORM && firstFormItem) {\r\n                var $editFormElements = this._rowsView.getCellElements(this._editRowIndex);\r\n                columnIndex = this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column)\r\n            } else {\r\n                var visibleColumns = columnsController.getVisibleColumns();\r\n                (0, _iterator.each)(visibleColumns, function(index, column) {\r\n                    if (column.allowEditing) {\r\n                        columnIndex = index;\r\n                        return false\r\n                    }\r\n                })\r\n            }\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return (0, _uiGrid_core3.getIndexByKey)(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var that = this;\r\n            var result = false;\r\n            for (var i = 0; i < that._editData.length; i++) {\r\n                if (that._editData[i].type && (!_type2.default.isDefined(rowIndex) || that._dataController.getRowIndexByKey(that._editData[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            _events_engine2.default.off(_dom_adapter2.default.getDocument(), _pointer2.default.up, this._pointerUpEditorHandler);\r\n            _events_engine2.default.off(_dom_adapter2.default.getDocument(), _pointer2.default.down, this._pointerDownEditorHandler);\r\n            _events_engine2.default.off(_dom_adapter2.default.getDocument(), _click2.default.name, this._saveEditorHandler)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                var editPopup = this._editPopup;\r\n                if (fullName && 0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\r\n                    if (editPopup) {\r\n                        var popupOptionName = fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\r\n                        if (popupOptionName) {\r\n                            editPopup.option(popupOptionName, args.value)\r\n                        } else {\r\n                            editPopup.option(args.value)\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (editPopup && editPopup.option(\"visible\") && 0 === fullName.indexOf(\"editing.form\")) {\r\n                        this._repaintEditPopup()\r\n                    } else {\r\n                        this.init()\r\n                    }\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        publicMethods: function() {\r\n            return [\"insertRow\", \"addRow\", \"removeRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"editCell\", \"closeEditCell\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function(isPageChanged) {\r\n            var editMode = _getEditMode(this);\r\n            var needResetIndexes = editMode === EDIT_MODE_BATCH || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\r\n            if (editMode !== EDIT_MODE_BATCH && editMode !== EDIT_MODE_CELL) {\r\n                this.init()\r\n            } else {\r\n                if (needResetIndexes) {\r\n                    this._editRowIndex = -1;\r\n                    this._editColumnIndex = -1\r\n                }\r\n            }\r\n        },\r\n        isEditing: function() {\r\n            return this._editRowIndex > -1\r\n        },\r\n        isEditRow: function(rowIndex) {\r\n            var editMode = _getEditMode(this);\r\n            return this._getVisibleEditRowIndex() === rowIndex && ROW_BASED_MODES.indexOf(editMode) !== -1\r\n        },\r\n        getEditRowKey: function() {\r\n            var items = this._dataController.items();\r\n            var item = items[this._getVisibleEditRowIndex()];\r\n            return item && item.key\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            var editMode = _getEditMode(this);\r\n            return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP ? this._getVisibleEditRowIndex() : -1\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            var hasEditData = !!(Array.isArray(this._editData) && this._editData.length);\r\n            return hasEditData && this._getVisibleEditRowIndex() === visibleRowIndex && this._editColumnIndex === columnIndex\r\n        },\r\n        getPopupContent: function() {\r\n            var editMode = _getEditMode(this);\r\n            var popupVisible = this._editPopup && this._editPopup.option(\"visible\");\r\n            if (editMode === EDIT_MODE_POPUP && popupVisible) {\r\n                return this._$popupContent\r\n            }\r\n        },\r\n        getEditForm: function() {\r\n            return this._editForm\r\n        },\r\n        _needInsertItem: function(editData, changeType) {\r\n            var that = this;\r\n            var dataSource = that._dataController.dataSource();\r\n            var scrollingMode = that.option(\"scrolling.mode\");\r\n            var pageIndex = dataSource.pageIndex();\r\n            var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex;\r\n            var endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\r\n            if (\"standard\" !== scrollingMode) {\r\n                switch (changeType) {\r\n                    case \"append\":\r\n                        return editData.key.pageIndex === endPageIndex;\r\n                    case \"prepend\":\r\n                        return editData.key.pageIndex === beginPageIndex;\r\n                    case \"refresh\":\r\n                        editData.key.rowIndex = 0;\r\n                        editData.key.dataRowIndex = 0;\r\n                        editData.key.pageIndex = 0;\r\n                        break;\r\n                    default:\r\n                        return editData.key.pageIndex >= beginPageIndex && editData.key.pageIndex <= endPageIndex\r\n                }\r\n            }\r\n            return editData.key.pageIndex === pageIndex\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var item = {\r\n                key: key\r\n            };\r\n            if (key && key[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = key[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        processItems: function(items, change) {\r\n            var changeType = change.changeType;\r\n            var dataController = this._dataController;\r\n            var dataRowIndex = -1;\r\n            this.update(changeType);\r\n            var editData = this._editData;\r\n            for (var i = 0; i < editData.length; i++) {\r\n                var key = editData[i].key;\r\n                if (key) {\r\n                    var rowIndexOffset = dataController.getRowIndexOffset();\r\n                    dataRowIndex = key.dataRowIndex - rowIndexOffset + dataController.getRowIndexDelta();\r\n                    if (\"append\" === changeType) {\r\n                        dataRowIndex -= dataController.items(true).length;\r\n                        if (change.removeCount) {\r\n                            dataRowIndex += change.removeCount\r\n                        }\r\n                    }\r\n                    var item = this._generateNewItem(key);\r\n                    if (dataRowIndex >= 0 && editData[i].type === DATA_EDIT_DATA_INSERT_TYPE && this._needInsertItem(editData[i], changeType, items, item)) {\r\n                        items.splice(key.dataRowIndex ? dataRowIndex : 0, 0, item)\r\n                    }\r\n                }\r\n            }\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var that = this;\r\n            var data;\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                var editMode = _getEditMode(that);\r\n                var editData = that._editData[editIndex];\r\n                data = editData.data;\r\n                switch (editData.type) {\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        if (editMode === EDIT_MODE_POPUP) {\r\n                            item.visible = false\r\n                        }\r\n                        item.isNewRow = true;\r\n                        item.key = key;\r\n                        item.data = data;\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        item.modified = true;\r\n                        item.oldData = item.data;\r\n                        item.data = (0, _uiGrid_core3.createObjectWithChanges)(item.data, data);\r\n                        item.modifiedValues = generateDataValues(data, columns, true);\r\n                        break;\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        if (editMode === EDIT_MODE_BATCH) {\r\n                            item.data = (0, _uiGrid_core3.createObjectWithChanges)(item.data, data)\r\n                        }\r\n                        item.removed = true\r\n                }\r\n            }\r\n        },\r\n        insertRow: function() {\r\n            _ui2.default.log(\"W0002\", \"dxDataGrid\", \"insertRow\", \"15.2\", \"Use the 'addRow' method instead\");\r\n            return this.addRow()\r\n        },\r\n        _initNewRow: function(options) {\r\n            var _this5 = this;\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new _deferred.Deferred;\r\n                (0, _deferred.when)((0, _deferred.fromPromise)(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function(arg) {\r\n                    return _this5._fireDataErrorOccurred(arg)\r\n                });\r\n                return deferred\r\n            }\r\n        },\r\n        _getInsertKey: function(parentKey) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var rows = dataController.items();\r\n            var editMode = _getEditMode(that);\r\n            var insertKey = {\r\n                parentKey: parentKey,\r\n                pageIndex: dataController.pageIndex(),\r\n                rowIndex: that._getInsertRowIndex(parentKey)\r\n            };\r\n            var row = rows[insertKey.rowIndex];\r\n            if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                insertKey.rowIndex++\r\n            }\r\n            insertKey.dataRowIndex = dataController.getRowIndexOffset() + rows.filter(function(row, index) {\r\n                return index < insertKey.rowIndex && (\"data\" === row.rowType || \"group\" === row.rowType || row.isNewRow)\r\n            }).length;\r\n            if (editMode !== EDIT_MODE_BATCH) {\r\n                that._editRowIndex = insertKey.rowIndex + that._dataController.getRowIndexOffset()\r\n            }\r\n            insertKey[INSERT_INDEX] = that._getInsertIndex();\r\n            return insertKey\r\n        },\r\n        _getInsertRowIndex: function(parentKey) {\r\n            var that = this;\r\n            var rowsView = that.getView(\"rowsView\");\r\n            var parentRowIndex = that._dataController.getRowIndexByKey(parentKey);\r\n            if (parentRowIndex >= 0) {\r\n                return parentRowIndex + 1\r\n            }\r\n            if (rowsView) {\r\n                return rowsView.getTopVisibleItemIndex(true)\r\n            }\r\n            return 0\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this._editData.forEach(function(editItem) {\r\n                if (editItem.type === DATA_EDIT_DATA_INSERT_TYPE && editItem.key[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = editItem.key[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var editMode = _getEditMode(that);\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var deferred = new _deferred.Deferred;\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return deferred.reject()\r\n            }\r\n            if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\r\n                that.saveEditData().done(function() {\r\n                    if (!that.hasChanges()) {\r\n                        that.addRow(parentKey).done(deferred.resolve).fail(deferred.reject)\r\n                    } else {\r\n                        deferred.reject(\"cancel\")\r\n                    }\r\n                });\r\n                return deferred.promise()\r\n            }\r\n            that.refresh();\r\n            if (!that._allowRowAdding()) {\r\n                return deferred.reject(\"cancel\")\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new _guid2.default)\r\n            }(0, _deferred.when)(that._initNewRow(param, parentKey)).done(function() {\r\n                if (that._allowRowAdding()) {\r\n                    that._addRowCore(param.data, parentKey, oldEditRowIndex);\r\n                    deferred.resolve()\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var that = this;\r\n            var editMode = _getEditMode(that);\r\n            var insertIndex = that._getInsertIndex();\r\n            if (editMode !== EDIT_MODE_BATCH && insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var that = this;\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var insertKey = that._getInsertKey(parentKey);\r\n            var editMode = _getEditMode(that);\r\n            that._addEditData({\r\n                key: insertKey,\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            });\r\n            that._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [initialOldEditRowIndex, oldEditRowIndex, insertKey.rowIndex]\r\n            });\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                that._showEditPopup(insertKey.rowIndex)\r\n            } else {\r\n                that._focusFirstEditableCellInRow(insertKey.rowIndex)\r\n            }\r\n            that._afterInsertRow({\r\n                key: insertKey,\r\n                data: data\r\n            })\r\n        },\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var that = this;\r\n            var $firstCell = that.getFirstEditableCellInRow(rowIndex);\r\n            that._editCellInProgress = true;\r\n            that._delayedInputFocus($firstCell, function() {\r\n                that._editCellInProgress = false;\r\n                var $cell = that.getFirstEditableCellInRow(rowIndex);\r\n                var eventToTrigger = \"dblClick\" === that.option(\"editing.startEditAction\") ? _double_click2.default.name : _click2.default.name;\r\n                $cell && _events_engine2.default.trigger($cell, eventToTrigger)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n            var that = this;\r\n            if (_getEditMode(that) === EDIT_MODE_CELL && !item.isNewRow && that.hasChanges()) {\r\n                var d = new _deferred.Deferred;\r\n                that.saveEditData().always(function() {\r\n                    d.resolve(that.hasChanges())\r\n                });\r\n                return d\r\n            }\r\n        },\r\n        _beforeUpdateItems: function() {},\r\n        _getVisibleEditRowIndex: function() {\r\n            return this._editRowIndex >= 0 ? this._editRowIndex - this._dataController.getRowIndexOffset() : -1\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var $editingCell;\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldEditRowIndex) {\r\n                return true\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (that._isEditingStart(params)) {\r\n                return\r\n            }\r\n            that.init();\r\n            that._pageIndex = dataController.pageIndex();\r\n            that._editRowIndex = (items[0].isNewRow ? rowIndex - 1 : rowIndex) + that._dataController.getRowIndexOffset();\r\n            that._addEditData({\r\n                data: {},\r\n                key: item.key,\r\n                oldData: item.data\r\n            });\r\n            var rowIndices = [oldEditRowIndex, rowIndex];\r\n            var editMode = _getEditMode(that);\r\n            that._beforeUpdateItems(rowIndices, rowIndex, oldEditRowIndex);\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                that._showEditPopup(rowIndex)\r\n            } else {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: rowIndices\r\n                })\r\n            }\r\n            if (MODES_WITH_DELAYED_FOCUS.indexOf(editMode) !== -1) {\r\n                $editingCell = that.getFocusedCellInRow(that._getVisibleEditRowIndex());\r\n                that._delayedInputFocus($editingCell, function() {\r\n                    $editingCell && that.component.focus($editingCell)\r\n                })\r\n            }\r\n        },\r\n        _showEditPopup: function(rowIndex, repaintForm) {\r\n            var that = this;\r\n            var isMobileDevice = \"desktop\" !== _devices2.default.current().deviceType;\r\n            var popupOptions = (0, _extend.extend)({\r\n                showTitle: false,\r\n                fullScreen: isMobileDevice,\r\n                toolbarItems: [{\r\n                    toolbar: \"bottom\",\r\n                    location: \"after\",\r\n                    widget: \"dxButton\",\r\n                    options: that._getSaveButtonConfig()\r\n                }, {\r\n                    toolbar: \"bottom\",\r\n                    location: \"after\",\r\n                    widget: \"dxButton\",\r\n                    options: that._getCancelButtonConfig()\r\n                }],\r\n                contentTemplate: that._getPopupEditFormTemplate(rowIndex)\r\n            }, that.option(EDITING_POPUP_OPTION_NAME));\r\n            if (!that._editPopup) {\r\n                var $popupContainer = (0, _renderer2.default)(\"<div>\").appendTo(that.component.$element()).addClass(that.addWidgetPrefix(EDIT_POPUP_CLASS));\r\n                that._editPopup = that._createComponent($popupContainer, _popup2.default, {});\r\n                that._editPopup.on(\"hiding\", that._getEditPopupHiddenHandler());\r\n                that._editPopup.on(\"shown\", function(e) {\r\n                    _events_engine2.default.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\" + SCROLLABLE_CONTAINER_CLASS).first(), \"focus\");\r\n                    if (repaintForm) {\r\n                        that._editForm && that._editForm.repaint()\r\n                    }\r\n                })\r\n            }\r\n            that._editPopup.option(popupOptions);\r\n            that._editPopup.show()\r\n        },\r\n        _repaintEditPopup: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            if (this._editPopup && this._editPopup.option(\"visible\") && rowIndex >= 0) {\r\n                var defaultAnimation = this._editPopup.option(\"animation\");\r\n                this._editPopup.option(\"animation\", null);\r\n                this._showEditPopup(rowIndex, true);\r\n                this._editPopup.option(\"animation\", defaultAnimation)\r\n            }\r\n        },\r\n        _getEditPopupHiddenHandler: function() {\r\n            var that = this;\r\n            return function(e) {\r\n                if (that.isEditing()) {\r\n                    that.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: function(rowIndex) {\r\n            var that = this;\r\n            var row = that.component.getVisibleRows()[rowIndex];\r\n            var templateOptions = {\r\n                row: row,\r\n                rowType: row.rowType,\r\n                key: row.key\r\n            };\r\n            return function(container) {\r\n                var formTemplate = that.getEditFormTemplate();\r\n                var scrollable = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo(container), _ui4.default);\r\n                that._$popupContent = scrollable.$content();\r\n                formTemplate(that._$popupContent, templateOptions, true)\r\n            }\r\n        },\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeEditDataItem: function(index) {\r\n            if (index >= 0) {\r\n                this._editData.splice(index, 1)\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            var _this6 = this;\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(function() {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                _this6._lastOperation = null\r\n            }).fail(function() {\r\n                deferred.reject();\r\n                _this6._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return _deferred.when.apply(void 0, _toConsumableArray(this._deferreds))\r\n        },\r\n        editCell: function(rowIndex, columnIndex) {\r\n            var _this7 = this;\r\n            var d = new _deferred.Deferred;\r\n            var coreResult;\r\n            this.executeOperation(d, function() {\r\n                coreResult = _this7._editCellCore(rowIndex, columnIndex);\r\n                (0, _deferred.when)(coreResult).done(d.resolve).fail(d.reject)\r\n            });\r\n            return void 0 !== coreResult ? coreResult : d.promise()\r\n        },\r\n        _editCellCore: function(rowIndex, columnIndex) {\r\n            var that = this;\r\n            var columnsController = that._columnsController;\r\n            var dataController = that._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            var oldColumn = visibleColumns[that._editColumnIndex];\r\n            if (_type2.default.isString(columnIndex)) {\r\n                columnIndex = columnsController.columnOption(columnIndex, \"index\");\r\n                columnIndex = columnsController.getVisibleIndex(columnIndex)\r\n            }\r\n            var column = params.column = visibleColumns[columnIndex];\r\n            if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && !_isRowEditMode(that)) {\r\n                if (that.isEditCell(rowIndex, columnIndex)) {\r\n                    return true\r\n                }\r\n                var editRowIndex = rowIndex + dataController.getRowIndexOffset();\r\n                return (0, _deferred.when)(that._beforeEditCell(rowIndex, columnIndex, item)).done(function(cancel) {\r\n                    if (cancel) {\r\n                        return\r\n                    }\r\n                    if (that._prepareEditCell(params, item, columnIndex, editRowIndex)) {\r\n                        _common2.default.deferRender(function() {\r\n                            that._repaintEditCell(column, oldColumn, oldEditRowIndex)\r\n                        })\r\n                    } else {\r\n                        that._processCanceledEditingCell()\r\n                    }\r\n                })\r\n            }\r\n            return false\r\n        },\r\n        _processCanceledEditingCell: function() {},\r\n        _prepareEditCell: function(params, item, editColumnIndex, editRowIndex) {\r\n            var that = this;\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (that._isEditingStart(params)) {\r\n                return false\r\n            }\r\n            that._editRowIndex = editRowIndex;\r\n            that._editColumnIndex = editColumnIndex;\r\n            that._pageIndex = that._dataController.pageIndex();\r\n            that._addEditData({\r\n                data: {},\r\n                key: item.key,\r\n                oldData: item.data\r\n            });\r\n            return true\r\n        },\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            var that = this;\r\n            var rowsView = that._rowsView;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                that._editCellInProgress = true;\r\n                that.getController(\"editorFactory\").loseFocus();\r\n                that._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, that._getVisibleEditRowIndex()]\r\n                })\r\n            }\r\n            var $cell = rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), that._editColumnIndex);\r\n            if ($cell && !$cell.find(\":focus\").length) {\r\n                that._focusEditingCell(function() {\r\n                    that._editCellInProgress = false\r\n                }, $cell, true)\r\n            } else {\r\n                that._editCellInProgress = false\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var that = this;\r\n\r\n            function inputFocus() {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    (0, _uiGrid_core3.focusAndSelectElement)(that, $focusableElement)\r\n                }\r\n                that._beforeFocusCallback = null\r\n            }\r\n            if (_devices2.default.real().ios || _devices2.default.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (that._beforeFocusCallback) {\r\n                    that._beforeFocusCallback()\r\n                }\r\n                clearTimeout(that._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    that._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                that._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var that = this;\r\n            var rowsView = that.getView(\"rowsView\");\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), that._editColumnIndex);\r\n            that._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n        },\r\n        removeRow: function(rowIndex) {\r\n            _ui2.default.log(\"W0002\", \"dxDataGrid\", \"removeRow\", \"15.2\", \"Use the 'deleteRow' method instead\");\r\n            return this.deleteRow(rowIndex)\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            var _this8 = this;\r\n            if (\"cell\" === this.option(\"editing.mode\") && this.isEditing()) {\r\n                var isNewRow = this._dataController.items()[rowIndex].isNewRow;\r\n                this.closeEditCell(null, isNewRow).always(function() {\r\n                    _this8._checkAndDeleteRow(rowIndex)\r\n                })\r\n            } else {\r\n                this._checkAndDeleteRow(rowIndex)\r\n            }\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var that = this;\r\n            var editingOptions = that.option(\"editing\");\r\n            var editingTexts = editingOptions && editingOptions.texts;\r\n            var isBatchMode = editingOptions && editingOptions.mode === EDIT_MODE_BATCH;\r\n            var confirmDelete = editingOptions && editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = editingTexts && editingTexts.confirmDeleteMessage;\r\n            var item = that._dataController.items()[rowIndex];\r\n            var allowDeleting = isBatchMode || !that.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (isBatchMode || !confirmDelete || !confirmDeleteMessage) {\r\n                    that._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = _type2.default.isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    _dialog2.default.confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function(confirmResult) {\r\n                        if (confirmResult) {\r\n                            that._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var isBatchMode = this.option(\"editing.mode\") === EDIT_MODE_BATCH;\r\n            this.refresh();\r\n            var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, this._editData);\r\n            if (editIndex >= 0) {\r\n                if (this._editData[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeEditDataItem(editIndex)\r\n                } else {\r\n                    this._addEditData({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addEditData({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            if (isBatchMode) {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, rowIndex]\r\n                })\r\n            } else {\r\n                this.saveEditData()\r\n            }\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            if (item) {\r\n                var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\r\n                if (editIndex >= 0) {\r\n                    var editData = that._editData[editIndex];\r\n                    if (_type2.default.isEmptyObject(editData.data)) {\r\n                        that._removeEditDataItem(editIndex)\r\n                    } else {\r\n                        that._addEditData({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _saveEditDataCore: function(deferreds, results, changes) {\r\n            var that = this;\r\n            var store = that._dataController.store();\r\n            var isDataSaved = true;\r\n\r\n            function executeEditingAction(actionName, params, func) {\r\n                var deferred = new _deferred.Deferred;\r\n                that.executeAction(actionName, params);\r\n                (0, _deferred.when)((0, _deferred.fromPromise)(params.cancel)).done(function(cancel) {\r\n                    if (cancel) {\r\n                        setTimeout(function() {\r\n                            deferred.resolve(\"cancel\")\r\n                        })\r\n                    } else {\r\n                        func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                    }\r\n                }).fail(createFailureHandler(deferred));\r\n                return deferred\r\n            }(0, _iterator.each)(that._editData, function(index, editData) {\r\n                var data = editData.data;\r\n                var oldData = editData.oldData;\r\n                var type = editData.type;\r\n                var deferred;\r\n                var params;\r\n                if (that._beforeSaveEditData(editData, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: editData.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = executeEditingAction(\"onRowRemoving\", params, function() {\r\n                            return store.remove(editData.key).done(function(key) {\r\n                                changes.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            })\r\n                        });\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = executeEditingAction(\"onRowInserting\", params, function() {\r\n                            return store.insert(params.data).done(function(data, key) {\r\n                                if (_type2.default.isDefined(key)) {\r\n                                    editData.key = key\r\n                                }\r\n                                if (data && _type2.default.isObject(data) && data !== params.data) {\r\n                                    editData.data = data\r\n                                }\r\n                                changes.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            })\r\n                        });\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: editData.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = executeEditingAction(\"onRowUpdating\", params, function() {\r\n                            return store.update(editData.key, params.newData).done(function(data, key) {\r\n                                if (data && _type2.default.isObject(data) && data !== params.newData) {\r\n                                    editData.data = data\r\n                                }\r\n                                changes.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            })\r\n                        })\r\n                }\r\n                if (deferred) {\r\n                    var doneDeferred = new _deferred.Deferred;\r\n                    deferred.always(function(data) {\r\n                        isDataSaved = \"cancel\" !== data;\r\n                        results.push({\r\n                            key: editData.key,\r\n                            result: data\r\n                        })\r\n                    }).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            });\r\n            return isDataSaved\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var that = this;\r\n            var hasSavedData = false;\r\n            var editMode = _getEditMode(that);\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = (0, _uiGrid_core3.getIndexByKey)(results[i].key, that._editData);\r\n                var editData = that._editData[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (editData) {\r\n                        editData.error = arg\r\n                    }\r\n                    that._fireDataErrorOccurred(arg);\r\n                    if (editMode !== EDIT_MODE_BATCH) {\r\n                        if (editData && editData.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                            that._removeEditDataItem(editIndex)\r\n                        }\r\n                        break\r\n                    }\r\n                } else {\r\n                    if (!cancel || !editData || editMode !== EDIT_MODE_BATCH && editData.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                        that._removeEditDataItem(editIndex);\r\n                        hasSavedData = !cancel\r\n                    }\r\n                }\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(editData) {\r\n            var that = this;\r\n            (0, _iterator.each)(editData, function(_, itemData) {\r\n                var data = itemData.data;\r\n                var key = itemData.key;\r\n                var type = itemData.type;\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (itemData.error) {\r\n                    params.error = itemData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        that.executeAction(\"onRowRemoved\", (0, _extend.extend)({}, params, {\r\n                            data: itemData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        that.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        that.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var _this9 = this;\r\n            var deferred = new _deferred.Deferred;\r\n            var afterSaveEditData = function(cancel) {\r\n                (0, _deferred.when)(_this9._afterSaveEditData(cancel)).done(function() {\r\n                    deferred.resolve()\r\n                })\r\n            };\r\n            this.waitForDeferredOperations().done(function() {\r\n                if (_this9._saving) {\r\n                    afterSaveEditData();\r\n                    return\r\n                }(0, _deferred.when)(_this9._beforeSaveEditData()).done(function(cancel) {\r\n                    if (cancel) {\r\n                        afterSaveEditData(cancel);\r\n                        return\r\n                    }\r\n                    _this9._saveEditDataInner().done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _saveEditDataInner: function() {\r\n            var _this10 = this;\r\n            var results = [];\r\n            var deferreds = [];\r\n            var changes = [];\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var editMode = _getEditMode(this);\r\n            var result = new _deferred.Deferred;\r\n            var editData = this._editData.slice(0);\r\n            var resetEditIndices = function() {\r\n                if (editMode !== EDIT_MODE_CELL) {\r\n                    _this10._editColumnIndex = -1;\r\n                    _this10._editRowIndex = -1\r\n                }\r\n            };\r\n            var resetModifiedClassCells = function() {\r\n                if (editMode === EDIT_MODE_BATCH) {\r\n                    var columnsCount = _this10._columnsController.getVisibleColumns().length;\r\n                    editData.forEach(function(_ref) {\r\n                        var key = _ref.key;\r\n                        var rowIndex = _this10._dataController.getRowIndexByKey(key);\r\n                        if (rowIndex !== -1) {\r\n                            for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\r\n                                _this10._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            };\r\n            var afterSaveEditData = function(error) {\r\n                (0, _deferred.when)(_this10._afterSaveEditData()).done(function() {\r\n                    result.resolve(error)\r\n                })\r\n            };\r\n            if (!this._saveEditDataCore(deferreds, results, changes) && editMode === EDIT_MODE_CELL) {\r\n                this._focusEditingCell()\r\n            }\r\n            if (deferreds.length) {\r\n                this._saving = true;\r\n                dataSource && dataSource.beginLoading();\r\n                _deferred.when.apply(_renderer2.default, deferreds).done(function() {\r\n                    if (_this10._processSaveEditDataResult(results)) {\r\n                        resetModifiedClassCells();\r\n                        resetEditIndices();\r\n                        if (editMode === EDIT_MODE_POPUP && _this10._editPopup) {\r\n                            _this10._editPopup.hide()\r\n                        }\r\n                        dataSource && dataSource.endLoading();\r\n                        var refreshMode = _this10.option(\"editing.refreshMode\");\r\n                        var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n                        if (!isFullRefresh) {\r\n                            dataController.push(changes)\r\n                        }(0, _deferred.when)(dataController.refresh({\r\n                            selection: isFullRefresh,\r\n                            reload: isFullRefresh,\r\n                            load: \"reshape\" === refreshMode,\r\n                            changesOnly: _this10.option(\"repaintChangesOnly\")\r\n                        })).always(function() {\r\n                            _this10._fireSaveEditDataEvents(editData)\r\n                        }).done(function() {\r\n                            afterSaveEditData()\r\n                        }).fail(function(error) {\r\n                            afterSaveEditData(error)\r\n                        })\r\n                    } else {\r\n                        dataSource && dataSource.endLoading();\r\n                        result.resolve()\r\n                    }\r\n                }).fail(function(error) {\r\n                    dataSource && dataSource.endLoading();\r\n                    result.resolve(error)\r\n                });\r\n                return result.always(function() {\r\n                    _this10._focusEditingCell();\r\n                    _this10._saving = false\r\n                }).promise()\r\n            }\r\n            if (_isRowEditMode(this)) {\r\n                if (!this.hasChanges()) {\r\n                    this.cancelEditData()\r\n                }\r\n            } else {\r\n                if (CELL_BASED_MODES.indexOf(editMode) !== -1) {\r\n                    resetEditIndices();\r\n                    dataController.updateItems()\r\n                } else {\r\n                    this._focusEditingCell()\r\n                }\r\n            }\r\n            afterSaveEditData();\r\n            return result.promise()\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var that = this;\r\n            var isEditColumnVisible = that._isEditColumnVisible();\r\n            var useIcons = that.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            that._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: that._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            that._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var that = this;\r\n            var editingOptions = that.option(\"editing\");\r\n            if (editingOptions) {\r\n                var editMode = _getEditMode(that);\r\n                var isVisibleWithCurrentEditMode = false;\r\n                switch (editMode) {\r\n                    case EDIT_MODE_ROW:\r\n                        isVisibleWithCurrentEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\r\n                        break;\r\n                    case EDIT_MODE_FORM:\r\n                    case EDIT_MODE_POPUP:\r\n                        isVisibleWithCurrentEditMode = editingOptions.allowUpdating\r\n                }\r\n                return editingOptions.allowDeleting || isVisibleWithCurrentEditMode\r\n            }\r\n        },\r\n        _updateEditButtons: function() {\r\n            var that = this;\r\n            var headerPanel = that.getView(\"headerPanel\");\r\n            var hasChanges = that.hasChanges();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", !hasChanges);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", !hasChanges)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: function() {},\r\n        cancelEditData: function() {\r\n            var that = this;\r\n            var editMode = _getEditMode(that);\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            var dataController = that._dataController;\r\n            that._beforeCancelEditData();\r\n            that.init();\r\n            if (ROW_BASED_MODES.indexOf(editMode) !== -1 && rowIndex >= 0) {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [rowIndex, rowIndex + 1]\r\n                })\r\n            } else {\r\n                dataController.updateItems({\r\n                    repaintChangesOnly: that.option(\"repaintChangesOnly\")\r\n                })\r\n            }\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                that._hideEditPopup()\r\n            }\r\n        },\r\n        _hideEditPopup: function() {\r\n            this._editPopup && this._editPopup.option(\"visible\", false)\r\n        },\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        closeEditCell: function(isError, withoutSaveEditData) {\r\n            var _this11 = this;\r\n            var that = this;\r\n            var result = _deferred2.default.when();\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            if (!_isRowEditMode(that)) {\r\n                result = _deferred2.default.Deferred();\r\n                this.executeOperation(result, function() {\r\n                    _this11._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData);\r\n                    result.resolve()\r\n                })\r\n            }\r\n            return result.promise()\r\n        },\r\n        _closeEditCellCore: function(isError, oldEditRowIndex, withoutSaveEditData) {\r\n            var that = this;\r\n            var editMode = _getEditMode(that);\r\n            var dataController = that._dataController;\r\n            if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\r\n                if (!withoutSaveEditData) {\r\n                    that.saveEditData().done(function(error) {\r\n                        if (!that.hasChanges()) {\r\n                            that.closeEditCell(!!error)\r\n                        }\r\n                    })\r\n                }\r\n            } else {\r\n                if (oldEditRowIndex >= 0) {\r\n                    var rowIndices = [oldEditRowIndex];\r\n                    that._editRowIndex = -1;\r\n                    that._editColumnIndex = -1;\r\n                    that._beforeCloseEditCellInBatchMode(rowIndices);\r\n                    if (!isError) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndices\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        update: function(changeType) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            if (dataController && that._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    that.refresh(true)\r\n                }\r\n                that._pageIndex = dataController.pageIndex()\r\n            }\r\n            that._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            var _this12 = this;\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(function() {\r\n                    var index = _this12._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        _this12._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareEditDataParams: function(options, value, text) {\r\n            var _options$row;\r\n            var that = this;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var $cellElement = (0, _renderer2.default)(options.cellElement);\r\n            var editMode = _getEditMode(that);\r\n            var deferred = new _deferred.Deferred;\r\n            if (void 0 !== rowKey) {\r\n                if (editMode === EDIT_MODE_BATCH) {\r\n                    that._applyModified($cellElement, options)\r\n                }\r\n                options.value = value;\r\n                var setCellValueResult = (0, _deferred.fromPromise)(options.column.setCellValue(newData, value, (0, _extend.extend)(true, {}, oldData), text));\r\n                setCellValueResult.done(function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                }).fail(createFailureHandler(deferred)).fail(function(arg) {\r\n                    return that._fireDataErrorOccurred(arg)\r\n                });\r\n                if (_type2.default.isDefined(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                if (options.values) {\r\n                    options.values[options.columnIndex] = value\r\n                }\r\n                that.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var _this13 = this;\r\n            var rowKey = options.key;\r\n            var deferred = new _deferred.Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareEditDataParams(options, value, text).done(function(params) {\r\n                    (0, _deferred.when)(_this13._applyEditDataParams(options, params, forceUpdateRow)).always(function() {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            var that = this;\r\n            if (that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                that._focusEditingCell();\r\n                that._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = visibleColumns[this._editColumnIndex]\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(function(visibleColumn) {\r\n                return visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue\r\n            });\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyEditDataParams: function(options, params, forceUpdateRow) {\r\n            var that = this;\r\n            var editMode = _getEditMode(that);\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var showEditorAlways = options.column.showEditorAlways;\r\n            var isUpdateInCellMode = editMode === EDIT_MODE_CELL && options.row && !options.row.isNewRow;\r\n            var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex);\r\n            if (focusPreviousEditingCell) {\r\n                that._focusEditingCell();\r\n                that._updateEditRow(options.row, true, isCustomSetCellValue);\r\n                return\r\n            }\r\n            that._addEditData(params, options.row);\r\n            that._updateEditButtons();\r\n            if (showEditorAlways && !forceUpdateRow) {\r\n                if (isUpdateInCellMode) {\r\n                    that._editRowIndex = options.row.rowIndex + that._dataController.getRowIndexOffset();\r\n                    that._editColumnIndex = options.columnIndex;\r\n                    return that.saveEditData()\r\n                } else {\r\n                    if (editMode === EDIT_MODE_BATCH) {\r\n                        forceUpdateRow = that._needUpdateRow(options.column)\r\n                    }\r\n                }\r\n            }\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    that._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else {\r\n                    if (row.update) {\r\n                        row.update()\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            var that = this;\r\n            var editForm = that._editForm;\r\n            var editMode = _getEditMode(that);\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                if (that.option(\"repaintChangesOnly\")) {\r\n                    row.update && row.update(row)\r\n                } else {\r\n                    if (editForm) {\r\n                        that._updateEditFormDeferred = (new _deferred.Deferred).done(function() {\r\n                            return editForm.repaint()\r\n                        });\r\n                        if (!that._updateLockCount) {\r\n                            that._updateEditFormDeferred.resolve()\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                that._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: that._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n                })\r\n            }\r\n            if (isCustomSetCellValue && that._editForm && !row.isNewRow) {\r\n                that._editForm.validate()\r\n            }\r\n        },\r\n        _endUpdateCore: function() {\r\n            this._updateEditFormDeferred && this._updateEditFormDeferred.resolve()\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            var that = this;\r\n            if (forceUpdateRow || !_isRowEditMode(that)) {\r\n                that._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n                if (!forceUpdateRow) {\r\n                    that._focusEditingCell()\r\n                }\r\n            } else {\r\n                var deferred = new _deferred.Deferred;\r\n                that.addDeferred(deferred);\r\n                setTimeout(function() {\r\n                    var $focusedElement = (0, _renderer2.default)(_dom_adapter2.default.getActiveElement());\r\n                    var columnIndex = that._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                    var focusedElement = $focusedElement.get(0);\r\n                    var selectionRange = (0, _uiGrid_core3.getSelectionRange)(focusedElement);\r\n                    that._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                    if (columnIndex >= 0) {\r\n                        var $focusedItem = that._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                        that._delayedInputFocus($focusedItem, function() {\r\n                            setTimeout(function() {\r\n                                focusedElement = _dom_adapter2.default.getActiveElement();\r\n                                if (selectionRange.selectionStart >= 0) {\r\n                                    (0, _uiGrid_core3.setSelectionRange)(focusedElement, selectionRange)\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                    deferred.resolve()\r\n                })\r\n            }\r\n        },\r\n        _addEditData: function(options, row) {\r\n            var that = this;\r\n            var editDataIndex = (0, _uiGrid_core3.getIndexByKey)(options.key, that._editData);\r\n            if (editDataIndex < 0) {\r\n                editDataIndex = that._editData.length;\r\n                that._editData.push(options)\r\n            }\r\n            if (that._editData[editDataIndex]) {\r\n                if (options.data) {\r\n                    that._editData[editDataIndex].data = (0, _uiGrid_core3.createObjectWithChanges)(that._editData[editDataIndex].data, options.data)\r\n                }\r\n                if ((!that._editData[editDataIndex].type || !options.data) && options.type) {\r\n                    that._editData[editDataIndex].type = options.type\r\n                }\r\n                if (row) {\r\n                    row.oldData = that._editData[editDataIndex].oldData;\r\n                    row.data = (0, _uiGrid_core3.createObjectWithChanges)(row.data, options.data)\r\n                }\r\n            }\r\n            return editDataIndex\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || getDefaultEditorTemplate(this)\r\n        },\r\n        renderFormEditTemplate: function(detailCellOptions, item, form, container, isReadOnly) {\r\n            var that = this;\r\n            var $container = (0, _renderer2.default)(container);\r\n            var column = item.column;\r\n            var editorType = getEditorType(item);\r\n            var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\r\n            var cellOptions = (0, _extend.extend)({}, detailCellOptions, {\r\n                data: rowData,\r\n                cellElement: null,\r\n                isOnForm: true,\r\n                item: item,\r\n                column: (0, _extend.extend)({}, column, {\r\n                    editorType: editorType,\r\n                    editorOptions: item.editorOptions\r\n                }),\r\n                id: form.getItemID(item.name || item.dataField),\r\n                columnIndex: column.index,\r\n                setValue: !isReadOnly && column.allowEditing && function(value) {\r\n                    that.updateFieldValue(cellOptions, value)\r\n                }\r\n            });\r\n            cellOptions.value = column.calculateCellValue(rowData);\r\n            var template = that._getFormEditItemTemplate.bind(that)(cellOptions, column);\r\n            that._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest((0, _window.getWindow)().document).length).done(function() {\r\n                that._rowsView._updateCell($container, cellOptions)\r\n            });\r\n            return cellOptions\r\n        },\r\n        getFormEditorTemplate: function(cellOptions, item) {\r\n            var that = this;\r\n            var column = this.component.columnOption(item.dataField);\r\n            return function(options, container) {\r\n                var $container = (0, _renderer2.default)(container);\r\n                cellOptions.row.watch && cellOptions.row.watch(function() {\r\n                    return column.selector(cellOptions.row.data)\r\n                }, function() {\r\n                    var _validator;\r\n                    var $editorElement = $container.find(\".dx-widget\").first();\r\n                    var validator = $editorElement.data(\"dxValidator\");\r\n                    var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\r\n                    $container.contents().remove();\r\n                    cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\r\n                    $editorElement = $container.find(\".dx-widget\").first();\r\n                    validator = $editorElement.data(\"dxValidator\");\r\n                    if (validatorOptions && !validator) {\r\n                        $editorElement.dxValidator({\r\n                            validationRules: validatorOptions.validationRules,\r\n                            validationGroup: validatorOptions.validationGroup,\r\n                            dataGetter: validatorOptions.dataGetter\r\n                        })\r\n                    }\r\n                });\r\n                cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container)\r\n            }\r\n        },\r\n        getEditFormTemplate: function() {\r\n            var that = this;\r\n            return function($container, detailOptions, renderFormOnly) {\r\n                var editFormOptions = that.option(\"editing.form\");\r\n                var items = that.option(\"editing.form.items\");\r\n                var userCustomizeItem = that.option(\"editing.form.customizeItem\");\r\n                var editData = that._editData[(0, _uiGrid_core3.getIndexByKey)(detailOptions.key, that._editData)];\r\n                var editFormItemClass = that.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\r\n                var isCustomEditorType = {};\r\n                if (!items) {\r\n                    var columns = that.getController(\"columns\").getColumns();\r\n                    items = [];\r\n                    (0, _iterator.each)(columns, function(_, column) {\r\n                        if (!column.isBand && !column.type) {\r\n                            items.push({\r\n                                column: column,\r\n                                name: column.name,\r\n                                dataField: column.dataField\r\n                            })\r\n                        }\r\n                    })\r\n                } else {\r\n                    forEachFormItems(items, function(item) {\r\n                        var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\r\n                        if (itemId) {\r\n                            isCustomEditorType[itemId] = !!item.editorType\r\n                        }\r\n                    })\r\n                }\r\n                that._firstFormItem = void 0;\r\n                that._editForm = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($container), _form2.default, (0, _extend.extend)({}, editFormOptions, {\r\n                    items: items,\r\n                    formID: \"dx-\" + new _guid2.default,\r\n                    validationGroup: editData,\r\n                    customizeItem: function(item) {\r\n                        var column;\r\n                        var itemId = item.name || item.dataField;\r\n                        if (item.column || itemId) {\r\n                            column = item.column || that._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField)\r\n                        }\r\n                        if (column) {\r\n                            item.label = item.label || {};\r\n                            item.label.text = item.label.text || column.caption;\r\n                            item.template = item.template || that.getFormEditorTemplate(detailOptions, item);\r\n                            item.column = column;\r\n                            item.isCustomEditorType = isCustomEditorType[itemId];\r\n                            if (column.formItem) {\r\n                                (0, _extend.extend)(item, column.formItem)\r\n                            }\r\n                            if (void 0 === item.isRequired && column.validationRules) {\r\n                                item.isRequired = column.validationRules.some(function(rule) {\r\n                                    return \"required\" === rule.type\r\n                                });\r\n                                item.validationRules = []\r\n                            }\r\n                            var itemVisible = _type2.default.isDefined(item.visible) ? item.visible : true;\r\n                            if (!that._firstFormItem && itemVisible) {\r\n                                that._firstFormItem = item\r\n                            }\r\n                        }\r\n                        userCustomizeItem && userCustomizeItem.call(this, item);\r\n                        item.cssClass = _type2.default.isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass\r\n                    }\r\n                }));\r\n                if (!renderFormOnly) {\r\n                    var $buttonsContainer = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\r\n                    that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($buttonsContainer), _button2.default, that._getSaveButtonConfig());\r\n                    that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($buttonsContainer), _button2.default, that._getCancelButtonConfig())\r\n                }\r\n                that._editForm.on(\"contentReady\", function() {\r\n                    that._editPopup && that._editPopup.repaint()\r\n                })\r\n            }\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var that = this;\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = _isRowEditMode(that);\r\n            var isRowEditing = that.isEditRow(rowIndex);\r\n            var isCellEditing = that.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = that.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowMode && isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        that._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = function(value, text) {\r\n                            that.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || getDefaultEditorTemplate(that)\r\n            } else {\r\n                if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                    template = that.getEditFormTemplate(options)\r\n                }\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options) {\r\n            var that = this;\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = that.option(\"editing.useIcons\");\r\n            var $button = (0, _renderer2.default)(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template) {\r\n                that._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = _icon2.default.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = _icon2.default.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", _message2.default.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if (_type2.default.isDefined(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                _events_engine2.default.on($button, (0, _utils.addNamespace)(\"click\", EDITING_NAMESPACE), that.createAction(function(e) {\r\n                    button.onClick.call(button, (0, _extend.extend)({}, e, {\r\n                        row: options.row,\r\n                        column: options.column\r\n                    }));\r\n                    e.event.preventDefault();\r\n                    e.event.stopPropagation()\r\n                }));\r\n                $container.append($button, \"&nbsp;\")\r\n            }\r\n        },\r\n        getButtonLocalizationNames: function() {\r\n            return {\r\n                edit: \"dxDataGrid-editingEditRow\",\r\n                save: \"dxDataGrid-editingSaveRowChanges\",\r\n                \"delete\": \"dxDataGrid-editingDeleteRow\",\r\n                undelete: \"dxDataGrid-editingUndeleteRow\",\r\n                cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var that = this;\r\n            var editingOptions = that.option(\"editing\") || {};\r\n            var editingTexts = that.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var classNameButtonByNames = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            };\r\n            var buttonItems = [];\r\n            var prepareButtonItem = function(name, methodName, sortIndex) {\r\n                var className = classNameButtonByNames[name];\r\n                var onInitialized = function(e) {\r\n                    (0, _renderer2.default)(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + that.addWidgetPrefix(className) + \"-button\"))\r\n                };\r\n                var hintText = titleButtonTextByClassNames[name];\r\n                var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && !that.hasChanges();\r\n                return {\r\n                    widget: \"dxButton\",\r\n                    options: {\r\n                        onInitialized: onInitialized,\r\n                        icon: \"edit-button-\" + className,\r\n                        disabled: isButtonDisabled,\r\n                        onClick: function() {\r\n                            setTimeout(function() {\r\n                                that[methodName]()\r\n                            })\r\n                        },\r\n                        text: hintText,\r\n                        hint: hintText\r\n                    },\r\n                    showText: \"inMenu\",\r\n                    name: name + \"Button\",\r\n                    location: \"after\",\r\n                    locateInMenu: \"auto\",\r\n                    sortIndex: sortIndex\r\n                }\r\n            };\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(prepareButtonItem(\"addRow\", \"addRow\", 20))\r\n            }\r\n            if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && _getEditMode(that) === EDIT_MODE_BATCH) {\r\n                buttonItems.push(prepareButtonItem(\"save\", \"saveEditData\", 21));\r\n                buttonItems.push(prepareButtonItem(\"revert\", \"cancelEditData\", 22))\r\n            }\r\n            return buttonItems\r\n        },\r\n        showHighlighting: function($cell) {\r\n            var $highlight = $cell.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\r\n            if (\"TD\" === $cell.get(0).tagName && !$highlight.length) {\r\n                $cell.wrapInner((0, _renderer2.default)(\"<div>\").addClass(CELL_HIGHLIGHT_OUTLINE + \" \" + POINTER_EVENTS_TARGET_CLASS))\r\n            }\r\n        },\r\n        highlightDataCell: function($cell, parameters) {\r\n            var isEditableCell = parameters.setValue;\r\n            var cellModified = this.isCellModified(parameters);\r\n            if (cellModified && parameters.column.setCellValue) {\r\n                this.showHighlighting($cell);\r\n                $cell.addClass(CELL_MODIFIED)\r\n            } else {\r\n                if (isEditableCell) {\r\n                    this.showHighlighting($cell)\r\n                }\r\n            }\r\n        },\r\n        resetRowAndPageIndices: function() {\r\n            var that = this;\r\n            (0, _iterator.each)(that._editData, function(_, editData) {\r\n                if (editData.pageIndex !== that._pageIndex) {\r\n                    delete editData.pageIndex;\r\n                    delete editData.rowIndex\r\n                }\r\n            })\r\n        },\r\n        _afterInsertRow: function() {},\r\n        _beforeSaveEditData: function(editData) {\r\n            if (editData && !_type2.default.isDefined(editData.key) && _type2.default.isDefined(editData.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: function() {},\r\n        _beforeCancelEditData: function() {},\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if (_type2.default.isFunction(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        }\r\n    }\r\n}());\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: _message2.default.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: _message2.default.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: _message2.default.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: _message2.default.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: _message2.default.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: _message2.default.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: _message2.default.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: _message2.default.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: _message2.default.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\"\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editingController = this._editingController;\r\n                    var editRowIndex = editingController.getEditRowIndex();\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        editItem.isEditing = true;\r\n                        if (editingController.getEditMode() === EDIT_MODE_FORM) {\r\n                            editItem.rowType = \"detail\"\r\n                        }\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items())\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _correctRowIndices: function(getRowIndexCorrection) {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._editingController.correctEditRowIndex(getRowIndexCorrection)\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var isRowEditMode = editingController.isRowEditMode();\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed || isRowEditMode && oldItem.isEditing !== newItem.isEditing) {\r\n                        return\r\n                    }\r\n                    if (oldItem.rowType === newItem.rowType && isRowEditMode && editingController.isEditRow(rowIndex) && isLiveUpdate) {\r\n                        return []\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellElements: function(rowIndex) {\r\n                    var $cellElements = this.callBase(rowIndex);\r\n                    var editingController = this._editingController;\r\n                    var editForm = editingController.getEditForm();\r\n                    var editFormRowIndex = editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && $cellElements && editForm) {\r\n                        return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS)\r\n                    }\r\n                    return $cellElements\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        (0, _iterator.each)($cellElements, function(index, cellElement) {\r\n                            if ((0, _renderer2.default)(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        });\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getVisibleColumnIndex: function($cells, rowIndex, columnIdentifier) {\r\n                    var editFormRowIndex = this._editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && _type2.default.isString(columnIdentifier)) {\r\n                        var column = this._columnsController.columnOption(columnIdentifier);\r\n                        return this._getEditFormEditorVisibleIndex($cells, column)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getEditFormEditorVisibleIndex: function($cells, column) {\r\n                    var visibleIndex = -1;\r\n                    (0, _iterator.each)($cells, function(index, cellElement) {\r\n                        var item = (0, _renderer2.default)(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\r\n                        if (item && item.column && column && item.column.index === column.index) {\r\n                            visibleIndex = index;\r\n                            return false\r\n                        }\r\n                    });\r\n                    return visibleIndex\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var template = that._editingController.getColumnTemplate(options);\r\n                    return template || that.callBase(options)\r\n                },\r\n                _isNativeClick: function() {\r\n                    return (_devices2.default.real().ios || _devices2.default.real().android) && this.option(\"editing.allowUpdating\")\r\n                },\r\n                _createTable: function() {\r\n                    var that = this;\r\n                    var $table = that.callBase.apply(that, arguments);\r\n                    if (!_isRowEditMode(that) && that.option(\"editing.allowUpdating\")) {\r\n                        _events_engine2.default.on($table, (0, _utils.addNamespace)(_hold2.default.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", that.createAction(function() {\r\n                            var editingController = that._editingController;\r\n                            if (editingController.isEditing()) {\r\n                                editingController.closeEditCell()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isEditRow = editingController.isEditRow(row.rowIndex);\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        if (_getEditMode(this) === EDIT_MODE_BATCH) {\r\n                            isRowRemoved && $row.addClass(ROW_REMOVED)\r\n                        } else {\r\n                            isEditRow && $row.addClass(EDIT_ROW)\r\n                        }\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isEditRow || isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                        if (isEditRow && \"detail\" === row.rowType) {\r\n                            $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS))\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var that = this;\r\n                    var editingController = that._editingController;\r\n                    var $targetElement = (0, _renderer2.default)(e.event.target);\r\n                    var columnIndex = that._getColumnIndexByElement($targetElement);\r\n                    var row = that._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = that._columnsController.getVisibleColumns()[columnIndex];\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex));\r\n                    var startEditAction = that.option(\"editing.startEditAction\") || \"click\";\r\n                    if (\"down\" === eventName) {\r\n                        return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\r\n                        editingController.closeEditCell()\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    var _this14 = this;\r\n                    this._pointerDownTimeout = setTimeout(function() {\r\n                        _this14._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = (0, _renderer2.default)(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditing = parameters.isEditing || editingController.isEditRow(parameters.rowIndex) && parameters.column.allowEditing;\r\n                    if (\"data\" === parameters.rowType && !parameters.column.command && (isEditing || parameters.column.showEditorAlways)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.addClass(EDITOR_CELL_CLASS).toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    if (parameters.column && !isCommandCell) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: function($cell) {},\r\n                _formItemPrepared: function() {},\r\n                _isFormItem: function(parameters) {\r\n                    var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\r\n                    var isPopupEditing = \"data\" === parameters.rowType && \"popup\" === _getEditMode(this);\r\n                    return (isDetailRow || isPopupEditing) && parameters.item\r\n                },\r\n                _updateCell: function($cell, parameters) {\r\n                    if (this._isFormItem(parameters)) {\r\n                        this._formItemPrepared(parameters, $cell)\r\n                    } else {\r\n                        this.callBase($cell, parameters)\r\n                    }\r\n                },\r\n                _update: function(change) {\r\n                    this.callBase(change);\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED)\r\n                    }\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _renderCellContent: function($cell, options) {\r\n                    if (\"data\" === options.rowType && _getEditMode(this) === EDIT_MODE_POPUP && false === options.row.visible) {\r\n                        return\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var isEditingPopupOption = fullName && 0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME);\r\n                            if (!isEditingPopupOption) {\r\n                                this._invalidate()\r\n                            }\r\n                            this.callBase(args);\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var that = this;\r\n                    var editingOptions = that.getController(\"editing\").option(\"editing\");\r\n                    return that.callBase() || editingOptions && (editingOptions.allowAdding || (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}