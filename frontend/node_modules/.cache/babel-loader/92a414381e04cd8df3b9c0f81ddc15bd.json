{"ast":null,"code":"/**\r\n * DevExtreme (localization/intl/number.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _config = require(\"../../core/config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = require(\"../core\");\n\nvar _open_xml_currency_format = require(\"../open_xml_currency_format\");\n\nvar _open_xml_currency_format2 = _interopRequireDefault(_open_xml_currency_format);\n\nvar _accounting_formats = require(\"../cldr-data/accounting_formats\");\n\nvar _accounting_formats2 = _interopRequireDefault(_accounting_formats);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\nvar formattersCache = {};\n\nvar getFormatter = function (format) {\n  var key = (0, _core.locale)() + \"/\" + JSON.stringify(format);\n\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.NumberFormat((0, _core.locale)(), format).format;\n  }\n\n  return formattersCache[key];\n};\n\nvar getCurrencyFormatter = function (currency) {\n  return new Intl.NumberFormat((0, _core.locale)(), {\n    style: \"currency\",\n    currency: currency\n  });\n};\n\nmodule.exports = {\n  engine: function () {\n    return \"intl\";\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return getFormatter(this._normalizeFormatConfig(format, formatConfig))(value);\n  },\n  _normalizeFormatConfig: function (format, formatConfig, value) {\n    var config;\n\n    if (\"decimal\" === format) {\n      config = {\n        minimumIntegerDigits: formatConfig.precision || void 0,\n        useGrouping: false,\n        maximumFractionDigits: String(value).length,\n        round: value < 0 ? \"ceil\" : \"floor\"\n      };\n    } else {\n      config = this._getPrecisionConfig(formatConfig.precision);\n    }\n\n    if (\"percent\" === format) {\n      config.style = \"percent\";\n    } else {\n      if (\"currency\" === format) {\n        config.style = \"currency\";\n        config.currency = formatConfig.currency || (0, _config2.default)().defaultCurrency;\n      }\n    }\n\n    return config;\n  },\n  _getPrecisionConfig: function (precision) {\n    var config;\n\n    if (null === precision) {\n      config = {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20\n      };\n    } else {\n      config = {\n        minimumFractionDigits: precision || 0,\n        maximumFractionDigits: precision || 0\n      };\n    }\n\n    return config;\n  },\n  format: function (value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n\n    _format = this._normalizeFormat(_format);\n\n    if (\"default\" === _format.currency) {\n      _format.currency = (0, _config2.default)().defaultCurrency;\n    }\n\n    if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\n      return getFormatter(_format)(value);\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _getCurrencySymbolInfo: function (currency) {\n    var formatter = getCurrencyFormatter(currency);\n    return this._extractCurrencySymbolInfo(formatter.format(0));\n  },\n  _extractCurrencySymbolInfo: function (currencyValueString) {\n    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\n    var position = match[1] ? \"before\" : \"after\";\n    var symbol = match[1] || match[4] || \"\";\n    var delimiter = match[2] || match[3] || \"\";\n    return {\n      position: position,\n      symbol: symbol,\n      delimiter: delimiter\n    };\n  },\n  getCurrencySymbol: function (currency) {\n    if (!currency) {\n      currency = (0, _config2.default)().defaultCurrency;\n    }\n\n    var symbolInfo = this._getCurrencySymbolInfo(currency);\n\n    return {\n      symbol: symbolInfo.symbol\n    };\n  },\n  getOpenXmlCurrencyFormat: function (currency) {\n    var targetCurrency = currency || (0, _config2.default)().defaultCurrency;\n\n    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\n\n    var closestAccountingFormat = (0, _core.getValueByClosestLocale)(function (locale) {\n      return _accounting_formats2.default[locale];\n    });\n    return (0, _open_xml_currency_format2.default)(currencySymbol, closestAccountingFormat);\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/localization/intl/number.js"],"names":["_config","require","_config2","_interopRequireDefault","_core","_open_xml_currency_format","_open_xml_currency_format2","_accounting_formats","_accounting_formats2","obj","__esModule","detectCurrencySymbolRegex","formattersCache","getFormatter","format","key","locale","JSON","stringify","Intl","NumberFormat","getCurrencyFormatter","currency","style","module","exports","engine","_formatNumberCore","value","formatConfig","callBase","apply","arguments","_normalizeFormatConfig","config","minimumIntegerDigits","precision","useGrouping","maximumFractionDigits","String","length","round","_getPrecisionConfig","default","defaultCurrency","minimumFractionDigits","_format","_normalizeFormat","type","formatter","_getCurrencySymbolInfo","_extractCurrencySymbolInfo","currencyValueString","match","exec","position","symbol","delimiter","getCurrencySymbol","symbolInfo","getOpenXmlCurrencyFormat","targetCurrency","currencySymbol","closestAccountingFormat","getValueByClosestLocale"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AACA,IAAII,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAII,yBAAyB,GAAGJ,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAIK,0BAA0B,GAAGH,sBAAsB,CAACE,yBAAD,CAAvD;;AACA,IAAIE,mBAAmB,GAAGN,OAAO,CAAC,iCAAD,CAAjC;;AACA,IAAIO,oBAAoB,GAAGL,sBAAsB,CAACI,mBAAD,CAAjD;;AAEA,SAASJ,sBAAT,CAAgCM,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,yBAAyB,GAAG,yCAAhC;AACA,IAAIC,eAAe,GAAG,EAAtB;;AACA,IAAIC,YAAY,GAAG,UAASC,MAAT,EAAiB;AAChC,MAAIC,GAAG,GAAG,CAAC,GAAGX,KAAK,CAACY,MAAV,MAAsB,GAAtB,GAA4BC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAtC;;AACA,MAAI,CAACF,eAAe,CAACG,GAAD,CAApB,EAA2B;AACvBH,IAAAA,eAAe,CAACG,GAAD,CAAf,GAAuB,IAAII,IAAI,CAACC,YAAT,CAAsB,CAAC,GAAGhB,KAAK,CAACY,MAAV,GAAtB,EAA2CF,MAA3C,EAAmDA,MAA1E;AACH;;AACD,SAAOF,eAAe,CAACG,GAAD,CAAtB;AACH,CAND;;AAOA,IAAIM,oBAAoB,GAAG,UAASC,QAAT,EAAmB;AAC1C,SAAO,IAAIH,IAAI,CAACC,YAAT,CAAsB,CAAC,GAAGhB,KAAK,CAACY,MAAV,GAAtB,EAA2C;AAC9CO,IAAAA,KAAK,EAAE,UADuC;AAE9CD,IAAAA,QAAQ,EAAEA;AAFoC,GAA3C,CAAP;AAIH,CALD;;AAMAE,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAE,YAAW;AACf,WAAO,MAAP;AACH,GAHY;AAIbC,EAAAA,iBAAiB,EAAE,UAASC,KAAT,EAAgBd,MAAhB,EAAwBe,YAAxB,EAAsC;AACrD,QAAI,kBAAkBf,MAAtB,EAA8B;AAC1B,aAAO,KAAKgB,QAAL,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACH;;AACD,WAAOnB,YAAY,CAAC,KAAKoB,sBAAL,CAA4BnB,MAA5B,EAAoCe,YAApC,CAAD,CAAZ,CAAgED,KAAhE,CAAP;AACH,GATY;AAUbK,EAAAA,sBAAsB,EAAE,UAASnB,MAAT,EAAiBe,YAAjB,EAA+BD,KAA/B,EAAsC;AAC1D,QAAIM,MAAJ;;AACA,QAAI,cAAcpB,MAAlB,EAA0B;AACtBoB,MAAAA,MAAM,GAAG;AACLC,QAAAA,oBAAoB,EAAEN,YAAY,CAACO,SAAb,IAA0B,KAAK,CADhD;AAELC,QAAAA,WAAW,EAAE,KAFR;AAGLC,QAAAA,qBAAqB,EAAEC,MAAM,CAACX,KAAD,CAAN,CAAcY,MAHhC;AAILC,QAAAA,KAAK,EAAEb,KAAK,GAAG,CAAR,GAAY,MAAZ,GAAqB;AAJvB,OAAT;AAMH,KAPD,MAOO;AACHM,MAAAA,MAAM,GAAG,KAAKQ,mBAAL,CAAyBb,YAAY,CAACO,SAAtC,CAAT;AACH;;AACD,QAAI,cAActB,MAAlB,EAA0B;AACtBoB,MAAAA,MAAM,CAACX,KAAP,GAAe,SAAf;AACH,KAFD,MAEO;AACH,UAAI,eAAeT,MAAnB,EAA2B;AACvBoB,QAAAA,MAAM,CAACX,KAAP,GAAe,UAAf;AACAW,QAAAA,MAAM,CAACZ,QAAP,GAAkBO,YAAY,CAACP,QAAb,IAAyB,CAAC,GAAGpB,QAAQ,CAACyC,OAAb,IAAwBC,eAAnE;AACH;AACJ;;AACD,WAAOV,MAAP;AACH,GA/BY;AAgCbQ,EAAAA,mBAAmB,EAAE,UAASN,SAAT,EAAoB;AACrC,QAAIF,MAAJ;;AACA,QAAI,SAASE,SAAb,EAAwB;AACpBF,MAAAA,MAAM,GAAG;AACLW,QAAAA,qBAAqB,EAAE,CADlB;AAELP,QAAAA,qBAAqB,EAAE;AAFlB,OAAT;AAIH,KALD,MAKO;AACHJ,MAAAA,MAAM,GAAG;AACLW,QAAAA,qBAAqB,EAAET,SAAS,IAAI,CAD/B;AAELE,QAAAA,qBAAqB,EAAEF,SAAS,IAAI;AAF/B,OAAT;AAIH;;AACD,WAAOF,MAAP;AACH,GA9CY;AA+CbpB,EAAAA,MAAM,EAAE,UAASc,KAAT,EAAgBkB,OAAhB,EAAyB;AAC7B,QAAI,aAAa,OAAOlB,KAAxB,EAA+B;AAC3B,aAAOA,KAAP;AACH;;AACDkB,IAAAA,OAAO,GAAG,KAAKC,gBAAL,CAAsBD,OAAtB,CAAV;;AACA,QAAI,cAAcA,OAAO,CAACxB,QAA1B,EAAoC;AAChCwB,MAAAA,OAAO,CAACxB,QAAR,GAAmB,CAAC,GAAGpB,QAAQ,CAACyC,OAAb,IAAwBC,eAA3C;AACH;;AACD,QAAI,CAACE,OAAD,IAAY,eAAe,OAAOA,OAAtB,IAAiC,CAACA,OAAO,CAACE,IAA1C,IAAkD,CAACF,OAAO,CAACG,SAA3E,EAAsF;AAClF,aAAOpC,YAAY,CAACiC,OAAD,CAAZ,CAAsBlB,KAAtB,CAAP;AACH;;AACD,WAAO,KAAKE,QAAL,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACH,GA3DY;AA4DbkB,EAAAA,sBAAsB,EAAE,UAAS5B,QAAT,EAAmB;AACvC,QAAI2B,SAAS,GAAG5B,oBAAoB,CAACC,QAAD,CAApC;AACA,WAAO,KAAK6B,0BAAL,CAAgCF,SAAS,CAACnC,MAAV,CAAiB,CAAjB,CAAhC,CAAP;AACH,GA/DY;AAgEbqC,EAAAA,0BAA0B,EAAE,UAASC,mBAAT,EAA8B;AACtD,QAAIC,KAAK,GAAG1C,yBAAyB,CAAC2C,IAA1B,CAA+BF,mBAA/B,KAAuD,EAAnE;AACA,QAAIG,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAL,GAAW,QAAX,GAAsB,OAArC;AACA,QAAIG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwB,EAArC;AACA,QAAII,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwB,EAAxC;AACA,WAAO;AACHE,MAAAA,QAAQ,EAAEA,QADP;AAEHC,MAAAA,MAAM,EAAEA,MAFL;AAGHC,MAAAA,SAAS,EAAEA;AAHR,KAAP;AAKH,GA1EY;AA2EbC,EAAAA,iBAAiB,EAAE,UAASpC,QAAT,EAAmB;AAClC,QAAI,CAACA,QAAL,EAAe;AACXA,MAAAA,QAAQ,GAAG,CAAC,GAAGpB,QAAQ,CAACyC,OAAb,IAAwBC,eAAnC;AACH;;AACD,QAAIe,UAAU,GAAG,KAAKT,sBAAL,CAA4B5B,QAA5B,CAAjB;;AACA,WAAO;AACHkC,MAAAA,MAAM,EAAEG,UAAU,CAACH;AADhB,KAAP;AAGH,GAnFY;AAoFbI,EAAAA,wBAAwB,EAAE,UAAStC,QAAT,EAAmB;AACzC,QAAIuC,cAAc,GAAGvC,QAAQ,IAAI,CAAC,GAAGpB,QAAQ,CAACyC,OAAb,IAAwBC,eAAzD;;AACA,QAAIkB,cAAc,GAAG,KAAKZ,sBAAL,CAA4BW,cAA5B,EAA4CL,MAAjE;;AACA,QAAIO,uBAAuB,GAAG,CAAC,GAAG3D,KAAK,CAAC4D,uBAAV,EAAmC,UAAShD,MAAT,EAAiB;AAC9E,aAAOR,oBAAoB,CAACmC,OAArB,CAA6B3B,MAA7B,CAAP;AACH,KAF6B,CAA9B;AAGA,WAAO,CAAC,GAAGV,0BAA0B,CAACqC,OAA/B,EAAwCmB,cAAxC,EAAwDC,uBAAxD,CAAP;AACH;AA3FY,CAAjB","sourcesContent":["/**\r\n * DevExtreme (localization/intl/number.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _config = require(\"../../core/config\");\r\nvar _config2 = _interopRequireDefault(_config);\r\nvar _core = require(\"../core\");\r\nvar _open_xml_currency_format = require(\"../open_xml_currency_format\");\r\nvar _open_xml_currency_format2 = _interopRequireDefault(_open_xml_currency_format);\r\nvar _accounting_formats = require(\"../cldr-data/accounting_formats\");\r\nvar _accounting_formats2 = _interopRequireDefault(_accounting_formats);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\r\nvar formattersCache = {};\r\nvar getFormatter = function(format) {\r\n    var key = (0, _core.locale)() + \"/\" + JSON.stringify(format);\r\n    if (!formattersCache[key]) {\r\n        formattersCache[key] = new Intl.NumberFormat((0, _core.locale)(), format).format\r\n    }\r\n    return formattersCache[key]\r\n};\r\nvar getCurrencyFormatter = function(currency) {\r\n    return new Intl.NumberFormat((0, _core.locale)(), {\r\n        style: \"currency\",\r\n        currency: currency\r\n    })\r\n};\r\nmodule.exports = {\r\n    engine: function() {\r\n        return \"intl\"\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return getFormatter(this._normalizeFormatConfig(format, formatConfig))(value)\r\n    },\r\n    _normalizeFormatConfig: function(format, formatConfig, value) {\r\n        var config;\r\n        if (\"decimal\" === format) {\r\n            config = {\r\n                minimumIntegerDigits: formatConfig.precision || void 0,\r\n                useGrouping: false,\r\n                maximumFractionDigits: String(value).length,\r\n                round: value < 0 ? \"ceil\" : \"floor\"\r\n            }\r\n        } else {\r\n            config = this._getPrecisionConfig(formatConfig.precision)\r\n        }\r\n        if (\"percent\" === format) {\r\n            config.style = \"percent\"\r\n        } else {\r\n            if (\"currency\" === format) {\r\n                config.style = \"currency\";\r\n                config.currency = formatConfig.currency || (0, _config2.default)().defaultCurrency\r\n            }\r\n        }\r\n        return config\r\n    },\r\n    _getPrecisionConfig: function(precision) {\r\n        var config;\r\n        if (null === precision) {\r\n            config = {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 20\r\n            }\r\n        } else {\r\n            config = {\r\n                minimumFractionDigits: precision || 0,\r\n                maximumFractionDigits: precision || 0\r\n            }\r\n        }\r\n        return config\r\n    },\r\n    format: function(value, _format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        _format = this._normalizeFormat(_format);\r\n        if (\"default\" === _format.currency) {\r\n            _format.currency = (0, _config2.default)().defaultCurrency\r\n        }\r\n        if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\r\n            return getFormatter(_format)(value)\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _getCurrencySymbolInfo: function(currency) {\r\n        var formatter = getCurrencyFormatter(currency);\r\n        return this._extractCurrencySymbolInfo(formatter.format(0))\r\n    },\r\n    _extractCurrencySymbolInfo: function(currencyValueString) {\r\n        var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\r\n        var position = match[1] ? \"before\" : \"after\";\r\n        var symbol = match[1] || match[4] || \"\";\r\n        var delimiter = match[2] || match[3] || \"\";\r\n        return {\r\n            position: position,\r\n            symbol: symbol,\r\n            delimiter: delimiter\r\n        }\r\n    },\r\n    getCurrencySymbol: function(currency) {\r\n        if (!currency) {\r\n            currency = (0, _config2.default)().defaultCurrency\r\n        }\r\n        var symbolInfo = this._getCurrencySymbolInfo(currency);\r\n        return {\r\n            symbol: symbolInfo.symbol\r\n        }\r\n    },\r\n    getOpenXmlCurrencyFormat: function(currency) {\r\n        var targetCurrency = currency || (0, _config2.default)().defaultCurrency;\r\n        var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\r\n        var closestAccountingFormat = (0, _core.getValueByClosestLocale)(function(locale) {\r\n            return _accounting_formats2.default[locale]\r\n        });\r\n        return (0, _open_xml_currency_format2.default)(currencySymbol, closestAccountingFormat)\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}