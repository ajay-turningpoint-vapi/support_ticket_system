{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _common2 = _interopRequireDefault(_common);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _accessibility = require(\"../shared/accessibility\");\n\nvar _accessibility2 = _interopRequireDefault(_accessibility);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TABLE_CLASS = \"table\";\nvar BORDERS_CLASS = \"borders\";\nvar TABLE_FIXED_CLASS = \"table-fixed\";\nvar IMPORTANT_MARGIN_CLASS = \"important-margin\";\nvar TEXT_CONTENT_CLASS = \"text-content\";\nvar HIDDEN_CLASS = \"dx-hidden\";\nvar GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nvar VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\n\nvar isPercentWidth = function (width) {\n  return _type2.default.isString(width) && \"%\" === width.slice(-1);\n};\n\nvar isPixelWidth = function (width) {\n  return _type2.default.isString(width) && \"px\" === width.slice(-2);\n};\n\nvar mergeArraysByMaxValue = function (values1, values2) {\n  var result = [];\n\n  if (values1 && values2 && values1.length && values1.length === values2.length) {\n    for (var i = 0; i < values1.length; i++) {\n      result.push(values1[i] > values2[i] ? values1[i] : values2[i]);\n    }\n  } else {\n    if (values1 && values1.length) {\n      result = values1;\n    } else {\n      if (values2) {\n        result = values2;\n      }\n    }\n  }\n\n  return result;\n};\n\nvar getContainerHeight = function ($container) {\n  var clientHeight = $container.get(0).clientHeight;\n  var paddingTop = parseFloat($container.css(\"paddingTop\"));\n  var paddingBottom = parseFloat($container.css(\"paddingBottom\"));\n  return clientHeight - paddingTop - paddingBottom;\n};\n\nvar calculateFreeWidth = function (that, widths) {\n  var contentWidth = that._rowsView.contentWidth();\n\n  var totalWidth = that._getTotalWidth(widths, contentWidth);\n\n  return contentWidth - totalWidth;\n};\n\nvar calculateFreeWidthWithCurrentMinWidth = function (that, columnIndex, currentMinWidth, widths) {\n  return calculateFreeWidth(that, widths.map(function (width, index) {\n    return index === columnIndex ? currentMinWidth : width;\n  }));\n};\n\nvar restoreFocus = function (focusedElement, selectionRange) {\n  _accessibility2.default.hiddenFocus(focusedElement);\n\n  _uiGrid_core4.default.setSelectionRange(focusedElement, selectionRange);\n};\n\nvar ResizingController = _uiGrid_core2.default.ViewController.inherit({\n  _initPostRenderHandlers: function () {\n    var that = this;\n    var dataController = that._dataController;\n\n    if (!that._refreshSizesHandler) {\n      that._refreshSizesHandler = function (e) {\n        dataController.changed.remove(that._refreshSizesHandler);\n        var resizeDeferred;\n        var changeType = e && e.changeType;\n        var isDelayed = e && e.isDelayed;\n        var items = dataController.items();\n\n        if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\n          if (!isDelayed) {\n            resizeDeferred = that.resize();\n          }\n        } else {\n          if (\"update\" === changeType && e.changeTypes) {\n            if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\n              _common2.default.deferUpdate(function () {\n                that._rowsView.resize();\n              });\n            } else {\n              resizeDeferred = that.resize();\n            }\n          }\n        }\n\n        if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && !isDelayed) {\n          (0, _deferred.when)(resizeDeferred).done(function () {\n            that._setAriaRowColCount();\n\n            that.fireContentReadyAction();\n          });\n        }\n      };\n\n      that._dataController.changed.add(function () {\n        that._dataController.changed.add(that._refreshSizesHandler);\n      });\n    }\n  },\n  fireContentReadyAction: function () {\n    this.component._fireContentReadyAction();\n  },\n  _setAriaRowColCount: function () {\n    var component = this.component;\n    component.setAria({\n      rowCount: this._dataController.totalItemsCount(),\n      colCount: component.columnCount()\n    }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS));\n  },\n  _getBestFitWidths: function () {\n    if (!this.option(\"legacyRendering\")) {\n      return this._rowsView.getColumnWidths();\n    }\n\n    var rowsColumnWidths = this._rowsView.getColumnWidths();\n\n    var headerColumnWidths = this._columnHeadersView && this._columnHeadersView.getColumnWidths();\n\n    var footerColumnWidths = this._footerView && this._footerView.getColumnWidths();\n\n    var resultWidths = mergeArraysByMaxValue(rowsColumnWidths, headerColumnWidths);\n    resultWidths = mergeArraysByMaxValue(resultWidths, footerColumnWidths);\n    return resultWidths;\n  },\n  _setVisibleWidths: function (visibleColumns, widths) {\n    var columnsController = this._columnsController;\n    columnsController.beginUpdate();\n    (0, _iterator.each)(visibleColumns, function (index, column) {\n      var columnId = columnsController.getColumnId(column);\n      columnsController.columnOption(columnId, \"visibleWidth\", widths[index]);\n    });\n    columnsController.endUpdate();\n  },\n  _toggleBestFitModeForView: function (view, className, isBestFit) {\n    var _this = this;\n\n    if (!view || !view.isVisible()) {\n      return;\n    }\n\n    var $rowsTables = this._rowsView.getTableElements();\n\n    var $viewTables = view.getTableElements();\n    (0, _iterator.each)($rowsTables, function (index, tableElement) {\n      var $tableBody;\n      var $rowsTable = (0, _renderer2.default)(tableElement);\n      var $viewTable = $viewTables.eq(index);\n\n      if ($viewTable && $viewTable.length) {\n        if (isBestFit) {\n          $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable);\n        } else {\n          $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable);\n        }\n\n        $tableBody.toggleClass(className, isBestFit);\n        $tableBody.toggleClass(_this.addWidgetPrefix(\"best-fit\"), isBestFit);\n      }\n    });\n  },\n  _toggleBestFitMode: function (isBestFit) {\n    var $element = this.component.$element();\n    var that = this;\n\n    if (!that.option(\"legacyRendering\")) {\n      var $rowsTable = that._rowsView._getTableElement();\n\n      var $rowsFixedTable = that._rowsView.getTableElements().eq(1);\n\n      if (!$rowsTable) {\n        return;\n      }\n\n      $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\n      $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\n      $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\n\n      that._toggleBestFitModeForView(that._columnHeadersView, \"dx-header\", isBestFit);\n\n      that._toggleBestFitModeForView(that._footerView, \"dx-footer\", isBestFit);\n\n      if (that._needStretch()) {\n        $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\";\n      }\n\n      if (_browser2.default.msie && 11 === parseInt(_browser2.default.version)) {\n        $rowsTable.find(\".\" + this.addWidgetPrefix(TABLE_FIXED_CLASS)).each(function () {\n          this.style.width = isBestFit ? \"10px\" : \"\";\n        });\n      }\n    } else {\n      $element.find(\".\" + this.addWidgetPrefix(TABLE_CLASS)).toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\n      $element.find(EDITORS_INPUT_SELECTOR).toggleClass(HIDDEN_CLASS, isBestFit);\n      $element.find(\".dx-group-cell\").toggleClass(HIDDEN_CLASS, isBestFit);\n      $element.find(\".dx-header-row .\" + this.addWidgetPrefix(TEXT_CONTENT_CLASS)).css(\"maxWidth\", \"\");\n    }\n  },\n  _synchronizeColumns: function () {\n    var that = this;\n    var columnsController = that._columnsController;\n    var visibleColumns = columnsController.getVisibleColumns();\n    var columnAutoWidth = that.option(\"columnAutoWidth\");\n    var legacyRendering = that.option(\"legacyRendering\");\n\n    var needBestFit = that._needBestFit();\n\n    var hasMinWidth = false;\n    var resetBestFitMode;\n    var isColumnWidthsCorrected = false;\n    var resultWidths = [];\n    var focusedElement;\n    var selectionRange;\n\n    var normalizeWidthsByExpandColumns = function () {\n      var expandColumnWidth;\n      (0, _iterator.each)(visibleColumns, function (index, column) {\n        if (\"groupExpand\" === column.type) {\n          expandColumnWidth = resultWidths[index];\n        }\n      });\n      (0, _iterator.each)(visibleColumns, function (index, column) {\n        if (\"groupExpand\" === column.type && expandColumnWidth) {\n          resultWidths[index] = expandColumnWidth;\n        }\n      });\n    };\n\n    !needBestFit && (0, _iterator.each)(visibleColumns, function (index, column) {\n      if (\"auto\" === column.width || legacyRendering && column.fixed) {\n        needBestFit = true;\n        return false;\n      }\n    });\n    (0, _iterator.each)(visibleColumns, function (index, column) {\n      if (column.minWidth) {\n        hasMinWidth = true;\n        return false;\n      }\n    });\n\n    that._setVisibleWidths(visibleColumns, []);\n\n    if (needBestFit) {\n      focusedElement = _dom_adapter2.default.getActiveElement();\n      selectionRange = _uiGrid_core4.default.getSelectionRange(focusedElement);\n\n      that._toggleBestFitMode(true);\n\n      resetBestFitMode = true;\n    }\n\n    _common2.default.deferUpdate(function () {\n      if (needBestFit) {\n        resultWidths = that._getBestFitWidths();\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          var columnId = columnsController.getColumnId(column);\n          columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true);\n        });\n      } else {\n        if (hasMinWidth) {\n          resultWidths = that._getBestFitWidths();\n        }\n      }\n\n      (0, _iterator.each)(visibleColumns, function (index) {\n        var width = this.width;\n\n        if (\"auto\" !== width) {\n          if (_type2.default.isDefined(width)) {\n            resultWidths[index] = _type2.default.isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width;\n          } else {\n            if (!columnAutoWidth) {\n              resultWidths[index] = void 0;\n            }\n          }\n        }\n      });\n\n      if (resetBestFitMode) {\n        that._toggleBestFitMode(false);\n\n        resetBestFitMode = false;\n\n        if (focusedElement && focusedElement !== _dom_adapter2.default.getActiveElement()) {\n          var isFocusOutsideWindow = (0, _position.getBoundingRect)(focusedElement).bottom < 0;\n\n          if (!isFocusOutsideWindow) {\n            if (_browser2.default.msie) {\n              setTimeout(function () {\n                restoreFocus(focusedElement, selectionRange);\n              });\n            } else {\n              restoreFocus(focusedElement, selectionRange);\n            }\n          }\n        }\n      }\n\n      isColumnWidthsCorrected = that._correctColumnWidths(resultWidths, visibleColumns);\n\n      if (columnAutoWidth) {\n        normalizeWidthsByExpandColumns();\n\n        if (that._needStretch()) {\n          that._processStretch(resultWidths, visibleColumns);\n        }\n      }\n\n      _common2.default.deferRender(function () {\n        if (needBestFit || isColumnWidthsCorrected) {\n          that._setVisibleWidths(visibleColumns, resultWidths);\n        }\n      });\n    });\n  },\n  _needBestFit: function () {\n    return this.option(\"columnAutoWidth\");\n  },\n  _needStretch: function () {\n    return this.option(\"legacyRendering\") || this._columnsController.getVisibleColumns().some(function (c) {\n      return \"auto\" === c.width && !c.command;\n    });\n  },\n  _getAverageColumnsWidth: function (resultWidths) {\n    var freeWidth = calculateFreeWidth(this, resultWidths);\n    var columnCountWithoutWidth = resultWidths.filter(function (width) {\n      return void 0 === width;\n    }).length;\n    return freeWidth / columnCountWithoutWidth;\n  },\n  _correctColumnWidths: function (resultWidths, visibleColumns) {\n    var that = this;\n    var i;\n    var hasPercentWidth = false;\n    var hasAutoWidth = false;\n    var isColumnWidthsCorrected = false;\n    var $element = that.component.$element();\n    var hasWidth = that._hasWidth;\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      var index = i;\n      var column = visibleColumns[index];\n      var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;\n      var width = resultWidths[index];\n      var minWidth = column.minWidth;\n\n      if (minWidth) {\n        if (void 0 === width) {\n          var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\n\n          width = averageColumnsWidth;\n        } else {\n          if (isPercentWidth(width)) {\n            var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\n\n            if (freeWidth < 0) {\n              width = -1;\n            }\n          }\n        }\n      }\n\n      if (minWidth && that._getRealColumnWidth(width) < minWidth && !isHiddenColumn) {\n        resultWidths[index] = minWidth;\n        isColumnWidthsCorrected = true;\n        i = -1;\n      }\n\n      if (!_type2.default.isDefined(column.width)) {\n        hasAutoWidth = true;\n      }\n\n      if (isPercentWidth(column.width)) {\n        hasPercentWidth = true;\n      }\n    }\n\n    if ($element && that._maxWidth) {\n      delete that._maxWidth;\n      $element.css(\"maxWidth\", \"\");\n    }\n\n    if (!hasAutoWidth && resultWidths.length) {\n      var contentWidth = that._rowsView.contentWidth();\n\n      var scrollbarWidth = that._rowsView.getScrollbarWidth();\n\n      var totalWidth = that._getTotalWidth(resultWidths, contentWidth);\n\n      if (totalWidth < contentWidth) {\n        var lastColumnIndex = _uiGrid_core4.default.getLastResizableColumnIndex(visibleColumns, resultWidths);\n\n        if (lastColumnIndex >= 0) {\n          resultWidths[lastColumnIndex] = \"auto\";\n          isColumnWidthsCorrected = true;\n\n          if (false === hasWidth && !hasPercentWidth) {\n            that._maxWidth = totalWidth + scrollbarWidth + (that.option(\"showBorders\") ? 2 : 0);\n            $element.css(\"maxWidth\", that._maxWidth);\n          }\n        }\n      }\n    }\n\n    return isColumnWidthsCorrected;\n  },\n  _processStretch: function (resultSizes, visibleColumns) {\n    var groupSize = this._rowsView.contentWidth();\n\n    var tableSize = this._getTotalWidth(resultSizes, groupSize);\n\n    var unusedIndexes = {\n      length: 0\n    };\n\n    if (!resultSizes.length) {\n      return;\n    }\n\n    (0, _iterator.each)(visibleColumns, function (index) {\n      if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\n        unusedIndexes[index] = true;\n        unusedIndexes.length++;\n      }\n    });\n    var diff = groupSize - tableSize;\n    var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\n    var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\n\n    if (diff >= 0) {\n      for (var i = 0; i < resultSizes.length; i++) {\n        if (unusedIndexes[i]) {\n          continue;\n        }\n\n        resultSizes[i] += diffElement;\n\n        if (onePixelElementsCount > 0) {\n          if (onePixelElementsCount < 1) {\n            resultSizes[i] += onePixelElementsCount;\n            onePixelElementsCount = 0;\n          } else {\n            resultSizes[i]++;\n            onePixelElementsCount--;\n          }\n        }\n      }\n    }\n  },\n  _getRealColumnWidth: function (width, groupWidth) {\n    if (!isPercentWidth(width)) {\n      return parseFloat(width);\n    }\n\n    groupWidth = groupWidth || this._rowsView.contentWidth();\n    return parseFloat(width) * groupWidth / 100;\n  },\n  _getTotalWidth: function (widths, groupWidth) {\n    var result = 0;\n\n    for (var i = 0; i < widths.length; i++) {\n      var width = widths[i];\n\n      if (width && width !== HIDDEN_COLUMNS_WIDTH) {\n        result += this._getRealColumnWidth(width, groupWidth);\n      }\n    }\n\n    return result;\n  },\n  updateSize: function ($rootElement) {\n    var that = this;\n    var $groupElement;\n    var width;\n    var importantMarginClass = that.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\n\n    if (void 0 === that._hasHeight && $rootElement && $rootElement.is(\":visible\") && $rootElement.width()) {\n      $groupElement = $rootElement.children(\".\" + that.getWidgetContainerClass());\n\n      if ($groupElement.length) {\n        $groupElement.detach();\n      }\n\n      that._hasHeight = !!getContainerHeight($rootElement);\n      width = $rootElement.width();\n      $rootElement.addClass(importantMarginClass);\n      that._hasWidth = $rootElement.width() === width;\n      $rootElement.removeClass(importantMarginClass);\n\n      if ($groupElement.length) {\n        $groupElement.appendTo($rootElement);\n      }\n    }\n  },\n  publicMethods: function () {\n    return [\"resize\", \"updateDimensions\"];\n  },\n  resize: function () {\n    return !this.component._requireResize && this.updateDimensions();\n  },\n  updateDimensions: function (checkSize) {\n    var that = this;\n\n    that._initPostRenderHandlers();\n\n    if (!that._checkSize(checkSize)) {\n      return;\n    }\n\n    var prevResult = that._resizeDeferred;\n    var result = that._resizeDeferred = new _deferred.Deferred();\n    (0, _deferred.when)(prevResult).always(function () {\n      _common2.default.deferRender(function () {\n        if (that._dataController.isLoaded()) {\n          that._synchronizeColumns();\n        }\n\n        that._resetGroupElementHeight();\n\n        _common2.default.deferUpdate(function () {\n          _common2.default.deferRender(function () {\n            _common2.default.deferUpdate(function () {\n              that._updateDimensionsCore();\n            });\n          });\n        });\n      }).done(result.resolve).fail(result.reject);\n    });\n    return result.promise();\n  },\n  _resetGroupElementHeight: function () {\n    var groupElement = this.component.$element().children().get(0);\n\n    var scrollable = this._rowsView.getScrollable();\n\n    if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\n      groupElement.style.height = \"\";\n    }\n  },\n  _checkSize: function (checkSize) {\n    var $rootElement = this.component.$element();\n\n    if (checkSize && (this._lastWidth === $rootElement.width() && this._lastHeight === $rootElement.height() || !$rootElement.is(\":visible\"))) {\n      return false;\n    }\n\n    return true;\n  },\n  _setScrollerSpacingCore: function (hasHeight) {\n    var that = this;\n    var vScrollbarWidth = hasHeight ? that._rowsView.getScrollbarWidth() : 0;\n\n    var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\n\n    _common2.default.deferRender(function () {\n      that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\n      that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\n\n      that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth);\n    });\n  },\n  _setScrollerSpacing: function (hasHeight) {\n    var _this2 = this;\n\n    if (true === this.option(\"scrolling.useNative\")) {\n      _common2.default.deferRender(function () {\n        _common2.default.deferUpdate(function () {\n          _this2._setScrollerSpacingCore(hasHeight);\n        });\n      });\n    } else {\n      this._setScrollerSpacingCore(hasHeight);\n    }\n  },\n  _updateDimensionsCore: function () {\n    var that = this;\n    var dataController = that._dataController;\n    var rowsView = that._rowsView;\n    var $rootElement = that.component.$element();\n    var groupElement = $rootElement.children().get(0);\n    var rootElementHeight = $rootElement && ($rootElement.get(0).clientHeight || $rootElement.height());\n    var maxHeight = parseInt($rootElement.css(\"maxHeight\"));\n    var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\n    var height = that.option(\"height\") || $rootElement.get(0).style.height;\n    var editorFactory = that.getController(\"editorFactory\");\n    var isMaxHeightApplied = maxHeightHappened && groupElement.scrollHeight === groupElement.offsetHeight;\n    var $testDiv;\n    that.updateSize($rootElement);\n    var hasHeight = that._hasHeight || maxHeightHappened;\n\n    if (height && that._hasHeight ^ \"auto\" !== height) {\n      $testDiv = (0, _renderer2.default)(\"<div>\").height(height).appendTo($rootElement);\n      that._hasHeight = !!$testDiv.height();\n      $testDiv.remove();\n    }\n\n    _common2.default.deferRender(function () {\n      rowsView.height(null, hasHeight);\n\n      if (maxHeightHappened && !isMaxHeightApplied) {\n        (0, _renderer2.default)(groupElement).css(\"height\", maxHeight);\n      }\n\n      if (!dataController.isLoaded()) {\n        rowsView.setLoading(dataController.isLoading());\n        return;\n      }\n\n      _common2.default.deferUpdate(function () {\n        that._updateLastSizes($rootElement);\n\n        that._setScrollerSpacing(hasHeight);\n\n        (0, _iterator.each)(VIEW_NAMES, function (index, viewName) {\n          var view = that.getView(viewName);\n\n          if (view) {\n            view.resize();\n          }\n        });\n        editorFactory && editorFactory.resize();\n      });\n    });\n  },\n  _updateLastSizes: function ($rootElement) {\n    this._lastWidth = $rootElement.width();\n    this._lastHeight = $rootElement.height();\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this.component._renderDimensions();\n\n        this.resize();\n\n      case \"legacyRendering\":\n      case \"renderAsync\":\n        args.handled = true;\n        return;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  init: function () {\n    var that = this;\n    that._dataController = that.getController(\"data\");\n    that._columnsController = that.getController(\"columns\");\n    that._columnHeadersView = that.getView(\"columnHeadersView\");\n    that._footerView = that.getView(\"footerView\");\n    that._rowsView = that.getView(\"rowsView\");\n  }\n});\n\nvar SynchronizeScrollingController = _uiGrid_core2.default.ViewController.inherit({\n  _scrollChangedHandler: function (views, pos, viewName) {\n    for (var j = 0; j < views.length; j++) {\n      if (views[j] && views[j].name !== viewName) {\n        views[j].scrollTo({\n          left: pos.left,\n          top: pos.top\n        });\n      }\n    }\n  },\n  init: function () {\n    var views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\n\n    for (var i = 0; i < views.length; i++) {\n      var view = views[i];\n\n      if (view) {\n        view.scrollChanged.add(this._scrollChangedHandler.bind(this, views));\n      }\n    }\n  }\n});\n\nvar GridView = _uiGrid_core2.default.View.inherit({\n  _endUpdateCore: function () {\n    if (this.component._requireResize) {\n      this.component._requireResize = false;\n\n      this._resizingController.resize();\n    }\n  },\n  _getWidgetAriaLabel: function () {\n    return \"dxDataGrid-ariaDataGrid\";\n  },\n  init: function () {\n    var that = this;\n    that._resizingController = that.getController(\"resizing\");\n    that._dataController = that.getController(\"data\");\n  },\n  getView: function (name) {\n    return this.component._views[name];\n  },\n  element: function () {\n    return this._groupElement;\n  },\n  optionChanged: function (args) {\n    var that = this;\n\n    if (_type2.default.isDefined(that._groupElement) && \"showBorders\" === args.name) {\n      that._groupElement.toggleClass(that.addWidgetPrefix(BORDERS_CLASS), !!args.value);\n\n      args.handled = true;\n    } else {\n      that.callBase(args);\n    }\n  },\n  _renderViews: function ($groupElement) {\n    var that = this;\n    (0, _iterator.each)(VIEW_NAMES, function (index, viewName) {\n      var view = that.getView(viewName);\n\n      if (view) {\n        view.render($groupElement);\n      }\n    });\n  },\n  _getTableRoleName: function () {\n    return \"grid\";\n  },\n  render: function ($rootElement) {\n    var that = this;\n    var isFirstRender = !that._groupElement;\n    var $groupElement = that._groupElement || (0, _renderer2.default)(\"<div>\").addClass(that.getWidgetContainerClass());\n    $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\n    $groupElement.toggleClass(that.addWidgetPrefix(BORDERS_CLASS), !!that.option(\"showBorders\"));\n    that.setAria(\"role\", \"presentation\", $rootElement);\n    that.component.setAria({\n      role: this._getTableRoleName(),\n      label: _message2.default.format(that._getWidgetAriaLabel())\n    }, $groupElement);\n    that._rootElement = $rootElement || that._rootElement;\n\n    if (isFirstRender) {\n      that._groupElement = $groupElement;\n      _window2.default.hasWindow() && that.getController(\"resizing\").updateSize($rootElement);\n      $groupElement.appendTo($rootElement);\n    }\n\n    that._renderViews($groupElement);\n  },\n  update: function () {\n    var that = this;\n    var $rootElement = that._rootElement;\n    var $groupElement = that._groupElement;\n    var resizingController = that.getController(\"resizing\");\n\n    if ($rootElement && $groupElement) {\n      resizingController.resize();\n\n      if (that._dataController.isLoaded()) {\n        that._resizingController.fireContentReadyAction();\n      }\n    }\n  }\n});\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      showBorders: false,\n      renderAsync: false,\n      legacyRendering: false\n    };\n  },\n  controllers: {\n    resizing: ResizingController,\n    synchronizeScrolling: SynchronizeScrollingController\n  },\n  views: {\n    gridView: GridView\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.grid_view.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_uiGrid_core","_uiGrid_core2","_common","_common2","_window","_window2","_iterator","_type","_type2","_position","_uiGrid_core3","_uiGrid_core4","_message","_message2","_deferred","_dom_adapter","_dom_adapter2","_browser","_browser2","_accessibility","_accessibility2","obj","__esModule","TABLE_CLASS","BORDERS_CLASS","TABLE_FIXED_CLASS","IMPORTANT_MARGIN_CLASS","TEXT_CONTENT_CLASS","HIDDEN_CLASS","GRIDBASE_CONTAINER_CLASS","HIDDEN_COLUMNS_WIDTH","EDITORS_INPUT_SELECTOR","VIEW_NAMES","isPercentWidth","width","default","isString","slice","isPixelWidth","mergeArraysByMaxValue","values1","values2","result","length","i","push","getContainerHeight","$container","clientHeight","get","paddingTop","parseFloat","css","paddingBottom","calculateFreeWidth","that","widths","contentWidth","_rowsView","totalWidth","_getTotalWidth","calculateFreeWidthWithCurrentMinWidth","columnIndex","currentMinWidth","map","index","restoreFocus","focusedElement","selectionRange","hiddenFocus","setSelectionRange","ResizingController","ViewController","inherit","_initPostRenderHandlers","dataController","_dataController","_refreshSizesHandler","e","changed","remove","resizeDeferred","changeType","isDelayed","items","resize","changeTypes","needUpdateDimensions","deferUpdate","when","done","_setAriaRowColCount","fireContentReadyAction","add","component","_fireContentReadyAction","setAria","rowCount","totalItemsCount","colCount","columnCount","$element","children","_getBestFitWidths","option","getColumnWidths","rowsColumnWidths","headerColumnWidths","_columnHeadersView","footerColumnWidths","_footerView","resultWidths","_setVisibleWidths","visibleColumns","columnsController","_columnsController","beginUpdate","each","column","columnId","getColumnId","columnOption","endUpdate","_toggleBestFitModeForView","view","className","isBestFit","_this","isVisible","$rowsTables","getTableElements","$viewTables","tableElement","$tableBody","$rowsTable","$viewTable","eq","appendTo","toggleClass","addWidgetPrefix","_toggleBestFitMode","_getTableElement","$rowsFixedTable","_needStretch","style","msie","parseInt","version","find","_synchronizeColumns","getVisibleColumns","columnAutoWidth","legacyRendering","needBestFit","_needBestFit","hasMinWidth","resetBestFitMode","isColumnWidthsCorrected","normalizeWidthsByExpandColumns","expandColumnWidth","type","fixed","minWidth","getActiveElement","getSelectionRange","isDefined","isNumeric","isFocusOutsideWindow","getBoundingRect","bottom","setTimeout","_correctColumnWidths","_processStretch","deferRender","some","c","command","_getAverageColumnsWidth","freeWidth","columnCountWithoutWidth","filter","hasPercentWidth","hasAutoWidth","hasWidth","_hasWidth","isHiddenColumn","averageColumnsWidth","_getRealColumnWidth","_maxWidth","scrollbarWidth","getScrollbarWidth","lastColumnIndex","getLastResizableColumnIndex","resultSizes","groupSize","tableSize","unusedIndexes","diff","diffElement","Math","floor","onePixelElementsCount","groupWidth","updateSize","$rootElement","$groupElement","importantMarginClass","_hasHeight","is","getWidgetContainerClass","detach","addClass","removeClass","publicMethods","_requireResize","updateDimensions","checkSize","_checkSize","prevResult","_resizeDeferred","Deferred","always","isLoaded","_resetGroupElementHeight","_updateDimensionsCore","resolve","fail","reject","promise","groupElement","scrollable","getScrollable","height","scrollTop","_lastWidth","_lastHeight","_setScrollerSpacingCore","hasHeight","vScrollbarWidth","hScrollbarWidth","setScrollerSpacing","_setScrollerSpacing","_this2","rowsView","rootElementHeight","maxHeight","maxHeightHappened","editorFactory","getController","isMaxHeightApplied","scrollHeight","offsetHeight","$testDiv","setLoading","isLoading","_updateLastSizes","viewName","getView","optionChanged","args","name","_renderDimensions","handled","callBase","init","SynchronizeScrollingController","_scrollChangedHandler","views","pos","j","scrollTo","left","top","scrollChanged","bind","GridView","View","_endUpdateCore","_resizingController","_getWidgetAriaLabel","_views","element","_groupElement","value","_renderViews","render","_getTableRoleName","isFirstRender","role","label","format","_rootElement","hasWindow","update","resizingController","module","exports","defaultOptions","showBorders","renderAsync","controllers","resizing","synchronizeScrolling","gridView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _common2 = _interopRequireDefault(_common);\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _window2 = _interopRequireDefault(_window);\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _type2 = _interopRequireDefault(_type);\r\nvar _position = require(\"../../core/utils/position\");\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _dom_adapter = require(\"../../core/dom_adapter\");\r\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\r\nvar _browser = require(\"../../core/utils/browser\");\r\nvar _browser2 = _interopRequireDefault(_browser);\r\nvar _accessibility = require(\"../shared/accessibility\");\r\nvar _accessibility2 = _interopRequireDefault(_accessibility);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar TABLE_CLASS = \"table\";\r\nvar BORDERS_CLASS = \"borders\";\r\nvar TABLE_FIXED_CLASS = \"table-fixed\";\r\nvar IMPORTANT_MARGIN_CLASS = \"important-margin\";\r\nvar TEXT_CONTENT_CLASS = \"text-content\";\r\nvar HIDDEN_CLASS = \"dx-hidden\";\r\nvar GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\r\nvar VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\r\nvar isPercentWidth = function(width) {\r\n    return _type2.default.isString(width) && \"%\" === width.slice(-1)\r\n};\r\nvar isPixelWidth = function(width) {\r\n    return _type2.default.isString(width) && \"px\" === width.slice(-2)\r\n};\r\nvar mergeArraysByMaxValue = function(values1, values2) {\r\n    var result = [];\r\n    if (values1 && values2 && values1.length && values1.length === values2.length) {\r\n        for (var i = 0; i < values1.length; i++) {\r\n            result.push(values1[i] > values2[i] ? values1[i] : values2[i])\r\n        }\r\n    } else {\r\n        if (values1 && values1.length) {\r\n            result = values1\r\n        } else {\r\n            if (values2) {\r\n                result = values2\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar getContainerHeight = function($container) {\r\n    var clientHeight = $container.get(0).clientHeight;\r\n    var paddingTop = parseFloat($container.css(\"paddingTop\"));\r\n    var paddingBottom = parseFloat($container.css(\"paddingBottom\"));\r\n    return clientHeight - paddingTop - paddingBottom\r\n};\r\nvar calculateFreeWidth = function(that, widths) {\r\n    var contentWidth = that._rowsView.contentWidth();\r\n    var totalWidth = that._getTotalWidth(widths, contentWidth);\r\n    return contentWidth - totalWidth\r\n};\r\nvar calculateFreeWidthWithCurrentMinWidth = function(that, columnIndex, currentMinWidth, widths) {\r\n    return calculateFreeWidth(that, widths.map(function(width, index) {\r\n        return index === columnIndex ? currentMinWidth : width\r\n    }))\r\n};\r\nvar restoreFocus = function(focusedElement, selectionRange) {\r\n    _accessibility2.default.hiddenFocus(focusedElement);\r\n    _uiGrid_core4.default.setSelectionRange(focusedElement, selectionRange)\r\n};\r\nvar ResizingController = _uiGrid_core2.default.ViewController.inherit({\r\n    _initPostRenderHandlers: function() {\r\n        var that = this;\r\n        var dataController = that._dataController;\r\n        if (!that._refreshSizesHandler) {\r\n            that._refreshSizesHandler = function(e) {\r\n                dataController.changed.remove(that._refreshSizesHandler);\r\n                var resizeDeferred;\r\n                var changeType = e && e.changeType;\r\n                var isDelayed = e && e.isDelayed;\r\n                var items = dataController.items();\r\n                if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\r\n                    if (!isDelayed) {\r\n                        resizeDeferred = that.resize()\r\n                    }\r\n                } else {\r\n                    if (\"update\" === changeType && e.changeTypes) {\r\n                        if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\r\n                            _common2.default.deferUpdate(function() {\r\n                                that._rowsView.resize()\r\n                            })\r\n                        } else {\r\n                            resizeDeferred = that.resize()\r\n                        }\r\n                    }\r\n                }\r\n                if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && !isDelayed) {\r\n                    (0, _deferred.when)(resizeDeferred).done(function() {\r\n                        that._setAriaRowColCount();\r\n                        that.fireContentReadyAction()\r\n                    })\r\n                }\r\n            };\r\n            that._dataController.changed.add(function() {\r\n                that._dataController.changed.add(that._refreshSizesHandler)\r\n            })\r\n        }\r\n    },\r\n    fireContentReadyAction: function() {\r\n        this.component._fireContentReadyAction()\r\n    },\r\n    _setAriaRowColCount: function() {\r\n        var component = this.component;\r\n        component.setAria({\r\n            rowCount: this._dataController.totalItemsCount(),\r\n            colCount: component.columnCount()\r\n        }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS))\r\n    },\r\n    _getBestFitWidths: function() {\r\n        if (!this.option(\"legacyRendering\")) {\r\n            return this._rowsView.getColumnWidths()\r\n        }\r\n        var rowsColumnWidths = this._rowsView.getColumnWidths();\r\n        var headerColumnWidths = this._columnHeadersView && this._columnHeadersView.getColumnWidths();\r\n        var footerColumnWidths = this._footerView && this._footerView.getColumnWidths();\r\n        var resultWidths = mergeArraysByMaxValue(rowsColumnWidths, headerColumnWidths);\r\n        resultWidths = mergeArraysByMaxValue(resultWidths, footerColumnWidths);\r\n        return resultWidths\r\n    },\r\n    _setVisibleWidths: function(visibleColumns, widths) {\r\n        var columnsController = this._columnsController;\r\n        columnsController.beginUpdate();\r\n        (0, _iterator.each)(visibleColumns, function(index, column) {\r\n            var columnId = columnsController.getColumnId(column);\r\n            columnsController.columnOption(columnId, \"visibleWidth\", widths[index])\r\n        });\r\n        columnsController.endUpdate()\r\n    },\r\n    _toggleBestFitModeForView: function(view, className, isBestFit) {\r\n        var _this = this;\r\n        if (!view || !view.isVisible()) {\r\n            return\r\n        }\r\n        var $rowsTables = this._rowsView.getTableElements();\r\n        var $viewTables = view.getTableElements();\r\n        (0, _iterator.each)($rowsTables, function(index, tableElement) {\r\n            var $tableBody;\r\n            var $rowsTable = (0, _renderer2.default)(tableElement);\r\n            var $viewTable = $viewTables.eq(index);\r\n            if ($viewTable && $viewTable.length) {\r\n                if (isBestFit) {\r\n                    $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable)\r\n                } else {\r\n                    $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable)\r\n                }\r\n                $tableBody.toggleClass(className, isBestFit);\r\n                $tableBody.toggleClass(_this.addWidgetPrefix(\"best-fit\"), isBestFit)\r\n            }\r\n        })\r\n    },\r\n    _toggleBestFitMode: function(isBestFit) {\r\n        var $element = this.component.$element();\r\n        var that = this;\r\n        if (!that.option(\"legacyRendering\")) {\r\n            var $rowsTable = that._rowsView._getTableElement();\r\n            var $rowsFixedTable = that._rowsView.getTableElements().eq(1);\r\n            if (!$rowsTable) {\r\n                return\r\n            }\r\n            $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\r\n            $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\r\n            $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\r\n            that._toggleBestFitModeForView(that._columnHeadersView, \"dx-header\", isBestFit);\r\n            that._toggleBestFitModeForView(that._footerView, \"dx-footer\", isBestFit);\r\n            if (that._needStretch()) {\r\n                $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\"\r\n            }\r\n            if (_browser2.default.msie && 11 === parseInt(_browser2.default.version)) {\r\n                $rowsTable.find(\".\" + this.addWidgetPrefix(TABLE_FIXED_CLASS)).each(function() {\r\n                    this.style.width = isBestFit ? \"10px\" : \"\"\r\n                })\r\n            }\r\n        } else {\r\n            $element.find(\".\" + this.addWidgetPrefix(TABLE_CLASS)).toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\r\n            $element.find(EDITORS_INPUT_SELECTOR).toggleClass(HIDDEN_CLASS, isBestFit);\r\n            $element.find(\".dx-group-cell\").toggleClass(HIDDEN_CLASS, isBestFit);\r\n            $element.find(\".dx-header-row .\" + this.addWidgetPrefix(TEXT_CONTENT_CLASS)).css(\"maxWidth\", \"\")\r\n        }\r\n    },\r\n    _synchronizeColumns: function() {\r\n        var that = this;\r\n        var columnsController = that._columnsController;\r\n        var visibleColumns = columnsController.getVisibleColumns();\r\n        var columnAutoWidth = that.option(\"columnAutoWidth\");\r\n        var legacyRendering = that.option(\"legacyRendering\");\r\n        var needBestFit = that._needBestFit();\r\n        var hasMinWidth = false;\r\n        var resetBestFitMode;\r\n        var isColumnWidthsCorrected = false;\r\n        var resultWidths = [];\r\n        var focusedElement;\r\n        var selectionRange;\r\n        var normalizeWidthsByExpandColumns = function() {\r\n            var expandColumnWidth;\r\n            (0, _iterator.each)(visibleColumns, function(index, column) {\r\n                if (\"groupExpand\" === column.type) {\r\n                    expandColumnWidth = resultWidths[index]\r\n                }\r\n            });\r\n            (0, _iterator.each)(visibleColumns, function(index, column) {\r\n                if (\"groupExpand\" === column.type && expandColumnWidth) {\r\n                    resultWidths[index] = expandColumnWidth\r\n                }\r\n            })\r\n        };\r\n        !needBestFit && (0, _iterator.each)(visibleColumns, function(index, column) {\r\n            if (\"auto\" === column.width || legacyRendering && column.fixed) {\r\n                needBestFit = true;\r\n                return false\r\n            }\r\n        });\r\n        (0, _iterator.each)(visibleColumns, function(index, column) {\r\n            if (column.minWidth) {\r\n                hasMinWidth = true;\r\n                return false\r\n            }\r\n        });\r\n        that._setVisibleWidths(visibleColumns, []);\r\n        if (needBestFit) {\r\n            focusedElement = _dom_adapter2.default.getActiveElement();\r\n            selectionRange = _uiGrid_core4.default.getSelectionRange(focusedElement);\r\n            that._toggleBestFitMode(true);\r\n            resetBestFitMode = true\r\n        }\r\n        _common2.default.deferUpdate(function() {\r\n            if (needBestFit) {\r\n                resultWidths = that._getBestFitWidths();\r\n                (0, _iterator.each)(visibleColumns, function(index, column) {\r\n                    var columnId = columnsController.getColumnId(column);\r\n                    columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true)\r\n                })\r\n            } else {\r\n                if (hasMinWidth) {\r\n                    resultWidths = that._getBestFitWidths()\r\n                }\r\n            }(0, _iterator.each)(visibleColumns, function(index) {\r\n                var width = this.width;\r\n                if (\"auto\" !== width) {\r\n                    if (_type2.default.isDefined(width)) {\r\n                        resultWidths[index] = _type2.default.isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width\r\n                    } else {\r\n                        if (!columnAutoWidth) {\r\n                            resultWidths[index] = void 0\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            if (resetBestFitMode) {\r\n                that._toggleBestFitMode(false);\r\n                resetBestFitMode = false;\r\n                if (focusedElement && focusedElement !== _dom_adapter2.default.getActiveElement()) {\r\n                    var isFocusOutsideWindow = (0, _position.getBoundingRect)(focusedElement).bottom < 0;\r\n                    if (!isFocusOutsideWindow) {\r\n                        if (_browser2.default.msie) {\r\n                            setTimeout(function() {\r\n                                restoreFocus(focusedElement, selectionRange)\r\n                            })\r\n                        } else {\r\n                            restoreFocus(focusedElement, selectionRange)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            isColumnWidthsCorrected = that._correctColumnWidths(resultWidths, visibleColumns);\r\n            if (columnAutoWidth) {\r\n                normalizeWidthsByExpandColumns();\r\n                if (that._needStretch()) {\r\n                    that._processStretch(resultWidths, visibleColumns)\r\n                }\r\n            }\r\n            _common2.default.deferRender(function() {\r\n                if (needBestFit || isColumnWidthsCorrected) {\r\n                    that._setVisibleWidths(visibleColumns, resultWidths)\r\n                }\r\n            })\r\n        })\r\n    },\r\n    _needBestFit: function() {\r\n        return this.option(\"columnAutoWidth\")\r\n    },\r\n    _needStretch: function() {\r\n        return this.option(\"legacyRendering\") || this._columnsController.getVisibleColumns().some(function(c) {\r\n            return \"auto\" === c.width && !c.command\r\n        })\r\n    },\r\n    _getAverageColumnsWidth: function(resultWidths) {\r\n        var freeWidth = calculateFreeWidth(this, resultWidths);\r\n        var columnCountWithoutWidth = resultWidths.filter(function(width) {\r\n            return void 0 === width\r\n        }).length;\r\n        return freeWidth / columnCountWithoutWidth\r\n    },\r\n    _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n        var that = this;\r\n        var i;\r\n        var hasPercentWidth = false;\r\n        var hasAutoWidth = false;\r\n        var isColumnWidthsCorrected = false;\r\n        var $element = that.component.$element();\r\n        var hasWidth = that._hasWidth;\r\n        for (i = 0; i < visibleColumns.length; i++) {\r\n            var index = i;\r\n            var column = visibleColumns[index];\r\n            var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;\r\n            var width = resultWidths[index];\r\n            var minWidth = column.minWidth;\r\n            if (minWidth) {\r\n                if (void 0 === width) {\r\n                    var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\r\n                    width = averageColumnsWidth\r\n                } else {\r\n                    if (isPercentWidth(width)) {\r\n                        var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\r\n                        if (freeWidth < 0) {\r\n                            width = -1\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (minWidth && that._getRealColumnWidth(width) < minWidth && !isHiddenColumn) {\r\n                resultWidths[index] = minWidth;\r\n                isColumnWidthsCorrected = true;\r\n                i = -1\r\n            }\r\n            if (!_type2.default.isDefined(column.width)) {\r\n                hasAutoWidth = true\r\n            }\r\n            if (isPercentWidth(column.width)) {\r\n                hasPercentWidth = true\r\n            }\r\n        }\r\n        if ($element && that._maxWidth) {\r\n            delete that._maxWidth;\r\n            $element.css(\"maxWidth\", \"\")\r\n        }\r\n        if (!hasAutoWidth && resultWidths.length) {\r\n            var contentWidth = that._rowsView.contentWidth();\r\n            var scrollbarWidth = that._rowsView.getScrollbarWidth();\r\n            var totalWidth = that._getTotalWidth(resultWidths, contentWidth);\r\n            if (totalWidth < contentWidth) {\r\n                var lastColumnIndex = _uiGrid_core4.default.getLastResizableColumnIndex(visibleColumns, resultWidths);\r\n                if (lastColumnIndex >= 0) {\r\n                    resultWidths[lastColumnIndex] = \"auto\";\r\n                    isColumnWidthsCorrected = true;\r\n                    if (false === hasWidth && !hasPercentWidth) {\r\n                        that._maxWidth = totalWidth + scrollbarWidth + (that.option(\"showBorders\") ? 2 : 0);\r\n                        $element.css(\"maxWidth\", that._maxWidth)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isColumnWidthsCorrected\r\n    },\r\n    _processStretch: function(resultSizes, visibleColumns) {\r\n        var groupSize = this._rowsView.contentWidth();\r\n        var tableSize = this._getTotalWidth(resultSizes, groupSize);\r\n        var unusedIndexes = {\r\n            length: 0\r\n        };\r\n        if (!resultSizes.length) {\r\n            return\r\n        }(0, _iterator.each)(visibleColumns, function(index) {\r\n            if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\r\n                unusedIndexes[index] = true;\r\n                unusedIndexes.length++\r\n            }\r\n        });\r\n        var diff = groupSize - tableSize;\r\n        var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\r\n        var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\r\n        if (diff >= 0) {\r\n            for (var i = 0; i < resultSizes.length; i++) {\r\n                if (unusedIndexes[i]) {\r\n                    continue\r\n                }\r\n                resultSizes[i] += diffElement;\r\n                if (onePixelElementsCount > 0) {\r\n                    if (onePixelElementsCount < 1) {\r\n                        resultSizes[i] += onePixelElementsCount;\r\n                        onePixelElementsCount = 0\r\n                    } else {\r\n                        resultSizes[i]++;\r\n                        onePixelElementsCount--\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getRealColumnWidth: function(width, groupWidth) {\r\n        if (!isPercentWidth(width)) {\r\n            return parseFloat(width)\r\n        }\r\n        groupWidth = groupWidth || this._rowsView.contentWidth();\r\n        return parseFloat(width) * groupWidth / 100\r\n    },\r\n    _getTotalWidth: function(widths, groupWidth) {\r\n        var result = 0;\r\n        for (var i = 0; i < widths.length; i++) {\r\n            var width = widths[i];\r\n            if (width && width !== HIDDEN_COLUMNS_WIDTH) {\r\n                result += this._getRealColumnWidth(width, groupWidth)\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    updateSize: function($rootElement) {\r\n        var that = this;\r\n        var $groupElement;\r\n        var width;\r\n        var importantMarginClass = that.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\r\n        if (void 0 === that._hasHeight && $rootElement && $rootElement.is(\":visible\") && $rootElement.width()) {\r\n            $groupElement = $rootElement.children(\".\" + that.getWidgetContainerClass());\r\n            if ($groupElement.length) {\r\n                $groupElement.detach()\r\n            }\r\n            that._hasHeight = !!getContainerHeight($rootElement);\r\n            width = $rootElement.width();\r\n            $rootElement.addClass(importantMarginClass);\r\n            that._hasWidth = $rootElement.width() === width;\r\n            $rootElement.removeClass(importantMarginClass);\r\n            if ($groupElement.length) {\r\n                $groupElement.appendTo($rootElement)\r\n            }\r\n        }\r\n    },\r\n    publicMethods: function() {\r\n        return [\"resize\", \"updateDimensions\"]\r\n    },\r\n    resize: function() {\r\n        return !this.component._requireResize && this.updateDimensions()\r\n    },\r\n    updateDimensions: function(checkSize) {\r\n        var that = this;\r\n        that._initPostRenderHandlers();\r\n        if (!that._checkSize(checkSize)) {\r\n            return\r\n        }\r\n        var prevResult = that._resizeDeferred;\r\n        var result = that._resizeDeferred = new _deferred.Deferred;\r\n        (0, _deferred.when)(prevResult).always(function() {\r\n            _common2.default.deferRender(function() {\r\n                if (that._dataController.isLoaded()) {\r\n                    that._synchronizeColumns()\r\n                }\r\n                that._resetGroupElementHeight();\r\n                _common2.default.deferUpdate(function() {\r\n                    _common2.default.deferRender(function() {\r\n                        _common2.default.deferUpdate(function() {\r\n                            that._updateDimensionsCore()\r\n                        })\r\n                    })\r\n                })\r\n            }).done(result.resolve).fail(result.reject)\r\n        });\r\n        return result.promise()\r\n    },\r\n    _resetGroupElementHeight: function() {\r\n        var groupElement = this.component.$element().children().get(0);\r\n        var scrollable = this._rowsView.getScrollable();\r\n        if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\r\n            groupElement.style.height = \"\"\r\n        }\r\n    },\r\n    _checkSize: function(checkSize) {\r\n        var $rootElement = this.component.$element();\r\n        if (checkSize && (this._lastWidth === $rootElement.width() && this._lastHeight === $rootElement.height() || !$rootElement.is(\":visible\"))) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _setScrollerSpacingCore: function(hasHeight) {\r\n        var that = this;\r\n        var vScrollbarWidth = hasHeight ? that._rowsView.getScrollbarWidth() : 0;\r\n        var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\r\n        _common2.default.deferRender(function() {\r\n            that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\r\n            that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\r\n            that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth)\r\n        })\r\n    },\r\n    _setScrollerSpacing: function(hasHeight) {\r\n        var _this2 = this;\r\n        if (true === this.option(\"scrolling.useNative\")) {\r\n            _common2.default.deferRender(function() {\r\n                _common2.default.deferUpdate(function() {\r\n                    _this2._setScrollerSpacingCore(hasHeight)\r\n                })\r\n            })\r\n        } else {\r\n            this._setScrollerSpacingCore(hasHeight)\r\n        }\r\n    },\r\n    _updateDimensionsCore: function() {\r\n        var that = this;\r\n        var dataController = that._dataController;\r\n        var rowsView = that._rowsView;\r\n        var $rootElement = that.component.$element();\r\n        var groupElement = $rootElement.children().get(0);\r\n        var rootElementHeight = $rootElement && ($rootElement.get(0).clientHeight || $rootElement.height());\r\n        var maxHeight = parseInt($rootElement.css(\"maxHeight\"));\r\n        var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;\r\n        var height = that.option(\"height\") || $rootElement.get(0).style.height;\r\n        var editorFactory = that.getController(\"editorFactory\");\r\n        var isMaxHeightApplied = maxHeightHappened && groupElement.scrollHeight === groupElement.offsetHeight;\r\n        var $testDiv;\r\n        that.updateSize($rootElement);\r\n        var hasHeight = that._hasHeight || maxHeightHappened;\r\n        if (height && that._hasHeight ^ \"auto\" !== height) {\r\n            $testDiv = (0, _renderer2.default)(\"<div>\").height(height).appendTo($rootElement);\r\n            that._hasHeight = !!$testDiv.height();\r\n            $testDiv.remove()\r\n        }\r\n        _common2.default.deferRender(function() {\r\n            rowsView.height(null, hasHeight);\r\n            if (maxHeightHappened && !isMaxHeightApplied) {\r\n                (0, _renderer2.default)(groupElement).css(\"height\", maxHeight)\r\n            }\r\n            if (!dataController.isLoaded()) {\r\n                rowsView.setLoading(dataController.isLoading());\r\n                return\r\n            }\r\n            _common2.default.deferUpdate(function() {\r\n                that._updateLastSizes($rootElement);\r\n                that._setScrollerSpacing(hasHeight);\r\n                (0, _iterator.each)(VIEW_NAMES, function(index, viewName) {\r\n                    var view = that.getView(viewName);\r\n                    if (view) {\r\n                        view.resize()\r\n                    }\r\n                });\r\n                editorFactory && editorFactory.resize()\r\n            })\r\n        })\r\n    },\r\n    _updateLastSizes: function($rootElement) {\r\n        this._lastWidth = $rootElement.width();\r\n        this._lastHeight = $rootElement.height()\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"width\":\r\n            case \"height\":\r\n                this.component._renderDimensions();\r\n                this.resize();\r\n            case \"legacyRendering\":\r\n            case \"renderAsync\":\r\n                args.handled = true;\r\n                return;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    init: function() {\r\n        var that = this;\r\n        that._dataController = that.getController(\"data\");\r\n        that._columnsController = that.getController(\"columns\");\r\n        that._columnHeadersView = that.getView(\"columnHeadersView\");\r\n        that._footerView = that.getView(\"footerView\");\r\n        that._rowsView = that.getView(\"rowsView\")\r\n    }\r\n});\r\nvar SynchronizeScrollingController = _uiGrid_core2.default.ViewController.inherit({\r\n    _scrollChangedHandler: function(views, pos, viewName) {\r\n        for (var j = 0; j < views.length; j++) {\r\n            if (views[j] && views[j].name !== viewName) {\r\n                views[j].scrollTo({\r\n                    left: pos.left,\r\n                    top: pos.top\r\n                })\r\n            }\r\n        }\r\n    },\r\n    init: function() {\r\n        var views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\r\n        for (var i = 0; i < views.length; i++) {\r\n            var view = views[i];\r\n            if (view) {\r\n                view.scrollChanged.add(this._scrollChangedHandler.bind(this, views))\r\n            }\r\n        }\r\n    }\r\n});\r\nvar GridView = _uiGrid_core2.default.View.inherit({\r\n    _endUpdateCore: function() {\r\n        if (this.component._requireResize) {\r\n            this.component._requireResize = false;\r\n            this._resizingController.resize()\r\n        }\r\n    },\r\n    _getWidgetAriaLabel: function() {\r\n        return \"dxDataGrid-ariaDataGrid\"\r\n    },\r\n    init: function() {\r\n        var that = this;\r\n        that._resizingController = that.getController(\"resizing\");\r\n        that._dataController = that.getController(\"data\")\r\n    },\r\n    getView: function(name) {\r\n        return this.component._views[name]\r\n    },\r\n    element: function() {\r\n        return this._groupElement\r\n    },\r\n    optionChanged: function(args) {\r\n        var that = this;\r\n        if (_type2.default.isDefined(that._groupElement) && \"showBorders\" === args.name) {\r\n            that._groupElement.toggleClass(that.addWidgetPrefix(BORDERS_CLASS), !!args.value);\r\n            args.handled = true\r\n        } else {\r\n            that.callBase(args)\r\n        }\r\n    },\r\n    _renderViews: function($groupElement) {\r\n        var that = this;\r\n        (0, _iterator.each)(VIEW_NAMES, function(index, viewName) {\r\n            var view = that.getView(viewName);\r\n            if (view) {\r\n                view.render($groupElement)\r\n            }\r\n        })\r\n    },\r\n    _getTableRoleName: function() {\r\n        return \"grid\"\r\n    },\r\n    render: function($rootElement) {\r\n        var that = this;\r\n        var isFirstRender = !that._groupElement;\r\n        var $groupElement = that._groupElement || (0, _renderer2.default)(\"<div>\").addClass(that.getWidgetContainerClass());\r\n        $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\r\n        $groupElement.toggleClass(that.addWidgetPrefix(BORDERS_CLASS), !!that.option(\"showBorders\"));\r\n        that.setAria(\"role\", \"presentation\", $rootElement);\r\n        that.component.setAria({\r\n            role: this._getTableRoleName(),\r\n            label: _message2.default.format(that._getWidgetAriaLabel())\r\n        }, $groupElement);\r\n        that._rootElement = $rootElement || that._rootElement;\r\n        if (isFirstRender) {\r\n            that._groupElement = $groupElement;\r\n            _window2.default.hasWindow() && that.getController(\"resizing\").updateSize($rootElement);\r\n            $groupElement.appendTo($rootElement)\r\n        }\r\n        that._renderViews($groupElement)\r\n    },\r\n    update: function() {\r\n        var that = this;\r\n        var $rootElement = that._rootElement;\r\n        var $groupElement = that._groupElement;\r\n        var resizingController = that.getController(\"resizing\");\r\n        if ($rootElement && $groupElement) {\r\n            resizingController.resize();\r\n            if (that._dataController.isLoaded()) {\r\n                that._resizingController.fireContentReadyAction()\r\n            }\r\n        }\r\n    }\r\n});\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            showBorders: false,\r\n            renderAsync: false,\r\n            legacyRendering: false\r\n        }\r\n    },\r\n    controllers: {\r\n        resizing: ResizingController,\r\n        synchronizeScrolling: SynchronizeScrollingController\r\n    },\r\n    views: {\r\n        gridView: GridView\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}