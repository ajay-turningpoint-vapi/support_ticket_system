{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange;\n\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\n\nvar number = require(\"../../localization/number\");\n\nvar getCaretBoundaries = function (text, format) {\n  if (\"string\" === typeof format) {\n    var signParts = format.split(\";\");\n    var sign = number.getSign(text, format);\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\n    format = signParts[sign < 0 ? 1 : 0];\n\n    var mockEscapedStubs = function (str) {\n      return str.replace(/'([^']*)'/g, function (str) {\n        return str.split(\"\").map(function () {\n          return \" \";\n        }).join(\"\").substr(2);\n      });\n    };\n\n    format = mockEscapedStubs(format);\n    var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\n    var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\n    return {\n      start: prefixStubLength,\n      end: text.length - postfixStubLength\n    };\n  } else {\n    return {\n      start: 0,\n      end: text.length\n    };\n  }\n};\n\nvar _getDigitCountBeforeIndex = function (index, text) {\n  var decimalSeparator = number.getDecimalSeparator();\n  var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\n  var textBeforePosition = text.slice(0, index);\n  return textBeforePosition.replace(regExp, \"\").length;\n};\n\nvar _reverseText = function (text) {\n  return text.split(\"\").reverse().join(\"\");\n};\n\nvar _getDigitPositionByIndex = function (digitIndex, text) {\n  if (!digitIndex) {\n    return -1;\n  }\n\n  var regExp = /[0-9]/g;\n  var counter = 1;\n  var index = null;\n  var result = regExp.exec(text);\n\n  while (result) {\n    index = result.index;\n\n    if (!digitIndex || counter >= digitIndex) {\n      return index;\n    }\n\n    counter++;\n    result = regExp.exec(text);\n  }\n\n  return null === index ? text.length : index;\n};\n\nvar _trimNonNumericCharsFromEnd = function (text) {\n  return text.replace(/[^0-9e]+$/, \"\");\n};\n\nvar getCaretWithOffset = function (caret, offset) {\n  if (void 0 === caret.start) {\n    caret = {\n      start: caret,\n      end: caret\n    };\n  }\n\n  return {\n    start: caret.start + offset,\n    end: caret.end + offset\n  };\n};\n\nvar getCaretAfterFormat = function (text, formatted, caret, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var point = number.getDecimalSeparator();\n  var isSeparatorBasedText = isSeparatorBasedString(text);\n  var pointPosition = isSeparatorBasedText ? 0 : text.indexOf(point);\n  var newPointPosition = formatted.indexOf(point);\n  var textParts = isSeparatorBasedText ? text.split(text[pointPosition]) : text.split(point);\n  var formattedParts = formatted.split(point);\n  var isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\n\n  if (isCaretOnFloat) {\n    var relativeIndex = caret.start - pointPosition - 1;\n\n    var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);\n\n    var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\n    return getCaretInBoundaries(newPosition, formatted, format);\n  } else {\n    var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);\n\n    var positionFromEnd = textParts[0].length - caret.start;\n\n    var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));\n\n    var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));\n\n    var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);\n    return getCaretInBoundaries(newPositionFromBegin, formatted, format);\n  }\n};\n\nfunction isSeparatorBasedString(text) {\n  return 1 === text.length && !!text.match(/^[,.][0-9]*$/g);\n}\n\nvar isCaretInBoundaries = function (caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretInBoundaries(caret, text, format);\n  return caret.start >= boundaries.start && caret.end <= boundaries.end;\n};\n\nfunction getCaretInBoundaries(caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretBoundaries(text, format);\n  var adjustedCaret = {\n    start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\n    end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\n  };\n  return adjustedCaret;\n}\n\nvar getCaretOffset = function (previousText, newText, format) {\n  var previousBoundaries = getCaretBoundaries(previousText, format);\n  var newBoundaries = getCaretBoundaries(newText, format);\n  return newBoundaries.start - previousBoundaries.start;\n};\n\nexports.getCaretBoundaries = getCaretBoundaries;\nexports.isCaretInBoundaries = isCaretInBoundaries;\nexports.getCaretWithOffset = getCaretWithOffset;\nexports.getCaretInBoundaries = getCaretInBoundaries;\nexports.getCaretAfterFormat = getCaretAfterFormat;\nexports.getCaretOffset = getCaretOffset;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/number_box/number_box.caret.js"],"names":["fitIntoRange","require","escapeRegExp","number","getCaretBoundaries","text","format","signParts","split","sign","getSign","mockEscapedStubs","str","replace","map","join","substr","prefixStubLength","exec","length","postfixStubLength","start","end","_getDigitCountBeforeIndex","index","decimalSeparator","getDecimalSeparator","regExp","RegExp","textBeforePosition","slice","_reverseText","reverse","_getDigitPositionByIndex","digitIndex","counter","result","_trimNonNumericCharsFromEnd","getCaretWithOffset","caret","offset","getCaretAfterFormat","formatted","point","isSeparatorBasedText","isSeparatorBasedString","pointPosition","indexOf","newPointPosition","textParts","formattedParts","isCaretOnFloat","relativeIndex","digitsBefore","newPosition","getCaretInBoundaries","formattedIntPart","positionFromEnd","digitsFromEnd","newPositionFromEnd","newPositionFromBegin","match","isCaretInBoundaries","boundaries","adjustedCaret","getCaretOffset","previousText","newText","previousBoundaries","newBoundaries","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange;\r\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\r\nvar number = require(\"../../localization/number\");\r\nvar getCaretBoundaries = function(text, format) {\r\n    if (\"string\" === typeof format) {\r\n        var signParts = format.split(\";\");\r\n        var sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        format = signParts[sign < 0 ? 1 : 0];\r\n        var mockEscapedStubs = function(str) {\r\n            return str.replace(/'([^']*)'/g, function(str) {\r\n                return str.split(\"\").map(function() {\r\n                    return \" \"\r\n                }).join(\"\").substr(2)\r\n            })\r\n        };\r\n        format = mockEscapedStubs(format);\r\n        var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\r\n        var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\r\n        return {\r\n            start: prefixStubLength,\r\n            end: text.length - postfixStubLength\r\n        }\r\n    } else {\r\n        return {\r\n            start: 0,\r\n            end: text.length\r\n        }\r\n    }\r\n};\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = number.getDecimalSeparator();\r\n    var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\r\n    var textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g;\r\n    var counter = 1;\r\n    var index = null;\r\n    var result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (!digitIndex || counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar _trimNonNumericCharsFromEnd = function(text) {\r\n    return text.replace(/[^0-9e]+$/, \"\")\r\n};\r\nvar getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nvar getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = number.getDecimalSeparator();\r\n    var isSeparatorBasedText = isSeparatorBasedString(text);\r\n    var pointPosition = isSeparatorBasedText ? 0 : text.indexOf(point);\r\n    var newPointPosition = formatted.indexOf(point);\r\n    var textParts = isSeparatorBasedText ? text.split(text[pointPosition]) : text.split(point);\r\n    var formattedParts = formatted.split(point);\r\n    var isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1;\r\n        var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);\r\n        var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);\r\n        var positionFromEnd = textParts[0].length - caret.start;\r\n        var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));\r\n        var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));\r\n        var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\n\r\nfunction isSeparatorBasedString(text) {\r\n    return 1 === text.length && !!text.match(/^[,.][0-9]*$/g)\r\n}\r\nvar isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\n\r\nfunction getCaretInBoundaries(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format);\r\n    var adjustedCaret = {\r\n        start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\r\n        end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\r\n    };\r\n    return adjustedCaret\r\n}\r\nvar getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format);\r\n    var newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\nexports.getCaretBoundaries = getCaretBoundaries;\r\nexports.isCaretInBoundaries = isCaretInBoundaries;\r\nexports.getCaretWithOffset = getCaretWithOffset;\r\nexports.getCaretInBoundaries = getCaretInBoundaries;\r\nexports.getCaretAfterFormat = getCaretAfterFormat;\r\nexports.getCaretOffset = getCaretOffset;\r\n"]},"metadata":{},"sourceType":"script"}