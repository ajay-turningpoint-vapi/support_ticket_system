{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.virtual_scrolling_core\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _load_indicator = require(\"../load_indicator\");\n\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _position = require(\"../../core/utils/position\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TABLE_CLASS = \"table\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar ROW_CLASS = \"dx-row\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar SCROLLING_MODE_STANDARD = \"standard\";\nvar PIXELS_LIMIT = 25e4;\nvar LOAD_TIMEOUT = 300;\n\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\n\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\n\nvar isVirtualRowRendering = function (that) {\n  var rowRenderingMode = that.option(\"scrolling.rowRenderingMode\");\n\n  if (rowRenderingMode === SCROLLING_MODE_VIRTUAL) {\n    return true;\n  } else {\n    if (rowRenderingMode === SCROLLING_MODE_STANDARD) {\n      return false;\n    }\n  }\n};\n\nvar _correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  var countCorrection = fromEnd ? 0 : 1;\n\n  for (var i = 0; i < count + countCorrection; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n\n    if (item && !isItemCountableFunc(item, i === count)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function (that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else {\n        if (that._isLoading) {\n          that._isLoading = false;\n          that.loadingChanged.fire(false);\n        }\n      }\n    }\n  };\n\n  var result = {\n    init: function (dataSource) {\n      var that = this;\n      that.callBase.apply(that, arguments);\n      that._items = [];\n      that._isLoaded = true;\n      that._virtualScrollController = new _uiGrid_core2.default.VirtualScrollController(that.component, {\n        pageSize: function () {\n          return that.pageSize();\n        },\n        totalItemsCount: function () {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function () {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function (index) {\n          return dataSource.pageIndex(index);\n        },\n        isLoading: function () {\n          return dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function () {\n          return that.pageCount();\n        },\n        load: function () {\n          return dataSource.load();\n        },\n        updateLoading: function () {\n          _updateLoading(that);\n        },\n        itemsCount: function () {\n          return that.itemsCount(true);\n        },\n        items: function () {\n          return dataSource.items();\n        },\n        viewportItems: function (items) {\n          if (items) {\n            that._items = items;\n          }\n\n          return that._items;\n        },\n        onChanged: function (e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function (e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n\n          return that._renderTime || 0;\n        }\n      });\n    },\n    _handleLoadingChanged: function (isLoading) {\n      if (!isVirtualMode(this) || this._isLoadingAll) {\n        this._isLoading = isLoading;\n        this.callBase.apply(this, arguments);\n      }\n\n      if (isLoading) {\n        this._startLoadTime = new Date();\n      } else {\n        this._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function () {\n      var that = this;\n      that._isLoading = false;\n      that.loadingChanged.fire(false);\n      that.callBase.apply(that, arguments);\n    },\n    _handleDataChanged: function (e) {\n      var callBase = this.callBase.bind(this);\n\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var that = this;\n\n      if (!that.option(\"legacyRendering\") && isVirtualMode(that) && !operationTypes.reload && operationTypes.skip && that._renderTime < that.option(\"scrolling.renderingThreshold\")) {\n        options.delay = void 0;\n      }\n\n      that.callBase.apply(that, arguments);\n    },\n    items: function () {\n      return this._items;\n    },\n    itemsCount: function (isBase) {\n      if (isBase) {\n        return this.callBase();\n      }\n\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function (loadOptions) {\n      if (loadOptions) {\n        return this.callBase(loadOptions);\n      }\n\n      return this._virtualScrollController.load();\n    },\n    isLoading: function () {\n      return this._isLoading;\n    },\n    isLoaded: function () {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function (isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function () {\n      var result = this.callBase.apply(this, arguments);\n      this.resetPagesCache();\n\n      _updateLoading(this);\n\n      return result;\n    },\n    reload: function () {\n      this._dataSource.pageIndex(this.pageIndex());\n\n      var virtualScrollController = this._virtualScrollController;\n\n      if (virtualScrollController) {\n        var d = new _deferred.Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController._delayDeferred;\n\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function (options, operationTypes) {\n      var that = this;\n      var storeLoadOptions = options.storeLoadOptions;\n      var dataSource = that._dataSource;\n\n      if (operationTypes.reload) {\n        that._virtualScrollController.reset();\n\n        dataSource.items().length = 0;\n        that._isLoaded = false;\n\n        _updateLoading(that);\n\n        that._isLoaded = true;\n\n        if (isAppendMode(that)) {\n          that.pageIndex(0);\n          dataSource.pageIndex(0);\n          storeLoadOptions.pageIndex = 0;\n          options.pageIndex = 0;\n          storeLoadOptions.skip = 0;\n        } else {\n          dataSource.pageIndex(that.pageIndex());\n\n          if (dataSource.paginate()) {\n            options.pageIndex = that.pageIndex();\n            storeLoadOptions.skip = that.pageIndex() * that.pageSize();\n          }\n        }\n      } else {\n        if (isAppendMode(that) && storeLoadOptions.skip && that._skipCorrection < 0) {\n          storeLoadOptions.skip += that._skipCorrection;\n        }\n      }\n\n      return that.callBase.apply(that, arguments);\n    },\n    dispose: function () {\n      this._virtualScrollController.dispose();\n\n      this.callBase.apply(this, arguments);\n    }\n  };\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentSize\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"pageIndex\", \"beginPageIndex\", \"endPageIndex\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\n\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function ($emptyRows, className) {\n    var getRowParent = function (row) {\n      return (0, _renderer2.default)(row).parent(\".\" + className).get(0);\n    };\n\n    var tBodies = $emptyRows.toArray().map(getRowParent).filter(function (row) {\n      return row;\n    });\n\n    if (tBodies.length) {\n      $emptyRows = (0, _renderer2.default)(tBodies);\n    }\n\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n\n  return {\n    init: function () {\n      var _dataController$state,\n          _this = this;\n\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(function () {\n        _this.scrollToPage(dataController.pageIndex());\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(function () {\n        _this._scrollToCurrentPageOnResize();\n      });\n\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function () {\n      var _this2 = this;\n\n      var dataController = this.getController(\"data\");\n\n      if (!this.option(\"legacyRendering\") && dataController.pageIndex() > 0) {\n        var resizeHandler = function resizeHandler() {\n          _this2.resizeCompleted.remove(resizeHandler);\n\n          _this2.scrollToPage(dataController.pageIndex());\n        };\n\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function (pageIndex) {\n      var that = this;\n      var dataController = that._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n\n      if (isVirtualMode(that) || isAppendMode(that)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n\n        for (var index in itemSizes) {\n          if (index <= itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n\n      that.scrollTo({\n        y: scrollPosition,\n        x: that._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function (e) {\n      this._updateContentPosition(true);\n\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function (e) {\n      var that = this;\n      var startRenderTime = new Date();\n      that.callBase.apply(that, arguments);\n      var dataSource = that._dataController._dataSource;\n\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = that._dataController.viewportSize() || 20;\n\n        if (isVirtualRowRendering(that)) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n    },\n    _getRowElements: function (tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _renderContent: function (contentElement, tableElement) {\n      var that = this;\n\n      var virtualItemsCount = that._dataController.virtualItemsCount();\n\n      if (virtualItemsCount && that.option(\"legacyRendering\")) {\n        if ((0, _window.hasWindow)()) {\n          tableElement.addClass(that.addWidgetPrefix(TABLE_CONTENT_CLASS));\n        }\n\n        if (!contentElement.children().length) {\n          contentElement.append(tableElement);\n        } else {\n          contentElement.children().first().replaceWith(tableElement);\n        }\n\n        if (1 === contentElement.children(\"table\").length) {\n          contentElement.append(that._createTable());\n          that._contentHeight = 0;\n        }\n\n        return contentElement;\n      }\n\n      return that.callBase.apply(that, arguments);\n    },\n    _removeRowsElements: function (contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(function (rowElement) {\n        var $rowElement = (0, _renderer2.default)(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _restoreErrorRow: function (contentTable) {\n      var editingController = this.getController(\"editing\");\n      editingController && editingController.hasChanges() && this._getRowElements(contentTable).each(function (_, item) {\n        var rowOptions = (0, _renderer2.default)(item).data(\"options\");\n\n        if (rowOptions) {\n          var editData = editingController.getEditDataByKey(rowOptions.key);\n          editData && editingController._showErrorRow(editData);\n        }\n      });\n    },\n    _updateContent: function (tableElement, change) {\n      var that = this;\n      var $freeSpaceRowElements;\n\n      var contentElement = that._findContentElement();\n\n      var changeType = change && change.changeType;\n\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        var contentTable = contentElement.children().first();\n\n        var $tBodies = that._getBodies(tableElement);\n\n        if (!that.option(\"legacyRendering\") && 1 === $tBodies.length) {\n          that._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n        } else {\n          $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n        }\n\n        tableElement.remove();\n        $freeSpaceRowElements = that._getFreeSpaceRowElements(contentTable);\n        removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n\n        if (change.removeCount) {\n          that._removeRowsElements(contentTable, change.removeCount, changeType);\n        }\n\n        that._restoreErrorRow(contentTable);\n      } else {\n        that.callBase.apply(that, arguments);\n      }\n\n      that._updateBottomLoading();\n    },\n    _addVirtualRow: function ($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _updateContentPosition: function (isRender) {\n      var that = this;\n      var dataController = that._dataController;\n      var rowHeight = that._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n\n      if (!that.option(\"legacyRendering\") && (isVirtualMode(that) || isVirtualRowRendering(that))) {\n        if (!isRender) {\n          var rowHeights = that._getRowElements(that._tableElement).toArray().map(function (row) {\n            return (0, _position.getBoundingRect)(row).height;\n          });\n\n          dataController.setContentSize(rowHeights);\n        }\n\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = that.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each(function (index) {\n          var isFixed = index > 0;\n          that._isFixedTableRendering = isFixed;\n\n          that._addVirtualRow((0, _renderer2.default)(this), isFixed, \"top\", top);\n\n          that._addVirtualRow((0, _renderer2.default)(this), isFixed, \"bottom\", bottom);\n\n          that._isFixedTableRendering = false;\n        });\n      } else {\n        (0, _common.deferUpdate)(function () {\n          that._updateContentPositionCore();\n        });\n      }\n    },\n    _updateContentPositionCore: function () {\n      var that = this;\n      var contentHeight;\n      var $tables;\n      var $contentTable;\n      var rowHeight = that._rowHeight || 20;\n\n      var virtualItemsCount = that._dataController.virtualItemsCount();\n\n      if (virtualItemsCount) {\n        var contentElement = that._findContentElement();\n\n        $tables = contentElement.children();\n        $contentTable = $tables.eq(0);\n        var virtualTable = $tables.eq(1);\n        that._contentTableHeight = $contentTable[0].offsetHeight;\n\n        that._dataController.viewportItemSize(rowHeight);\n\n        that._dataController.setContentSize(that._contentTableHeight);\n\n        contentHeight = that._dataController.getVirtualContentSize();\n\n        var top = that._dataController.getContentOffset();\n\n        (0, _common.deferRender)(function () {\n          _translator2.default.move($contentTable, {\n            left: 0,\n            top: top\n          });\n\n          var isRenderVirtualTableContentRequired = that._contentHeight !== contentHeight || 0 === contentHeight || !that._isTableLinesDisplaysCorrect(virtualTable) || !that._isColumnElementsEqual($contentTable.find(\"col\"), virtualTable.find(\"col\"));\n\n          if (isRenderVirtualTableContentRequired) {\n            that._contentHeight = contentHeight;\n\n            that._renderVirtualTableContent(virtualTable, contentHeight);\n          }\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function (table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function ($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n\n      if (result) {\n        (0, _iterator.each)($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n\n      return result;\n    },\n    _renderVirtualTableContent: function (container, height) {\n      var that = this;\n\n      var columns = that._columnsController.getVisibleColumns();\n\n      var html = that._createColGroup(columns).prop(\"outerHTML\");\n\n      var freeSpaceCellsHtml = \"\";\n      var columnLinesClass = that.option(\"showColumnLines\") ? COLUMN_LINES_CLASS : \"\";\n\n      var createFreeSpaceRowHtml = function (height) {\n        return \"<tr style='height:\" + height + \"px;' class='\" + FREESPACE_CLASS + \" \" + ROW_CLASS + \" \" + columnLinesClass + \"' >\" + freeSpaceCellsHtml + \"</tr>\";\n      };\n\n      for (var i = 0; i < columns.length; i++) {\n        var classes = that._getCellClasses(columns[i]);\n\n        var classString = classes.length ? \" class='\" + classes.join(\" \") + \"'\" : \"\";\n        freeSpaceCellsHtml += \"<td\" + classString + \"/>\";\n      }\n\n      while (height > PIXELS_LIMIT) {\n        html += createFreeSpaceRowHtml(PIXELS_LIMIT);\n        height -= PIXELS_LIMIT;\n      }\n\n      html += createFreeSpaceRowHtml(height);\n      container.addClass(that.addWidgetPrefix(TABLE_CLASS));\n      container.html(html);\n    },\n    _getCellClasses: function (column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function ($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function () {\n      var that = this;\n      var scrollingMode = that.option(\"scrolling.mode\");\n      var virtualMode = scrollingMode === SCROLLING_MODE_VIRTUAL;\n      var appendMode = scrollingMode === SCROLLING_MODE_INFINITE;\n      var showBottomLoading = !that._dataController.hasKnownLastPage() && that._dataController.isLoaded() && (virtualMode || appendMode);\n\n      var $contentElement = that._findContentElement();\n\n      var bottomLoadPanelElement = that._findBottomLoadPanel($contentElement);\n\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(that._createComponent((0, _renderer2.default)(\"<div>\"), _load_indicator2.default).$element()).appendTo($contentElement);\n        }\n      } else {\n        if (bottomLoadPanelElement) {\n          bottomLoadPanelElement.remove();\n        }\n      }\n    },\n    _handleScroll: function (e) {\n      var that = this;\n\n      if (that._hasHeight && that._rowHeight) {\n        that._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n\n      that.callBase.apply(that, arguments);\n    },\n    _needUpdateRowHeight: function (itemsCount) {\n      var that = this;\n      return that.callBase.apply(that, arguments) || itemsCount > 0 && that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && that.option(\"scrolling.rowRenderingMode\") !== SCROLLING_MODE_VIRTUAL;\n    },\n    _updateRowHeight: function () {\n      var that = this;\n      that.callBase.apply(that, arguments);\n\n      if (that._rowHeight) {\n        that._updateContentPosition();\n\n        var viewportHeight = that._hasHeight ? that.element().outerHeight() : (0, _renderer2.default)((0, _window.getWindow)()).outerHeight();\n\n        that._dataController.viewportSize(Math.ceil(viewportHeight / that._rowHeight));\n      }\n    },\n    updateFreeSpaceRowHeight: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (result) {\n        this._updateContentPosition();\n      }\n\n      return result;\n    },\n    setLoading: function (isLoading, messageText) {\n      var that = this;\n      var callBase = that.callBase;\n      var dataController = that._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!that._findBottomLoadPanel();\n\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n\n      callBase.call(that, isLoading, messageText);\n    },\n    _resizeCore: function () {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n\n      if (that.component.$element() && !that._windowScroll && $element.closest((0, _window.getWindow)().document).length) {\n        that._windowScroll = _uiGrid_core2.default.subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n\n      that.loadIfNeed();\n    },\n    loadIfNeed: function () {\n      var dataController = this._dataController;\n\n      if (dataController && dataController.loadIfNeed) {\n        dataController.loadIfNeed();\n      }\n    },\n    setColumnWidths: function (widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? scrollable.$content() : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\"\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function () {\n            var baseResult = this.callBase.apply(this, arguments) || new _deferred.Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          getRowPageSize: function () {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function () {\n            var that = this;\n            var rowsScrollController = that._rowsScrollController || that._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(function () {\n              if (isVirtualMode(that) || isVirtualRowRendering(that)) {\n                var rowIndexOffset = that.getRowIndexOffset();\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = that.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n                var isSortingOperation = that.dataSource().operationTypes().sorting;\n\n                if (scrollable && !that.option(\"legacyRendering\") && !isSortingOperation) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && (0, _renderer2.default)(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var allowedTopOffset = _browser2.default.mozilla || _browser2.default.msie ? 1 : 0;\n\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + $rowElement.outerHeight() * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function () {\n            var that = this;\n            var virtualRowsRendering = isVirtualRowRendering(that);\n\n            if (\"virtual\" !== that.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || that.option(\"legacyRendering\") || !that.option(\"scrolling.rowPageSize\")) {\n              that._visibleItems = null;\n              that._rowsScrollController = null;\n              return;\n            }\n\n            that._rowPageIndex = Math.ceil(that.pageIndex() * that.pageSize() / that.getRowPageSize());\n            that._visibleItems = [];\n\n            var isItemCountable = function (item) {\n              return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && that._dataSource.isGroupItemCountable(item.data);\n            };\n\n            that._rowsScrollController = new _uiGrid_core2.default.VirtualScrollController(that.component, {\n              pageSize: function () {\n                return that.getRowPageSize();\n              },\n              totalItemsCount: function () {\n                return isVirtualMode(that) ? that.totalItemsCount() : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function () {\n                return true;\n              },\n              pageIndex: function (index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n\n                return that._rowPageIndex;\n              },\n              isLoading: function () {\n                return that.isLoading();\n              },\n              pageCount: function pageCount() {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function () {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n\n                if (!that._rowsScrollController._dataSource.items().length && this.totalItemsCount()) {\n                  return;\n                }\n\n                that._rowsScrollController.handleDataChanged(function (change) {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n\n                  that._visibleItems.forEach(function (item, index) {\n                    item.rowIndex = index;\n                  });\n\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function () {},\n              itemsCount: function () {\n                return that._rowsScrollController._dataSource.items().filter(isItemCountable).length;\n              },\n              correctCount: function (items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, isItemCountable);\n              },\n              items: function (countableOnly) {\n                var dataSource = that.dataSource();\n                var virtualItemsCount = dataSource && dataSource.virtualItemsCount();\n                var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                var rowPageSize = that.getRowPageSize();\n                var skip = that._rowPageIndex * rowPageSize - begin;\n                var take = rowPageSize;\n                var result = that._items;\n\n                if (skip < 0) {\n                  return [];\n                }\n\n                if (skip) {\n                  skip = this.correctCount(result, skip);\n                  result = result.slice(skip);\n                }\n\n                if (take) {\n                  take = this.correctCount(result, take);\n                  result = result.slice(0, take);\n                }\n\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function (items) {\n                if (items) {\n                  that._visibleItems = items;\n                }\n\n                return that._visibleItems;\n              },\n              onChanged: function () {},\n              changingDuration: function (e) {\n                var dataSource = that.dataSource();\n\n                if (dataSource.isLoading()) {\n                  return LOAD_TIMEOUT;\n                }\n\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            }, true);\n\n            that._rowsScrollController.positionChanged.add(function () {\n              var _that$_dataSource;\n\n              null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.setViewportItemIndex(that._rowsScrollController.getViewportItemIndex());\n            });\n\n            if (that.isLoaded()) {\n              that._rowsScrollController.load();\n            }\n          },\n          _updateItemsCore: function (change) {\n            var _this3 = this;\n\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach(function (rowIndex, index) {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else {\n                      if (\"insert\" === changeType) {\n                        visibleItems.splice(rowIndex, 0, newItem);\n                      } else {\n                        if (\"remove\" === changeType) {\n                          visibleItems.splice(rowIndex, 1);\n                        }\n                      }\n                    }\n                  });\n                } else {\n                  visibleItems.forEach(function (item, index) {\n                    visibleItems[index] = _this3._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n\n                visibleItems.forEach(function (item, index) {\n                  item.rowIndex = index;\n                });\n              }\n            }\n          },\n          _applyChange: function (change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n\n                break;\n\n              case \"append\":\n                that._items.push.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n\n                break;\n\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function (allItems) {\n            return allItems ? this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function () {\n            var visibleItems = this._visibleItems;\n            var delta = 0;\n\n            if (visibleItems && visibleItems[0]) {\n              delta = this._items.indexOf(visibleItems[0]);\n            }\n\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function () {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              offset = rowsScrollController.beginPageIndex() * rowsScrollController._dataSource.pageSize();\n            } else {\n              if (\"virtual\" === this.option(\"scrolling.mode\") && dataSource) {\n                offset = dataSource.beginPageIndex() * dataSource.pageSize();\n              }\n            }\n\n            return offset;\n          },\n          viewportSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentSize: function (sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.setContentSize(sizes);\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.setContentSize(sizes);\n          },\n          loadIfNeed: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          refresh: function (options) {\n            var dataSource = this._dataSource;\n\n            if (dataSource && options && options.load && isAppendMode(this)) {\n              dataSource.resetCurrentTotalCount();\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          dispose: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          }\n        };\n\n        _uiGrid_core4.default.proxyMethod(members, \"virtualItemsCount\");\n\n        _uiGrid_core4.default.proxyMethod(members, \"getVirtualContentSize\");\n\n        _uiGrid_core4.default.proxyMethod(members, \"setViewportItemIndex\");\n\n        return members;\n      }(),\n      resizing: {\n        resize: function () {\n          var that = this;\n          var callBase = that.callBase;\n          var result;\n\n          if (!that.option(\"legacyRendering\") && (isVirtualMode(that) || isVirtualRowRendering(that))) {\n            clearTimeout(that._resizeTimeout);\n            var diff = new Date() - that._lastTime;\n            var updateTimeout = that.option(\"scrolling.updateTimeout\");\n\n            if (that._lastTime && diff < updateTimeout) {\n              result = new _deferred.Deferred();\n              that._resizeTimeout = setTimeout(function () {\n                callBase.apply(that).done(result.resolve).fail(result.reject);\n                that._lastTime = new Date();\n              }, updateTimeout);\n              that._lastTime = new Date();\n            } else {\n              result = callBase.apply(that);\n\n              if (that._dataController.isLoaded()) {\n                that._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(that);\n          }\n\n          return result;\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.virtual_scrolling.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_window","_common","_uiGrid_core","_uiGrid_core2","_uiGrid_core3","_uiGrid_core4","_iterator","_deferred","_translator","_translator2","_load_indicator","_load_indicator2","_browser","_browser2","_position","obj","__esModule","TABLE_CLASS","BOTTOM_LOAD_PANEL_CLASS","TABLE_CONTENT_CLASS","GROUP_SPACE_CLASS","CONTENT_CLASS","ROW_CLASS","FREESPACE_CLASS","COLUMN_LINES_CLASS","VIRTUAL_ROW_CLASS","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","SCROLLING_MODE_STANDARD","PIXELS_LIMIT","LOAD_TIMEOUT","isVirtualMode","that","option","isAppendMode","isVirtualRowRendering","rowRenderingMode","_correctCount","items","count","fromEnd","isItemCountableFunc","countCorrection","i","item","length","VirtualScrollingDataSourceAdapterExtender","_updateLoading","beginPageIndex","_virtualScrollController","viewportSize","getViewportItemIndex","pageSize","itemsCount","_dataSource","isLoading","_isLoading","loadingChanged","fire","result","init","dataSource","callBase","apply","arguments","_items","_isLoaded","default","VirtualScrollController","component","totalItemsCount","hasKnownLastPage","pageIndex","index","isCustomLoading","pageCount","load","updateLoading","viewportItems","onChanged","e","changed","changingDuration","_renderTime","_handleLoadingChanged","_isLoadingAll","_startLoadTime","Date","_handleLoadError","_handleDataChanged","bind","handleDataChanged","_customizeRemoteOperations","options","operationTypes","reload","skip","delay","isBase","loadOptions","isLoaded","resetPagesCache","isLiveUpdate","reset","_changeRowExpandCore","virtualScrollController","d","Deferred","done","r","delayDeferred","_delayDeferred","resolve","fail","reject","refresh","storeLoadOptions","paginate","_skipCorrection","dispose","forEach","name","VirtualScrollingRowsViewExtender","removeEmptyRows","$emptyRows","className","getRowParent","row","parent","get","tBodies","toArray","map","filter","rowCount","eq","remove","_dataController$state","_this","dataController","getController","pageChanged","add","scrollToPage","stateLoaded","_scrollToCurrentPageOnResize","_this2","resizeHandler","resizeCompleted","_dataController","scrollPosition","itemSize","getItemSize","itemSizes","getItemSizes","itemIndex","scrollTo","y","x","_scrollLeft","renderDelayedTemplates","_updateContentPosition","_renderCore","startRenderTime","itemCount","_getRowElements","tableElement","$rows","not","_renderContent","contentElement","virtualItemsCount","hasWindow","addClass","addWidgetPrefix","children","append","first","replaceWith","_createTable","_contentHeight","_removeRowsElements","contentTable","removeCount","changeType","rowElements","slice","errorHandlingController","rowElement","$rowElement","removeErrorRow","next","_restoreErrorRow","editingController","hasChanges","each","_","rowOptions","data","editData","getEditDataByKey","key","_showErrorRow","_updateContent","change","$freeSpaceRowElements","_findContentElement","$tBodies","_getBodies","_getFreeSpaceRowElements","_updateBottomLoading","_addVirtualRow","$table","isFixed","location","position","$virtualRow","_createEmptyRow","_wrapRowIfNeed","_appendEmptyRow","isRender","rowHeight","_rowHeight","viewportItemSize","rowHeights","_tableElement","getBoundingRect","height","setContentSize","top","getContentOffset","bottom","$tables","getTableElements","$virtualRows","_isFixedTableRendering","deferUpdate","_updateContentPositionCore","contentHeight","$contentTable","virtualTable","_contentTableHeight","offsetHeight","getVirtualContentSize","deferRender","move","left","isRenderVirtualTableContentRequired","_isTableLinesDisplaysCorrect","_isColumnElementsEqual","find","_renderVirtualTableContent","table","hasColumnLines","$columns","$virtualColumns","element","style","width","container","columns","_columnsController","getVisibleColumns","html","_createColGroup","prop","freeSpaceCellsHtml","columnLinesClass","createFreeSpaceRowHtml","classes","_getCellClasses","classString","join","column","cssClass","isExpandColumn","command","push","_findBottomLoadPanel","$contentElement","$element","$bottomLoadPanel","scrollingMode","virtualMode","appendMode","showBottomLoading","bottomLoadPanelElement","_createComponent","appendTo","_handleScroll","_hasHeight","setViewportPosition","scrollOffset","_needUpdateRowHeight","_updateRowHeight","viewportHeight","outerHeight","getWindow","Math","ceil","updateFreeSpaceRowHeight","setLoading","messageText","hasBottomLoadPanel","call","_resizeCore","_windowScroll","closest","document","subscribeToExternalScrollers","scrollPos","on","loadIfNeed","setColumnWidths","widths","scrollable","getScrollable","$content","clearTimeout","_scrollTimeoutID","module","exports","defaultOptions","scrolling","timeout","updateTimeout","minTimeout","renderingThreshold","removeInvisiblePages","rowPageSize","mode","preloadEnabled","extenders","dataSourceAdapter","controllers","members","_refreshDataSource","baseResult","promise","initVirtualRows","getRowPageSize","rowsScrollController","_rowsScrollController","getItemIndexByPosition","rowIndexOffset","getRowIndexOffset","rowIndex","floor","isSortingOperation","sorting","getRowElement","allowedTopOffset","mozilla","msie","round","virtualRowsRendering","_visibleItems","_rowPageIndex","isItemCountable","rowType","isNewRow","isGroupItemCountable","_fireChanged","correctCount","countableOnly","begin","take","positionChanged","_that$_dataSource","setViewportItemIndex","_updateItemsCore","_this3","delta","getRowIndexDelta","visibleItems","isRefresh","cancel","rowIndices","changeTypes","newItem","splice","_applyChange","isNextAfterLast","unshift","allItems","indexOf","offset","sizes","resetCurrentTotalCount","proxyMethod","resizing","resize","_resizeTimeout","diff","_lastTime","setTimeout","views","rowsView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _uiGrid_core = require(\"./ui.grid_core.virtual_scrolling_core\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _translator = require(\"../../animation/translator\");\r\nvar _translator2 = _interopRequireDefault(_translator);\r\nvar _load_indicator = require(\"../load_indicator\");\r\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\r\nvar _browser = require(\"../../core/utils/browser\");\r\nvar _browser2 = _interopRequireDefault(_browser);\r\nvar _position = require(\"../../core/utils/position\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar TABLE_CLASS = \"table\";\r\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\r\nvar TABLE_CONTENT_CLASS = \"table-content\";\r\nvar GROUP_SPACE_CLASS = \"group-space\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar FREESPACE_CLASS = \"dx-freespace-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar SCROLLING_MODE_INFINITE = \"infinite\";\r\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nvar SCROLLING_MODE_STANDARD = \"standard\";\r\nvar PIXELS_LIMIT = 25e4;\r\nvar LOAD_TIMEOUT = 300;\r\nvar isVirtualMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL\r\n};\r\nvar isAppendMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE\r\n};\r\nvar isVirtualRowRendering = function(that) {\r\n    var rowRenderingMode = that.option(\"scrolling.rowRenderingMode\");\r\n    if (rowRenderingMode === SCROLLING_MODE_VIRTUAL) {\r\n        return true\r\n    } else {\r\n        if (rowRenderingMode === SCROLLING_MODE_STANDARD) {\r\n            return false\r\n        }\r\n    }\r\n};\r\nvar _correctCount = function(items, count, fromEnd, isItemCountableFunc) {\r\n    var countCorrection = fromEnd ? 0 : 1;\r\n    for (var i = 0; i < count + countCorrection; i++) {\r\n        var item = items[fromEnd ? items.length - 1 - i : i];\r\n        if (item && !isItemCountableFunc(item, i === count)) {\r\n            count++\r\n        }\r\n    }\r\n    return count\r\n};\r\nvar VirtualScrollingDataSourceAdapterExtender = function() {\r\n    var _updateLoading = function(that) {\r\n        var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\r\n        if (isVirtualMode(that)) {\r\n            if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\r\n                if (!that._isLoading) {\r\n                    that._isLoading = true;\r\n                    that.loadingChanged.fire(true)\r\n                }\r\n            } else {\r\n                if (that._isLoading) {\r\n                    that._isLoading = false;\r\n                    that.loadingChanged.fire(false)\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var result = {\r\n        init: function(dataSource) {\r\n            var that = this;\r\n            that.callBase.apply(that, arguments);\r\n            that._items = [];\r\n            that._isLoaded = true;\r\n            that._virtualScrollController = new _uiGrid_core2.default.VirtualScrollController(that.component, {\r\n                pageSize: function() {\r\n                    return that.pageSize()\r\n                },\r\n                totalItemsCount: function() {\r\n                    return that.totalItemsCount()\r\n                },\r\n                hasKnownLastPage: function() {\r\n                    return that.hasKnownLastPage()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return dataSource.pageIndex(index)\r\n                },\r\n                isLoading: function() {\r\n                    return dataSource.isLoading() && !that.isCustomLoading()\r\n                },\r\n                pageCount: function() {\r\n                    return that.pageCount()\r\n                },\r\n                load: function() {\r\n                    return dataSource.load()\r\n                },\r\n                updateLoading: function() {\r\n                    _updateLoading(that)\r\n                },\r\n                itemsCount: function() {\r\n                    return that.itemsCount(true)\r\n                },\r\n                items: function() {\r\n                    return dataSource.items()\r\n                },\r\n                viewportItems: function(items) {\r\n                    if (items) {\r\n                        that._items = items\r\n                    }\r\n                    return that._items\r\n                },\r\n                onChanged: function(e) {\r\n                    that.changed.fire(e)\r\n                },\r\n                changingDuration: function(e) {\r\n                    if (that.isLoading()) {\r\n                        return LOAD_TIMEOUT\r\n                    }\r\n                    return that._renderTime || 0\r\n                }\r\n            })\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            if (!isVirtualMode(this) || this._isLoadingAll) {\r\n                this._isLoading = isLoading;\r\n                this.callBase.apply(this, arguments)\r\n            }\r\n            if (isLoading) {\r\n                this._startLoadTime = new Date\r\n            } else {\r\n                this._startLoadTime = void 0\r\n            }\r\n        },\r\n        _handleLoadError: function() {\r\n            var that = this;\r\n            that._isLoading = false;\r\n            that.loadingChanged.fire(false);\r\n            that.callBase.apply(that, arguments)\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            var callBase = this.callBase.bind(this);\r\n            this._virtualScrollController.handleDataChanged(callBase, e)\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var that = this;\r\n            if (!that.option(\"legacyRendering\") && isVirtualMode(that) && !operationTypes.reload && operationTypes.skip && that._renderTime < that.option(\"scrolling.renderingThreshold\")) {\r\n                options.delay = void 0\r\n            }\r\n            that.callBase.apply(that, arguments)\r\n        },\r\n        items: function() {\r\n            return this._items\r\n        },\r\n        itemsCount: function(isBase) {\r\n            if (isBase) {\r\n                return this.callBase()\r\n            }\r\n            return this._virtualScrollController.itemsCount()\r\n        },\r\n        load: function(loadOptions) {\r\n            if (loadOptions) {\r\n                return this.callBase(loadOptions)\r\n            }\r\n            return this._virtualScrollController.load()\r\n        },\r\n        isLoading: function() {\r\n            return this._isLoading\r\n        },\r\n        isLoaded: function() {\r\n            return this._dataSource.isLoaded() && this._isLoaded\r\n        },\r\n        resetPagesCache: function(isLiveUpdate) {\r\n            if (!isLiveUpdate) {\r\n                this._virtualScrollController.reset(true)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _changeRowExpandCore: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            this.resetPagesCache();\r\n            _updateLoading(this);\r\n            return result\r\n        },\r\n        reload: function() {\r\n            this._dataSource.pageIndex(this.pageIndex());\r\n            var virtualScrollController = this._virtualScrollController;\r\n            if (virtualScrollController) {\r\n                var d = new _deferred.Deferred;\r\n                this.callBase.apply(this, arguments).done(function(r) {\r\n                    var delayDeferred = virtualScrollController._delayDeferred;\r\n                    if (delayDeferred) {\r\n                        delayDeferred.done(d.resolve).fail(d.reject)\r\n                    } else {\r\n                        d.resolve(r)\r\n                    }\r\n                }).fail(d.reject);\r\n                return d\r\n            } else {\r\n                return this.callBase.apply(this, arguments)\r\n            }\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            var that = this;\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var dataSource = that._dataSource;\r\n            if (operationTypes.reload) {\r\n                that._virtualScrollController.reset();\r\n                dataSource.items().length = 0;\r\n                that._isLoaded = false;\r\n                _updateLoading(that);\r\n                that._isLoaded = true;\r\n                if (isAppendMode(that)) {\r\n                    that.pageIndex(0);\r\n                    dataSource.pageIndex(0);\r\n                    storeLoadOptions.pageIndex = 0;\r\n                    options.pageIndex = 0;\r\n                    storeLoadOptions.skip = 0\r\n                } else {\r\n                    dataSource.pageIndex(that.pageIndex());\r\n                    if (dataSource.paginate()) {\r\n                        options.pageIndex = that.pageIndex();\r\n                        storeLoadOptions.skip = that.pageIndex() * that.pageSize()\r\n                    }\r\n                }\r\n            } else {\r\n                if (isAppendMode(that) && storeLoadOptions.skip && that._skipCorrection < 0) {\r\n                    storeLoadOptions.skip += that._skipCorrection\r\n                }\r\n            }\r\n            return that.callBase.apply(that, arguments)\r\n        },\r\n        dispose: function() {\r\n            this._virtualScrollController.dispose();\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    };\r\n    [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentSize\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"pageIndex\", \"beginPageIndex\", \"endPageIndex\", \"loadIfNeed\"].forEach(function(name) {\r\n        result[name] = function() {\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    });\r\n    return result\r\n}();\r\nvar VirtualScrollingRowsViewExtender = function() {\r\n    var removeEmptyRows = function($emptyRows, className) {\r\n        var getRowParent = function(row) {\r\n            return (0, _renderer2.default)(row).parent(\".\" + className).get(0)\r\n        };\r\n        var tBodies = $emptyRows.toArray().map(getRowParent).filter(function(row) {\r\n            return row\r\n        });\r\n        if (tBodies.length) {\r\n            $emptyRows = (0, _renderer2.default)(tBodies)\r\n        }\r\n        var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\r\n        for (var i = 0; i < rowCount; i++) {\r\n            $emptyRows.eq(i).remove()\r\n        }\r\n    };\r\n    return {\r\n        init: function() {\r\n            var _dataController$state, _this = this;\r\n            var dataController = this.getController(\"data\");\r\n            this.callBase();\r\n            dataController.pageChanged.add(function() {\r\n                _this.scrollToPage(dataController.pageIndex())\r\n            });\r\n            null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(function() {\r\n                _this._scrollToCurrentPageOnResize()\r\n            });\r\n            this._scrollToCurrentPageOnResize()\r\n        },\r\n        _scrollToCurrentPageOnResize: function() {\r\n            var _this2 = this;\r\n            var dataController = this.getController(\"data\");\r\n            if (!this.option(\"legacyRendering\") && dataController.pageIndex() > 0) {\r\n                var resizeHandler = function resizeHandler() {\r\n                    _this2.resizeCompleted.remove(resizeHandler);\r\n                    _this2.scrollToPage(dataController.pageIndex())\r\n                };\r\n                this.resizeCompleted.add(resizeHandler)\r\n            }\r\n        },\r\n        scrollToPage: function(pageIndex) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var pageSize = dataController ? dataController.pageSize() : 0;\r\n            var scrollPosition;\r\n            if (isVirtualMode(that) || isAppendMode(that)) {\r\n                var itemSize = dataController.getItemSize();\r\n                var itemSizes = dataController.getItemSizes();\r\n                var itemIndex = pageIndex * pageSize;\r\n                scrollPosition = itemIndex * itemSize;\r\n                for (var index in itemSizes) {\r\n                    if (index <= itemIndex) {\r\n                        scrollPosition += itemSizes[index] - itemSize\r\n                    }\r\n                }\r\n            } else {\r\n                scrollPosition = 0\r\n            }\r\n            that.scrollTo({\r\n                y: scrollPosition,\r\n                x: that._scrollLeft\r\n            })\r\n        },\r\n        renderDelayedTemplates: function(e) {\r\n            this._updateContentPosition(true);\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _renderCore: function(e) {\r\n            var that = this;\r\n            var startRenderTime = new Date;\r\n            that.callBase.apply(that, arguments);\r\n            var dataSource = that._dataController._dataSource;\r\n            if (dataSource && e) {\r\n                var itemCount = e.items ? e.items.length : 20;\r\n                var viewportSize = that._dataController.viewportSize() || 20;\r\n                if (isVirtualRowRendering(that)) {\r\n                    dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount\r\n                } else {\r\n                    dataSource._renderTime = new Date - startRenderTime\r\n                }\r\n            }\r\n        },\r\n        _getRowElements: function(tableElement) {\r\n            var $rows = this.callBase(tableElement);\r\n            return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS)\r\n        },\r\n        _renderContent: function(contentElement, tableElement) {\r\n            var that = this;\r\n            var virtualItemsCount = that._dataController.virtualItemsCount();\r\n            if (virtualItemsCount && that.option(\"legacyRendering\")) {\r\n                if ((0, _window.hasWindow)()) {\r\n                    tableElement.addClass(that.addWidgetPrefix(TABLE_CONTENT_CLASS))\r\n                }\r\n                if (!contentElement.children().length) {\r\n                    contentElement.append(tableElement)\r\n                } else {\r\n                    contentElement.children().first().replaceWith(tableElement)\r\n                }\r\n                if (1 === contentElement.children(\"table\").length) {\r\n                    contentElement.append(that._createTable());\r\n                    that._contentHeight = 0\r\n                }\r\n                return contentElement\r\n            }\r\n            return that.callBase.apply(that, arguments)\r\n        },\r\n        _removeRowsElements: function(contentTable, removeCount, changeType) {\r\n            var rowElements = this._getRowElements(contentTable).toArray();\r\n            if (\"append\" === changeType) {\r\n                rowElements = rowElements.slice(0, removeCount)\r\n            } else {\r\n                rowElements = rowElements.slice(-removeCount)\r\n            }\r\n            var errorHandlingController = this.getController(\"errorHandling\");\r\n            rowElements.map(function(rowElement) {\r\n                var $rowElement = (0, _renderer2.default)(rowElement);\r\n                errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\r\n                $rowElement.remove()\r\n            })\r\n        },\r\n        _restoreErrorRow: function(contentTable) {\r\n            var editingController = this.getController(\"editing\");\r\n            editingController && editingController.hasChanges() && this._getRowElements(contentTable).each(function(_, item) {\r\n                var rowOptions = (0, _renderer2.default)(item).data(\"options\");\r\n                if (rowOptions) {\r\n                    var editData = editingController.getEditDataByKey(rowOptions.key);\r\n                    editData && editingController._showErrorRow(editData)\r\n                }\r\n            })\r\n        },\r\n        _updateContent: function(tableElement, change) {\r\n            var that = this;\r\n            var $freeSpaceRowElements;\r\n            var contentElement = that._findContentElement();\r\n            var changeType = change && change.changeType;\r\n            if (\"append\" === changeType || \"prepend\" === changeType) {\r\n                var contentTable = contentElement.children().first();\r\n                var $tBodies = that._getBodies(tableElement);\r\n                if (!that.option(\"legacyRendering\") && 1 === $tBodies.length) {\r\n                    that._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children())\r\n                } else {\r\n                    $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable)\r\n                }\r\n                tableElement.remove();\r\n                $freeSpaceRowElements = that._getFreeSpaceRowElements(contentTable);\r\n                removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\r\n                if (change.removeCount) {\r\n                    that._removeRowsElements(contentTable, change.removeCount, changeType)\r\n                }\r\n                that._restoreErrorRow(contentTable)\r\n            } else {\r\n                that.callBase.apply(that, arguments)\r\n            }\r\n            that._updateBottomLoading()\r\n        },\r\n        _addVirtualRow: function($table, isFixed, location, position) {\r\n            if (!position) {\r\n                return\r\n            }\r\n            var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\r\n            $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\r\n            this._appendEmptyRow($table, $virtualRow, location)\r\n        },\r\n        _updateContentPosition: function(isRender) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var rowHeight = that._rowHeight || 20;\r\n            dataController.viewportItemSize(rowHeight);\r\n            if (!that.option(\"legacyRendering\") && (isVirtualMode(that) || isVirtualRowRendering(that))) {\r\n                if (!isRender) {\r\n                    var rowHeights = that._getRowElements(that._tableElement).toArray().map(function(row) {\r\n                        return (0, _position.getBoundingRect)(row).height\r\n                    });\r\n                    dataController.setContentSize(rowHeights)\r\n                }\r\n                var top = dataController.getContentOffset(\"begin\");\r\n                var bottom = dataController.getContentOffset(\"end\");\r\n                var $tables = that.getTableElements();\r\n                var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\r\n                removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\r\n                $tables.each(function(index) {\r\n                    var isFixed = index > 0;\r\n                    that._isFixedTableRendering = isFixed;\r\n                    that._addVirtualRow((0, _renderer2.default)(this), isFixed, \"top\", top);\r\n                    that._addVirtualRow((0, _renderer2.default)(this), isFixed, \"bottom\", bottom);\r\n                    that._isFixedTableRendering = false\r\n                })\r\n            } else {\r\n                (0, _common.deferUpdate)(function() {\r\n                    that._updateContentPositionCore()\r\n                })\r\n            }\r\n        },\r\n        _updateContentPositionCore: function() {\r\n            var that = this;\r\n            var contentHeight;\r\n            var $tables;\r\n            var $contentTable;\r\n            var rowHeight = that._rowHeight || 20;\r\n            var virtualItemsCount = that._dataController.virtualItemsCount();\r\n            if (virtualItemsCount) {\r\n                var contentElement = that._findContentElement();\r\n                $tables = contentElement.children();\r\n                $contentTable = $tables.eq(0);\r\n                var virtualTable = $tables.eq(1);\r\n                that._contentTableHeight = $contentTable[0].offsetHeight;\r\n                that._dataController.viewportItemSize(rowHeight);\r\n                that._dataController.setContentSize(that._contentTableHeight);\r\n                contentHeight = that._dataController.getVirtualContentSize();\r\n                var top = that._dataController.getContentOffset();\r\n                (0, _common.deferRender)(function() {\r\n                    _translator2.default.move($contentTable, {\r\n                        left: 0,\r\n                        top: top\r\n                    });\r\n                    var isRenderVirtualTableContentRequired = that._contentHeight !== contentHeight || 0 === contentHeight || !that._isTableLinesDisplaysCorrect(virtualTable) || !that._isColumnElementsEqual($contentTable.find(\"col\"), virtualTable.find(\"col\"));\r\n                    if (isRenderVirtualTableContentRequired) {\r\n                        that._contentHeight = contentHeight;\r\n                        that._renderVirtualTableContent(virtualTable, contentHeight)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _isTableLinesDisplaysCorrect: function(table) {\r\n            var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\r\n            return hasColumnLines === this.option(\"showColumnLines\")\r\n        },\r\n        _isColumnElementsEqual: function($columns, $virtualColumns) {\r\n            var result = $columns.length === $virtualColumns.length;\r\n            if (result) {\r\n                (0, _iterator.each)($columns, function(index, element) {\r\n                    if (element.style.width !== $virtualColumns[index].style.width) {\r\n                        result = false;\r\n                        return result\r\n                    }\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _renderVirtualTableContent: function(container, height) {\r\n            var that = this;\r\n            var columns = that._columnsController.getVisibleColumns();\r\n            var html = that._createColGroup(columns).prop(\"outerHTML\");\r\n            var freeSpaceCellsHtml = \"\";\r\n            var columnLinesClass = that.option(\"showColumnLines\") ? COLUMN_LINES_CLASS : \"\";\r\n            var createFreeSpaceRowHtml = function(height) {\r\n                return \"<tr style='height:\" + height + \"px;' class='\" + FREESPACE_CLASS + \" \" + ROW_CLASS + \" \" + columnLinesClass + \"' >\" + freeSpaceCellsHtml + \"</tr>\"\r\n            };\r\n            for (var i = 0; i < columns.length; i++) {\r\n                var classes = that._getCellClasses(columns[i]);\r\n                var classString = classes.length ? \" class='\" + classes.join(\" \") + \"'\" : \"\";\r\n                freeSpaceCellsHtml += \"<td\" + classString + \"/>\"\r\n            }\r\n            while (height > PIXELS_LIMIT) {\r\n                html += createFreeSpaceRowHtml(PIXELS_LIMIT);\r\n                height -= PIXELS_LIMIT\r\n            }\r\n            html += createFreeSpaceRowHtml(height);\r\n            container.addClass(that.addWidgetPrefix(TABLE_CLASS));\r\n            container.html(html)\r\n        },\r\n        _getCellClasses: function(column) {\r\n            var classes = [];\r\n            var cssClass = column.cssClass;\r\n            var isExpandColumn = \"expand\" === column.command;\r\n            cssClass && classes.push(cssClass);\r\n            isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\r\n            return classes\r\n        },\r\n        _findBottomLoadPanel: function($contentElement) {\r\n            var $element = $contentElement || this.element();\r\n            var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\r\n            if ($bottomLoadPanel && $bottomLoadPanel.length) {\r\n                return $bottomLoadPanel\r\n            }\r\n        },\r\n        _updateBottomLoading: function() {\r\n            var that = this;\r\n            var scrollingMode = that.option(\"scrolling.mode\");\r\n            var virtualMode = scrollingMode === SCROLLING_MODE_VIRTUAL;\r\n            var appendMode = scrollingMode === SCROLLING_MODE_INFINITE;\r\n            var showBottomLoading = !that._dataController.hasKnownLastPage() && that._dataController.isLoaded() && (virtualMode || appendMode);\r\n            var $contentElement = that._findContentElement();\r\n            var bottomLoadPanelElement = that._findBottomLoadPanel($contentElement);\r\n            if (showBottomLoading) {\r\n                if (!bottomLoadPanelElement) {\r\n                    (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(that._createComponent((0, _renderer2.default)(\"<div>\"), _load_indicator2.default).$element()).appendTo($contentElement)\r\n                }\r\n            } else {\r\n                if (bottomLoadPanelElement) {\r\n                    bottomLoadPanelElement.remove()\r\n                }\r\n            }\r\n        },\r\n        _handleScroll: function(e) {\r\n            var that = this;\r\n            if (that._hasHeight && that._rowHeight) {\r\n                that._dataController.setViewportPosition(e.scrollOffset.top)\r\n            }\r\n            that.callBase.apply(that, arguments)\r\n        },\r\n        _needUpdateRowHeight: function(itemsCount) {\r\n            var that = this;\r\n            return that.callBase.apply(that, arguments) || itemsCount > 0 && that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && that.option(\"scrolling.rowRenderingMode\") !== SCROLLING_MODE_VIRTUAL\r\n        },\r\n        _updateRowHeight: function() {\r\n            var that = this;\r\n            that.callBase.apply(that, arguments);\r\n            if (that._rowHeight) {\r\n                that._updateContentPosition();\r\n                var viewportHeight = that._hasHeight ? that.element().outerHeight() : (0, _renderer2.default)((0, _window.getWindow)()).outerHeight();\r\n                that._dataController.viewportSize(Math.ceil(viewportHeight / that._rowHeight))\r\n            }\r\n        },\r\n        updateFreeSpaceRowHeight: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (result) {\r\n                this._updateContentPosition()\r\n            }\r\n            return result\r\n        },\r\n        setLoading: function(isLoading, messageText) {\r\n            var that = this;\r\n            var callBase = that.callBase;\r\n            var dataController = that._dataController;\r\n            var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!that._findBottomLoadPanel();\r\n            if (hasBottomLoadPanel) {\r\n                isLoading = false\r\n            }\r\n            callBase.call(that, isLoading, messageText)\r\n        },\r\n        _resizeCore: function() {\r\n            var that = this;\r\n            var $element = that.element();\r\n            that.callBase();\r\n            if (that.component.$element() && !that._windowScroll && $element.closest((0, _window.getWindow)().document).length) {\r\n                that._windowScroll = _uiGrid_core2.default.subscribeToExternalScrollers($element, function(scrollPos) {\r\n                    if (!that._hasHeight && that._rowHeight) {\r\n                        that._dataController.setViewportPosition(scrollPos)\r\n                    }\r\n                }, that.component.$element());\r\n                that.on(\"disposing\", function() {\r\n                    that._windowScroll.dispose()\r\n                })\r\n            }\r\n            that.loadIfNeed()\r\n        },\r\n        loadIfNeed: function() {\r\n            var dataController = this._dataController;\r\n            if (dataController && dataController.loadIfNeed) {\r\n                dataController.loadIfNeed()\r\n            }\r\n        },\r\n        setColumnWidths: function(widths) {\r\n            var scrollable = this.getScrollable();\r\n            var $content;\r\n            this.callBase.apply(this, arguments);\r\n            if (\"virtual\" === this.option(\"scrolling.mode\")) {\r\n                $content = scrollable ? scrollable.$content() : this.element();\r\n                this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"))\r\n            }\r\n        },\r\n        dispose: function() {\r\n            clearTimeout(this._scrollTimeoutID);\r\n            this.callBase()\r\n        }\r\n    }\r\n}();\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            scrolling: {\r\n                timeout: 300,\r\n                updateTimeout: 300,\r\n                minTimeout: 0,\r\n                renderingThreshold: 100,\r\n                removeInvisiblePages: true,\r\n                rowPageSize: 5,\r\n                mode: \"standard\",\r\n                preloadEnabled: false,\r\n                rowRenderingMode: \"standard\"\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\r\n        controllers: {\r\n            data: function() {\r\n                var members = {\r\n                    _refreshDataSource: function() {\r\n                        var baseResult = this.callBase.apply(this, arguments) || (new _deferred.Deferred).resolve().promise();\r\n                        baseResult.done(this.initVirtualRows.bind(this));\r\n                        return baseResult\r\n                    },\r\n                    getRowPageSize: function() {\r\n                        var rowPageSize = this.option(\"scrolling.rowPageSize\");\r\n                        var pageSize = this.pageSize();\r\n                        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize\r\n                    },\r\n                    reload: function() {\r\n                        var that = this;\r\n                        var rowsScrollController = that._rowsScrollController || that._dataSource;\r\n                        var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        return result && result.done(function() {\r\n                            if (isVirtualMode(that) || isVirtualRowRendering(that)) {\r\n                                var rowIndexOffset = that.getRowIndexOffset();\r\n                                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\r\n                                var component = that.component;\r\n                                var scrollable = component.getScrollable && component.getScrollable();\r\n                                var isSortingOperation = that.dataSource().operationTypes().sorting;\r\n                                if (scrollable && !that.option(\"legacyRendering\") && !isSortingOperation) {\r\n                                    var rowElement = component.getRowElement(rowIndex);\r\n                                    var $rowElement = rowElement && rowElement[0] && (0, _renderer2.default)(rowElement[0]);\r\n                                    var top = $rowElement && $rowElement.position().top;\r\n                                    var allowedTopOffset = _browser2.default.mozilla || _browser2.default.msie ? 1 : 0;\r\n                                    if (top > allowedTopOffset) {\r\n                                        top = Math.round(top + $rowElement.outerHeight() * (itemIndex % 1));\r\n                                        scrollable.scrollTo({\r\n                                            y: top\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    },\r\n                    initVirtualRows: function() {\r\n                        var that = this;\r\n                        var virtualRowsRendering = isVirtualRowRendering(that);\r\n                        if (\"virtual\" !== that.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || that.option(\"legacyRendering\") || !that.option(\"scrolling.rowPageSize\")) {\r\n                            that._visibleItems = null;\r\n                            that._rowsScrollController = null;\r\n                            return\r\n                        }\r\n                        that._rowPageIndex = Math.ceil(that.pageIndex() * that.pageSize() / that.getRowPageSize());\r\n                        that._visibleItems = [];\r\n                        var isItemCountable = function(item) {\r\n                            return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && that._dataSource.isGroupItemCountable(item.data)\r\n                        };\r\n                        that._rowsScrollController = new _uiGrid_core2.default.VirtualScrollController(that.component, {\r\n                            pageSize: function() {\r\n                                return that.getRowPageSize()\r\n                            },\r\n                            totalItemsCount: function() {\r\n                                return isVirtualMode(that) ? that.totalItemsCount() : that._items.filter(isItemCountable).length\r\n                            },\r\n                            hasKnownLastPage: function() {\r\n                                return true\r\n                            },\r\n                            pageIndex: function(index) {\r\n                                if (void 0 !== index) {\r\n                                    that._rowPageIndex = index\r\n                                }\r\n                                return that._rowPageIndex\r\n                            },\r\n                            isLoading: function() {\r\n                                return that.isLoading()\r\n                            },\r\n                            pageCount: function pageCount() {\r\n                                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\r\n                                return pageCount ? pageCount : 1\r\n                            },\r\n                            load: function() {\r\n                                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                                    that._rowPageIndex = this.pageCount() - 1;\r\n                                    that._rowsScrollController.pageIndex(that._rowPageIndex)\r\n                                }\r\n                                if (!that._rowsScrollController._dataSource.items().length && this.totalItemsCount()) {\r\n                                    return\r\n                                }\r\n                                that._rowsScrollController.handleDataChanged(function(change) {\r\n                                    change = change || {};\r\n                                    change.changeType = change.changeType || \"refresh\";\r\n                                    change.items = change.items || that._visibleItems;\r\n                                    that._visibleItems.forEach(function(item, index) {\r\n                                        item.rowIndex = index\r\n                                    });\r\n                                    that._fireChanged(change)\r\n                                })\r\n                            },\r\n                            updateLoading: function() {},\r\n                            itemsCount: function() {\r\n                                return that._rowsScrollController._dataSource.items().filter(isItemCountable).length\r\n                            },\r\n                            correctCount: function(items, count, fromEnd) {\r\n                                return _correctCount(items, count, fromEnd, isItemCountable)\r\n                            },\r\n                            items: function(countableOnly) {\r\n                                var dataSource = that.dataSource();\r\n                                var virtualItemsCount = dataSource && dataSource.virtualItemsCount();\r\n                                var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\r\n                                var rowPageSize = that.getRowPageSize();\r\n                                var skip = that._rowPageIndex * rowPageSize - begin;\r\n                                var take = rowPageSize;\r\n                                var result = that._items;\r\n                                if (skip < 0) {\r\n                                    return []\r\n                                }\r\n                                if (skip) {\r\n                                    skip = this.correctCount(result, skip);\r\n                                    result = result.slice(skip)\r\n                                }\r\n                                if (take) {\r\n                                    take = this.correctCount(result, take);\r\n                                    result = result.slice(0, take)\r\n                                }\r\n                                return countableOnly ? result.filter(isItemCountable) : result\r\n                            },\r\n                            viewportItems: function(items) {\r\n                                if (items) {\r\n                                    that._visibleItems = items\r\n                                }\r\n                                return that._visibleItems\r\n                            },\r\n                            onChanged: function() {},\r\n                            changingDuration: function(e) {\r\n                                var dataSource = that.dataSource();\r\n                                if (dataSource.isLoading()) {\r\n                                    return LOAD_TIMEOUT\r\n                                }\r\n                                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0\r\n                            }\r\n                        }, true);\r\n                        that._rowsScrollController.positionChanged.add(function() {\r\n                            var _that$_dataSource;\r\n                            null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.setViewportItemIndex(that._rowsScrollController.getViewportItemIndex())\r\n                        });\r\n                        if (that.isLoaded()) {\r\n                            that._rowsScrollController.load()\r\n                        }\r\n                    },\r\n                    _updateItemsCore: function(change) {\r\n                        var _this3 = this;\r\n                        var delta = this.getRowIndexDelta();\r\n                        this.callBase.apply(this, arguments);\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            var visibleItems = this._visibleItems;\r\n                            var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\r\n                            if (\"append\" === change.changeType && change.items && !change.items.length) {\r\n                                return\r\n                            }\r\n                            if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\r\n                                change.cancel = true;\r\n                                isRefresh && rowsScrollController.reset(true);\r\n                                rowsScrollController.load()\r\n                            } else {\r\n                                if (\"update\" === change.changeType) {\r\n                                    change.rowIndices.forEach(function(rowIndex, index) {\r\n                                        var changeType = change.changeTypes[index];\r\n                                        var newItem = change.items[index];\r\n                                        if (\"update\" === changeType) {\r\n                                            visibleItems[rowIndex] = newItem\r\n                                        } else {\r\n                                            if (\"insert\" === changeType) {\r\n                                                visibleItems.splice(rowIndex, 0, newItem)\r\n                                            } else {\r\n                                                if (\"remove\" === changeType) {\r\n                                                    visibleItems.splice(rowIndex, 1)\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                } else {\r\n                                    visibleItems.forEach(function(item, index) {\r\n                                        visibleItems[index] = _this3._items[index + delta] || visibleItems[index]\r\n                                    });\r\n                                    change.items = visibleItems\r\n                                }\r\n                                visibleItems.forEach(function(item, index) {\r\n                                    item.rowIndex = index\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    _applyChange: function(change) {\r\n                        var that = this;\r\n                        var items = change.items;\r\n                        var changeType = change.changeType;\r\n                        var removeCount = change.removeCount;\r\n                        if (removeCount) {\r\n                            var fromEnd = \"prepend\" === changeType;\r\n                            removeCount = _correctCount(that._items, removeCount, fromEnd, function(item, isNextAfterLast) {\r\n                                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)\r\n                            });\r\n                            change.removeCount = removeCount\r\n                        }\r\n                        switch (changeType) {\r\n                            case \"prepend\":\r\n                                that._items.unshift.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(-removeCount)\r\n                                }\r\n                                break;\r\n                            case \"append\":\r\n                                that._items.push.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(0, removeCount)\r\n                                }\r\n                                break;\r\n                            default:\r\n                                that.callBase(change)\r\n                        }\r\n                    },\r\n                    items: function(allItems) {\r\n                        return allItems ? this._items : this._visibleItems || this._items\r\n                    },\r\n                    getRowIndexDelta: function() {\r\n                        var visibleItems = this._visibleItems;\r\n                        var delta = 0;\r\n                        if (visibleItems && visibleItems[0]) {\r\n                            delta = this._items.indexOf(visibleItems[0])\r\n                        }\r\n                        return delta < 0 ? 0 : delta\r\n                    },\r\n                    getRowIndexOffset: function() {\r\n                        var offset = 0;\r\n                        var dataSource = this.dataSource();\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            offset = rowsScrollController.beginPageIndex() * rowsScrollController._dataSource.pageSize()\r\n                        } else {\r\n                            if (\"virtual\" === this.option(\"scrolling.mode\") && dataSource) {\r\n                                offset = dataSource.beginPageIndex() * dataSource.pageSize()\r\n                            }\r\n                        }\r\n                        return offset\r\n                    },\r\n                    viewportSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.viewportSize.apply(dataSource, arguments)\r\n                    },\r\n                    viewportItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.viewportItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    setViewportPosition: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        if (rowsScrollController) {\r\n                            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments)\r\n                        }\r\n                    },\r\n                    setContentSize: function(sizes) {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.setContentSize(sizes);\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.setContentSize(sizes)\r\n                    },\r\n                    loadIfNeed: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.loadIfNeed();\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.loadIfNeed()\r\n                    },\r\n                    getItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    getItemSizes: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)\r\n                    },\r\n                    getContentOffset: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)\r\n                    },\r\n                    refresh: function(options) {\r\n                        var dataSource = this._dataSource;\r\n                        if (dataSource && options && options.load && isAppendMode(this)) {\r\n                            dataSource.resetCurrentTotalCount()\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    dispose: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.dispose();\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                };\r\n                _uiGrid_core4.default.proxyMethod(members, \"virtualItemsCount\");\r\n                _uiGrid_core4.default.proxyMethod(members, \"getVirtualContentSize\");\r\n                _uiGrid_core4.default.proxyMethod(members, \"setViewportItemIndex\");\r\n                return members\r\n            }(),\r\n            resizing: {\r\n                resize: function() {\r\n                    var that = this;\r\n                    var callBase = that.callBase;\r\n                    var result;\r\n                    if (!that.option(\"legacyRendering\") && (isVirtualMode(that) || isVirtualRowRendering(that))) {\r\n                        clearTimeout(that._resizeTimeout);\r\n                        var diff = new Date - that._lastTime;\r\n                        var updateTimeout = that.option(\"scrolling.updateTimeout\");\r\n                        if (that._lastTime && diff < updateTimeout) {\r\n                            result = new _deferred.Deferred;\r\n                            that._resizeTimeout = setTimeout(function() {\r\n                                callBase.apply(that).done(result.resolve).fail(result.reject);\r\n                                that._lastTime = new Date\r\n                            }, updateTimeout);\r\n                            that._lastTime = new Date\r\n                        } else {\r\n                            result = callBase.apply(that);\r\n                            if (that._dataController.isLoaded()) {\r\n                                that._lastTime = new Date\r\n                            }\r\n                        }\r\n                    } else {\r\n                        result = callBase.apply(that)\r\n                    }\r\n                    return result\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._resizeTimeout)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: VirtualScrollingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}