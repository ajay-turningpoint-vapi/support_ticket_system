{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.search.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _dom_adapter = require(\"../../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _query = require(\"../../data/query\");\n\nvar _query2 = _interopRequireDefault(_query);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar SEARCH_PANEL_CLASS = \"search-panel\";\nvar SEARCH_TEXT_CLASS = \"search-text\";\nvar HEADER_PANEL_CLASS = \"header-panel\";\nvar FILTERING_TIMEOUT = 700;\n\nfunction allowSearch(column) {\n  return (0, _type.isDefined)(column.allowSearch) ? column.allowSearch : column.allowFiltering;\n}\n\nfunction parseValue(column, text) {\n  var lookup = column.lookup;\n\n  if (!column.parseValue) {\n    return text;\n  }\n\n  if (lookup) {\n    return column.parseValue.call(lookup, text);\n  }\n\n  return column.parseValue(text);\n}\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      searchPanel: {\n        visible: false,\n        width: 160,\n        placeholder: _message2.default.format(\"dxDataGrid-searchPanelPlaceholder\"),\n        highlightSearchText: true,\n        highlightCaseSensitive: false,\n        text: \"\",\n        searchVisibleColumnsOnly: false\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: function () {\n        var calculateSearchFilter = function (that, text) {\n          var i;\n          var column;\n\n          var columns = that._columnsController.getColumns();\n\n          var searchVisibleColumnsOnly = that.option(\"searchPanel.searchVisibleColumnsOnly\");\n          var lookup;\n          var filters = [];\n\n          if (!text) {\n            return null;\n          }\n\n          function onQueryDone(items) {\n            var valueGetter = (0, _data.compileGetter)(lookup.valueExpr);\n\n            for (var _i = 0; _i < items.length; _i++) {\n              var value = valueGetter(items[_i]);\n              filters.push(column.createFilterExpression(value, null, \"search\"));\n            }\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            column = columns[i];\n\n            if (searchVisibleColumnsOnly && !column.visible) {\n              continue;\n            }\n\n            if (allowSearch(column) && column.calculateFilterExpression) {\n              lookup = column.lookup;\n              var filterValue = parseValue(column, text);\n\n              if (lookup && lookup.items) {\n                (0, _query2.default)(lookup.items).filter(column.createFilterExpression.call({\n                  dataField: lookup.displayExpr,\n                  dataType: lookup.dataType,\n                  calculateFilterExpression: column.calculateFilterExpression\n                }, filterValue, null, \"search\")).enumerate().done(onQueryDone);\n              } else {\n                if (void 0 !== filterValue) {\n                  filters.push(column.createFilterExpression(filterValue, null, \"search\"));\n                }\n              }\n            }\n          }\n\n          return (0, _uiGrid_core.combineFilters)(filters, \"or\");\n        };\n\n        return {\n          publicMethods: function () {\n            return this.callBase().concat([\"searchByText\"]);\n          },\n          _calculateAdditionalFilter: function () {\n            var that = this;\n            var filter = that.callBase();\n            var searchFilter = calculateSearchFilter(that, that.option(\"searchPanel.text\"));\n            return (0, _uiGrid_core.combineFilters)([filter, searchFilter]);\n          },\n          searchByText: function (text) {\n            this.option(\"searchPanel.text\", text);\n          },\n          optionChanged: function (args) {\n            var that = this;\n\n            switch (args.fullName) {\n              case \"searchPanel.text\":\n              case \"searchPanel\":\n                that._applyFilter();\n\n                args.handled = true;\n                break;\n\n              default:\n                that.callBase(args);\n            }\n          }\n        };\n      }()\n    },\n    views: {\n      headerPanel: function () {\n        var getSearchPanelOptions = function (that) {\n          return that.option(\"searchPanel\");\n        };\n\n        return {\n          _getToolbarItems: function () {\n            var items = this.callBase();\n            return this._prepareSearchItem(items);\n          },\n          _prepareSearchItem: function (items) {\n            var that = this;\n            var dataController = that.getController(\"data\");\n            var searchPanelOptions = getSearchPanelOptions(that);\n\n            if (searchPanelOptions && searchPanelOptions.visible) {\n              var toolbarItem = {\n                template: function (data, index, container) {\n                  var $search = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(SEARCH_PANEL_CLASS)).appendTo(container);\n                  that.getController(\"editorFactory\").createEditor($search, {\n                    width: searchPanelOptions.width,\n                    placeholder: searchPanelOptions.placeholder,\n                    parentType: \"searchPanel\",\n                    value: that.option(\"searchPanel.text\"),\n                    updateValueTimeout: FILTERING_TIMEOUT,\n                    setValue: function (value) {\n                      dataController.searchByText(value);\n                    },\n                    editorOptions: {\n                      inputAttr: {\n                        \"aria-label\": _message2.default.format(\"dxDataGrid-ariaSearchInGrid\")\n                      }\n                    }\n                  });\n                  that.resize();\n                },\n                name: \"searchPanel\",\n                location: \"after\",\n                locateInMenu: \"never\",\n                sortIndex: 40\n              };\n              items.push(toolbarItem);\n            }\n\n            return items;\n          },\n          getSearchTextEditor: function () {\n            var that = this;\n            var $element = that.element();\n            var $searchPanel = $element.find(\".\" + that.addWidgetPrefix(SEARCH_PANEL_CLASS)).filter(function () {\n              return (0, _renderer2.default)(this).closest(\".\" + that.addWidgetPrefix(HEADER_PANEL_CLASS)).is($element);\n            });\n\n            if ($searchPanel.length) {\n              return $searchPanel.dxTextBox(\"instance\");\n            }\n\n            return null;\n          },\n          isVisible: function () {\n            var searchPanelOptions = getSearchPanelOptions(this);\n            return this.callBase() || searchPanelOptions && searchPanelOptions.visible;\n          },\n          optionChanged: function (args) {\n            if (\"searchPanel\" === args.name) {\n              if (\"searchPanel.text\" === args.fullName) {\n                var editor = this.getSearchTextEditor();\n\n                if (editor) {\n                  editor.option(\"value\", args.value);\n                }\n              } else {\n                this._invalidate();\n              }\n\n              args.handled = true;\n            } else {\n              this.callBase(args);\n            }\n          }\n        };\n      }(),\n      rowsView: {\n        init: function () {\n          this.callBase.apply(this, arguments);\n          this._searchParams = [];\n        },\n        _getFormattedSearchText: function (column, searchText) {\n          var value = parseValue(column, searchText);\n          var formatOptions = (0, _uiGrid_core.getFormatOptionsByColumn)(column, \"search\");\n          return (0, _uiGrid_core.formatValue)(value, formatOptions);\n        },\n        _getStringNormalizer: function () {\n          var isCaseSensitive = this.option(\"searchPanel.highlightCaseSensitive\");\n          return function (str) {\n            return isCaseSensitive ? str : str.toLowerCase();\n          };\n        },\n        _findHighlightingTextNodes: function (column, cellElement, searchText) {\n          var that = this;\n          var $parent = cellElement.parent();\n          var $items;\n\n          var stringNormalizer = this._getStringNormalizer();\n\n          var normalizedSearchText = stringNormalizer(searchText);\n\n          if (!$parent.length) {\n            $parent = (0, _renderer2.default)(\"<div>\").append(cellElement);\n          } else {\n            if (column) {\n              if (column.groupIndex >= 0 && !column.showWhenGrouped) {\n                $items = cellElement;\n              } else {\n                var columnIndex = that._columnsController.getVisibleIndex(column.index);\n\n                $items = $parent.children(\"td\").eq(columnIndex).find(\"*\");\n              }\n            }\n          }\n\n          $items = $items && $items.length ? $items : $parent.find(\"*\");\n          $items = $items.filter(function (_, element) {\n            var $contents = (0, _renderer2.default)(element).contents();\n\n            for (var i = 0; i < $contents.length; i++) {\n              var node = $contents.get(i);\n\n              if (3 === node.nodeType) {\n                return stringNormalizer(node.textContent || node.nodeValue).indexOf(normalizedSearchText) > -1;\n              }\n\n              return false;\n            }\n          });\n          return $items;\n        },\n        _highlightSearchTextCore: function ($textNode, searchText) {\n          var that = this;\n          var $searchTextSpan = (0, _renderer2.default)(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS));\n          var text = $textNode.text();\n          var firstContentElement = $textNode[0];\n\n          var stringNormalizer = this._getStringNormalizer();\n\n          var index = stringNormalizer(text).indexOf(stringNormalizer(searchText));\n\n          if (index >= 0) {\n            if (firstContentElement.textContent) {\n              firstContentElement.textContent = text.substr(0, index);\n            } else {\n              firstContentElement.nodeValue = text.substr(0, index);\n            }\n\n            $textNode.after($searchTextSpan.text(text.substr(index, searchText.length)));\n            $textNode = (0, _renderer2.default)(_dom_adapter2.default.createTextNode(text.substr(index + searchText.length))).insertAfter($searchTextSpan);\n            return that._highlightSearchTextCore($textNode, searchText);\n          }\n        },\n        _highlightSearchText: function (cellElement, isEquals, column) {\n          var that = this;\n\n          var stringNormalizer = this._getStringNormalizer();\n\n          var searchText = that.option(\"searchPanel.text\");\n\n          if (isEquals && column) {\n            searchText = searchText && that._getFormattedSearchText(column, searchText);\n          }\n\n          if (searchText && that.option(\"searchPanel.highlightSearchText\")) {\n            var textNodes = that._findHighlightingTextNodes(column, cellElement, searchText);\n\n            (0, _iterator.each)(textNodes, function (_, element) {\n              (0, _iterator.each)((0, _renderer2.default)(element).contents(), function (_, textNode) {\n                if (isEquals) {\n                  if (stringNormalizer((0, _renderer2.default)(textNode).text()) === stringNormalizer(searchText)) {\n                    (0, _renderer2.default)(this).replaceWith((0, _renderer2.default)(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)).text((0, _renderer2.default)(textNode).text()));\n                  }\n                } else {\n                  that._highlightSearchTextCore((0, _renderer2.default)(textNode), searchText);\n                }\n              });\n            });\n          }\n        },\n        _renderCore: function () {\n          this.callBase.apply(this, arguments);\n\n          if (this.option(\"rowTemplate\")) {\n            if (this.option(\"templatesRenderAsynchronously\")) {\n              clearTimeout(this._highlightTimer);\n              this._highlightTimer = setTimeout(function () {\n                this._highlightSearchText(this._getTableElement());\n              }.bind(this));\n            } else {\n              this._highlightSearchText(this._getTableElement());\n            }\n          }\n        },\n        _updateCell: function ($cell, parameters) {\n          var column = parameters.column;\n          var dataType = column.lookup && column.lookup.dataType || column.dataType;\n          var isEquals = \"string\" !== dataType;\n\n          if (allowSearch(column)) {\n            if (this.option(\"templatesRenderAsynchronously\")) {\n              if (!this._searchParams.length) {\n                clearTimeout(this._highlightTimer);\n                this._highlightTimer = setTimeout(function () {\n                  this._searchParams.forEach(function (params) {\n                    this._highlightSearchText.apply(this, params);\n                  }.bind(this));\n\n                  this._searchParams = [];\n                }.bind(this));\n              }\n\n              this._searchParams.push([$cell, isEquals, column]);\n            } else {\n              this._highlightSearchText($cell, isEquals, column);\n            }\n          }\n\n          this.callBase($cell, parameters);\n        },\n        dispose: function () {\n          clearTimeout(this._highlightTimer);\n          this.callBase();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.search.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_dom_adapter","_dom_adapter2","_type","_data","_iterator","_uiGrid_core","_message","_message2","_query","_query2","obj","__esModule","SEARCH_PANEL_CLASS","SEARCH_TEXT_CLASS","HEADER_PANEL_CLASS","FILTERING_TIMEOUT","allowSearch","column","isDefined","allowFiltering","parseValue","text","lookup","call","module","exports","defaultOptions","searchPanel","visible","width","placeholder","default","format","highlightSearchText","highlightCaseSensitive","searchVisibleColumnsOnly","extenders","controllers","data","calculateSearchFilter","that","i","columns","_columnsController","getColumns","option","filters","onQueryDone","items","valueGetter","compileGetter","valueExpr","_i","length","value","push","createFilterExpression","calculateFilterExpression","filterValue","filter","dataField","displayExpr","dataType","enumerate","done","combineFilters","publicMethods","callBase","concat","_calculateAdditionalFilter","searchFilter","searchByText","optionChanged","args","fullName","_applyFilter","handled","views","headerPanel","getSearchPanelOptions","_getToolbarItems","_prepareSearchItem","dataController","getController","searchPanelOptions","toolbarItem","template","index","container","$search","addClass","addWidgetPrefix","appendTo","createEditor","parentType","updateValueTimeout","setValue","editorOptions","inputAttr","resize","name","location","locateInMenu","sortIndex","getSearchTextEditor","$element","element","$searchPanel","find","closest","is","dxTextBox","isVisible","editor","_invalidate","rowsView","init","apply","arguments","_searchParams","_getFormattedSearchText","searchText","formatOptions","getFormatOptionsByColumn","formatValue","_getStringNormalizer","isCaseSensitive","str","toLowerCase","_findHighlightingTextNodes","cellElement","$parent","parent","$items","stringNormalizer","normalizedSearchText","append","groupIndex","showWhenGrouped","columnIndex","getVisibleIndex","children","eq","_","$contents","contents","node","get","nodeType","textContent","nodeValue","indexOf","_highlightSearchTextCore","$textNode","$searchTextSpan","firstContentElement","substr","after","createTextNode","insertAfter","_highlightSearchText","isEquals","textNodes","each","textNode","replaceWith","_renderCore","clearTimeout","_highlightTimer","setTimeout","_getTableElement","bind","_updateCell","$cell","parameters","forEach","params","dispose"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,SAAD,CAAvC;;AACA,IAAII,YAAY,GAAGH,OAAO,CAAC,wBAAD,CAA1B;;AACA,IAAII,aAAa,GAAGF,sBAAsB,CAACC,YAAD,CAA1C;;AACA,IAAIE,KAAK,GAAGL,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,2BAAD,CAAvB;;AACA,IAAIQ,YAAY,GAAGR,OAAO,CAAC,sBAAD,CAA1B;;AACA,IAAIS,QAAQ,GAAGT,OAAO,CAAC,4BAAD,CAAtB;;AACA,IAAIU,SAAS,GAAGR,sBAAsB,CAACO,QAAD,CAAtC;;AACA,IAAIE,MAAM,GAAGX,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIY,OAAO,GAAGV,sBAAsB,CAACS,MAAD,CAApC;;AAEA,SAAST,sBAAT,CAAgCW,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,kBAAkB,GAAG,cAAzB;AACA,IAAIC,iBAAiB,GAAG,aAAxB;AACA,IAAIC,kBAAkB,GAAG,cAAzB;AACA,IAAIC,iBAAiB,GAAG,GAAxB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AACzB,SAAO,CAAC,GAAGf,KAAK,CAACgB,SAAV,EAAqBD,MAAM,CAACD,WAA5B,IAA2CC,MAAM,CAACD,WAAlD,GAAgEC,MAAM,CAACE,cAA9E;AACH;;AAED,SAASC,UAAT,CAAoBH,MAApB,EAA4BI,IAA5B,EAAkC;AAC9B,MAAIC,MAAM,GAAGL,MAAM,CAACK,MAApB;;AACA,MAAI,CAACL,MAAM,CAACG,UAAZ,EAAwB;AACpB,WAAOC,IAAP;AACH;;AACD,MAAIC,MAAJ,EAAY;AACR,WAAOL,MAAM,CAACG,UAAP,CAAkBG,IAAlB,CAAuBD,MAAvB,EAA+BD,IAA/B,CAAP;AACH;;AACD,SAAOJ,MAAM,CAACG,UAAP,CAAkBC,IAAlB,CAAP;AACH;;AACDG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,cAAc,EAAE,YAAW;AACvB,WAAO;AACHC,MAAAA,WAAW,EAAE;AACTC,QAAAA,OAAO,EAAE,KADA;AAETC,QAAAA,KAAK,EAAE,GAFE;AAGTC,QAAAA,WAAW,EAAEvB,SAAS,CAACwB,OAAV,CAAkBC,MAAlB,CAAyB,mCAAzB,CAHJ;AAITC,QAAAA,mBAAmB,EAAE,IAJZ;AAKTC,QAAAA,sBAAsB,EAAE,KALf;AAMTb,QAAAA,IAAI,EAAE,EANG;AAOTc,QAAAA,wBAAwB,EAAE;AAPjB;AADV,KAAP;AAWH,GAbY;AAcbC,EAAAA,SAAS,EAAE;AACPC,IAAAA,WAAW,EAAE;AACTC,MAAAA,IAAI,EAAE,YAAW;AACb,YAAIC,qBAAqB,GAAG,UAASC,IAAT,EAAenB,IAAf,EAAqB;AAC7C,cAAIoB,CAAJ;AACA,cAAIxB,MAAJ;;AACA,cAAIyB,OAAO,GAAGF,IAAI,CAACG,kBAAL,CAAwBC,UAAxB,EAAd;;AACA,cAAIT,wBAAwB,GAAGK,IAAI,CAACK,MAAL,CAAY,sCAAZ,CAA/B;AACA,cAAIvB,MAAJ;AACA,cAAIwB,OAAO,GAAG,EAAd;;AACA,cAAI,CAACzB,IAAL,EAAW;AACP,mBAAO,IAAP;AACH;;AAED,mBAAS0B,WAAT,CAAqBC,KAArB,EAA4B;AACxB,gBAAIC,WAAW,GAAG,CAAC,GAAG9C,KAAK,CAAC+C,aAAV,EAAyB5B,MAAM,CAAC6B,SAAhC,CAAlB;;AACA,iBAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,KAAK,CAACK,MAA5B,EAAoCD,EAAE,EAAtC,EAA0C;AACtC,kBAAIE,KAAK,GAAGL,WAAW,CAACD,KAAK,CAACI,EAAD,CAAN,CAAvB;AACAN,cAAAA,OAAO,CAACS,IAAR,CAAatC,MAAM,CAACuC,sBAAP,CAA8BF,KAA9B,EAAqC,IAArC,EAA2C,QAA3C,CAAb;AACH;AACJ;;AACD,eAAKb,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,OAAO,CAACW,MAAxB,EAAgCZ,CAAC,EAAjC,EAAqC;AACjCxB,YAAAA,MAAM,GAAGyB,OAAO,CAACD,CAAD,CAAhB;;AACA,gBAAIN,wBAAwB,IAAI,CAAClB,MAAM,CAACW,OAAxC,EAAiD;AAC7C;AACH;;AACD,gBAAIZ,WAAW,CAACC,MAAD,CAAX,IAAuBA,MAAM,CAACwC,yBAAlC,EAA6D;AACzDnC,cAAAA,MAAM,GAAGL,MAAM,CAACK,MAAhB;AACA,kBAAIoC,WAAW,GAAGtC,UAAU,CAACH,MAAD,EAASI,IAAT,CAA5B;;AACA,kBAAIC,MAAM,IAAIA,MAAM,CAAC0B,KAArB,EAA4B;AACxB,iBAAC,GAAGvC,OAAO,CAACsB,OAAZ,EAAqBT,MAAM,CAAC0B,KAA5B,EAAmCW,MAAnC,CAA0C1C,MAAM,CAACuC,sBAAP,CAA8BjC,IAA9B,CAAmC;AACzEqC,kBAAAA,SAAS,EAAEtC,MAAM,CAACuC,WADuD;AAEzEC,kBAAAA,QAAQ,EAAExC,MAAM,CAACwC,QAFwD;AAGzEL,kBAAAA,yBAAyB,EAAExC,MAAM,CAACwC;AAHuC,iBAAnC,EAIvCC,WAJuC,EAI1B,IAJ0B,EAIpB,QAJoB,CAA1C,EAIiCK,SAJjC,GAI6CC,IAJ7C,CAIkDjB,WAJlD;AAKH,eAND,MAMO;AACH,oBAAI,KAAK,CAAL,KAAWW,WAAf,EAA4B;AACxBZ,kBAAAA,OAAO,CAACS,IAAR,CAAatC,MAAM,CAACuC,sBAAP,CAA8BE,WAA9B,EAA2C,IAA3C,EAAiD,QAAjD,CAAb;AACH;AACJ;AACJ;AACJ;;AACD,iBAAO,CAAC,GAAGrD,YAAY,CAAC4D,cAAjB,EAAiCnB,OAAjC,EAA0C,IAA1C,CAAP;AACH,SAxCD;;AAyCA,eAAO;AACHoB,UAAAA,aAAa,EAAE,YAAW;AACtB,mBAAO,KAAKC,QAAL,GAAgBC,MAAhB,CAAuB,CAAC,cAAD,CAAvB,CAAP;AACH,WAHE;AAIHC,UAAAA,0BAA0B,EAAE,YAAW;AACnC,gBAAI7B,IAAI,GAAG,IAAX;AACA,gBAAImB,MAAM,GAAGnB,IAAI,CAAC2B,QAAL,EAAb;AACA,gBAAIG,YAAY,GAAG/B,qBAAqB,CAACC,IAAD,EAAOA,IAAI,CAACK,MAAL,CAAY,kBAAZ,CAAP,CAAxC;AACA,mBAAO,CAAC,GAAGxC,YAAY,CAAC4D,cAAjB,EAAiC,CAACN,MAAD,EAASW,YAAT,CAAjC,CAAP;AACH,WATE;AAUHC,UAAAA,YAAY,EAAE,UAASlD,IAAT,EAAe;AACzB,iBAAKwB,MAAL,CAAY,kBAAZ,EAAgCxB,IAAhC;AACH,WAZE;AAaHmD,UAAAA,aAAa,EAAE,UAASC,IAAT,EAAe;AAC1B,gBAAIjC,IAAI,GAAG,IAAX;;AACA,oBAAQiC,IAAI,CAACC,QAAb;AACI,mBAAK,kBAAL;AACA,mBAAK,aAAL;AACIlC,gBAAAA,IAAI,CAACmC,YAAL;;AACAF,gBAAAA,IAAI,CAACG,OAAL,GAAe,IAAf;AACA;;AACJ;AACIpC,gBAAAA,IAAI,CAAC2B,QAAL,CAAcM,IAAd;AAPR;AASH;AAxBE,SAAP;AA0BH,OApEK;AADG,KADN;AAwEPI,IAAAA,KAAK,EAAE;AACHC,MAAAA,WAAW,EAAE,YAAW;AACpB,YAAIC,qBAAqB,GAAG,UAASvC,IAAT,EAAe;AACvC,iBAAOA,IAAI,CAACK,MAAL,CAAY,aAAZ,CAAP;AACH,SAFD;;AAGA,eAAO;AACHmC,UAAAA,gBAAgB,EAAE,YAAW;AACzB,gBAAIhC,KAAK,GAAG,KAAKmB,QAAL,EAAZ;AACA,mBAAO,KAAKc,kBAAL,CAAwBjC,KAAxB,CAAP;AACH,WAJE;AAKHiC,UAAAA,kBAAkB,EAAE,UAASjC,KAAT,EAAgB;AAChC,gBAAIR,IAAI,GAAG,IAAX;AACA,gBAAI0C,cAAc,GAAG1C,IAAI,CAAC2C,aAAL,CAAmB,MAAnB,CAArB;AACA,gBAAIC,kBAAkB,GAAGL,qBAAqB,CAACvC,IAAD,CAA9C;;AACA,gBAAI4C,kBAAkB,IAAIA,kBAAkB,CAACxD,OAA7C,EAAsD;AAClD,kBAAIyD,WAAW,GAAG;AACdC,gBAAAA,QAAQ,EAAE,UAAShD,IAAT,EAAeiD,KAAf,EAAsBC,SAAtB,EAAiC;AACvC,sBAAIC,OAAO,GAAG,CAAC,GAAG3F,UAAU,CAACiC,OAAf,EAAwB,OAAxB,EAAiC2D,QAAjC,CAA0ClD,IAAI,CAACmD,eAAL,CAAqB/E,kBAArB,CAA1C,EAAoFgF,QAApF,CAA6FJ,SAA7F,CAAd;AACAhD,kBAAAA,IAAI,CAAC2C,aAAL,CAAmB,eAAnB,EAAoCU,YAApC,CAAiDJ,OAAjD,EAA0D;AACtD5D,oBAAAA,KAAK,EAAEuD,kBAAkB,CAACvD,KAD4B;AAEtDC,oBAAAA,WAAW,EAAEsD,kBAAkB,CAACtD,WAFsB;AAGtDgE,oBAAAA,UAAU,EAAE,aAH0C;AAItDxC,oBAAAA,KAAK,EAAEd,IAAI,CAACK,MAAL,CAAY,kBAAZ,CAJ+C;AAKtDkD,oBAAAA,kBAAkB,EAAEhF,iBALkC;AAMtDiF,oBAAAA,QAAQ,EAAE,UAAS1C,KAAT,EAAgB;AACtB4B,sBAAAA,cAAc,CAACX,YAAf,CAA4BjB,KAA5B;AACH,qBARqD;AAStD2C,oBAAAA,aAAa,EAAE;AACXC,sBAAAA,SAAS,EAAE;AACP,sCAAc3F,SAAS,CAACwB,OAAV,CAAkBC,MAAlB,CAAyB,6BAAzB;AADP;AADA;AATuC,mBAA1D;AAeAQ,kBAAAA,IAAI,CAAC2D,MAAL;AACH,iBAnBa;AAoBdC,gBAAAA,IAAI,EAAE,aApBQ;AAqBdC,gBAAAA,QAAQ,EAAE,OArBI;AAsBdC,gBAAAA,YAAY,EAAE,OAtBA;AAuBdC,gBAAAA,SAAS,EAAE;AAvBG,eAAlB;AAyBAvD,cAAAA,KAAK,CAACO,IAAN,CAAW8B,WAAX;AACH;;AACD,mBAAOrC,KAAP;AACH,WAtCE;AAuCHwD,UAAAA,mBAAmB,EAAE,YAAW;AAC5B,gBAAIhE,IAAI,GAAG,IAAX;AACA,gBAAIiE,QAAQ,GAAGjE,IAAI,CAACkE,OAAL,EAAf;AACA,gBAAIC,YAAY,GAAGF,QAAQ,CAACG,IAAT,CAAc,MAAMpE,IAAI,CAACmD,eAAL,CAAqB/E,kBAArB,CAApB,EAA8D+C,MAA9D,CAAqE,YAAW;AAC/F,qBAAO,CAAC,GAAG7D,UAAU,CAACiC,OAAf,EAAwB,IAAxB,EAA8B8E,OAA9B,CAAsC,MAAMrE,IAAI,CAACmD,eAAL,CAAqB7E,kBAArB,CAA5C,EAAsFgG,EAAtF,CAAyFL,QAAzF,CAAP;AACH,aAFkB,CAAnB;;AAGA,gBAAIE,YAAY,CAACtD,MAAjB,EAAyB;AACrB,qBAAOsD,YAAY,CAACI,SAAb,CAAuB,UAAvB,CAAP;AACH;;AACD,mBAAO,IAAP;AACH,WAjDE;AAkDHC,UAAAA,SAAS,EAAE,YAAW;AAClB,gBAAI5B,kBAAkB,GAAGL,qBAAqB,CAAC,IAAD,CAA9C;AACA,mBAAO,KAAKZ,QAAL,MAAmBiB,kBAAkB,IAAIA,kBAAkB,CAACxD,OAAnE;AACH,WArDE;AAsDH4C,UAAAA,aAAa,EAAE,UAASC,IAAT,EAAe;AAC1B,gBAAI,kBAAkBA,IAAI,CAAC2B,IAA3B,EAAiC;AAC7B,kBAAI,uBAAuB3B,IAAI,CAACC,QAAhC,EAA0C;AACtC,oBAAIuC,MAAM,GAAG,KAAKT,mBAAL,EAAb;;AACA,oBAAIS,MAAJ,EAAY;AACRA,kBAAAA,MAAM,CAACpE,MAAP,CAAc,OAAd,EAAuB4B,IAAI,CAACnB,KAA5B;AACH;AACJ,eALD,MAKO;AACH,qBAAK4D,WAAL;AACH;;AACDzC,cAAAA,IAAI,CAACG,OAAL,GAAe,IAAf;AACH,aAVD,MAUO;AACH,mBAAKT,QAAL,CAAcM,IAAd;AACH;AACJ;AApEE,SAAP;AAsEH,OA1EY,EADV;AA4EH0C,MAAAA,QAAQ,EAAE;AACNC,QAAAA,IAAI,EAAE,YAAW;AACb,eAAKjD,QAAL,CAAckD,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACA,eAAKC,aAAL,GAAqB,EAArB;AACH,SAJK;AAKNC,QAAAA,uBAAuB,EAAE,UAASvG,MAAT,EAAiBwG,UAAjB,EAA6B;AAClD,cAAInE,KAAK,GAAGlC,UAAU,CAACH,MAAD,EAASwG,UAAT,CAAtB;AACA,cAAIC,aAAa,GAAG,CAAC,GAAGrH,YAAY,CAACsH,wBAAjB,EAA2C1G,MAA3C,EAAmD,QAAnD,CAApB;AACA,iBAAO,CAAC,GAAGZ,YAAY,CAACuH,WAAjB,EAA8BtE,KAA9B,EAAqCoE,aAArC,CAAP;AACH,SATK;AAUNG,QAAAA,oBAAoB,EAAE,YAAW;AAC7B,cAAIC,eAAe,GAAG,KAAKjF,MAAL,CAAY,oCAAZ,CAAtB;AACA,iBAAO,UAASkF,GAAT,EAAc;AACjB,mBAAOD,eAAe,GAAGC,GAAH,GAASA,GAAG,CAACC,WAAJ,EAA/B;AACH,WAFD;AAGH,SAfK;AAgBNC,QAAAA,0BAA0B,EAAE,UAAShH,MAAT,EAAiBiH,WAAjB,EAA8BT,UAA9B,EAA0C;AAClE,cAAIjF,IAAI,GAAG,IAAX;AACA,cAAI2F,OAAO,GAAGD,WAAW,CAACE,MAAZ,EAAd;AACA,cAAIC,MAAJ;;AACA,cAAIC,gBAAgB,GAAG,KAAKT,oBAAL,EAAvB;;AACA,cAAIU,oBAAoB,GAAGD,gBAAgB,CAACb,UAAD,CAA3C;;AACA,cAAI,CAACU,OAAO,CAAC9E,MAAb,EAAqB;AACjB8E,YAAAA,OAAO,GAAG,CAAC,GAAGrI,UAAU,CAACiC,OAAf,EAAwB,OAAxB,EAAiCyG,MAAjC,CAAwCN,WAAxC,CAAV;AACH,WAFD,MAEO;AACH,gBAAIjH,MAAJ,EAAY;AACR,kBAAIA,MAAM,CAACwH,UAAP,IAAqB,CAArB,IAA0B,CAACxH,MAAM,CAACyH,eAAtC,EAAuD;AACnDL,gBAAAA,MAAM,GAAGH,WAAT;AACH,eAFD,MAEO;AACH,oBAAIS,WAAW,GAAGnG,IAAI,CAACG,kBAAL,CAAwBiG,eAAxB,CAAwC3H,MAAM,CAACsE,KAA/C,CAAlB;;AACA8C,gBAAAA,MAAM,GAAGF,OAAO,CAACU,QAAR,CAAiB,IAAjB,EAAuBC,EAAvB,CAA0BH,WAA1B,EAAuC/B,IAAvC,CAA4C,GAA5C,CAAT;AACH;AACJ;AACJ;;AACDyB,UAAAA,MAAM,GAAGA,MAAM,IAAIA,MAAM,CAAChF,MAAjB,GAA0BgF,MAA1B,GAAmCF,OAAO,CAACvB,IAAR,CAAa,GAAb,CAA5C;AACAyB,UAAAA,MAAM,GAAGA,MAAM,CAAC1E,MAAP,CAAc,UAASoF,CAAT,EAAYrC,OAAZ,EAAqB;AACxC,gBAAIsC,SAAS,GAAG,CAAC,GAAGlJ,UAAU,CAACiC,OAAf,EAAwB2E,OAAxB,EAAiCuC,QAAjC,EAAhB;;AACA,iBAAK,IAAIxG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuG,SAAS,CAAC3F,MAA9B,EAAsCZ,CAAC,EAAvC,EAA2C;AACvC,kBAAIyG,IAAI,GAAGF,SAAS,CAACG,GAAV,CAAc1G,CAAd,CAAX;;AACA,kBAAI,MAAMyG,IAAI,CAACE,QAAf,EAAyB;AACrB,uBAAOd,gBAAgB,CAACY,IAAI,CAACG,WAAL,IAAoBH,IAAI,CAACI,SAA1B,CAAhB,CAAqDC,OAArD,CAA6DhB,oBAA7D,IAAqF,CAAC,CAA7F;AACH;;AACD,qBAAO,KAAP;AACH;AACJ,WATQ,CAAT;AAUA,iBAAOF,MAAP;AACH,SA9CK;AA+CNmB,QAAAA,wBAAwB,EAAE,UAASC,SAAT,EAAoBhC,UAApB,EAAgC;AACtD,cAAIjF,IAAI,GAAG,IAAX;AACA,cAAIkH,eAAe,GAAG,CAAC,GAAG5J,UAAU,CAACiC,OAAf,EAAwB,QAAxB,EAAkC2D,QAAlC,CAA2ClD,IAAI,CAACmD,eAAL,CAAqB9E,iBAArB,CAA3C,CAAtB;AACA,cAAIQ,IAAI,GAAGoI,SAAS,CAACpI,IAAV,EAAX;AACA,cAAIsI,mBAAmB,GAAGF,SAAS,CAAC,CAAD,CAAnC;;AACA,cAAInB,gBAAgB,GAAG,KAAKT,oBAAL,EAAvB;;AACA,cAAItC,KAAK,GAAG+C,gBAAgB,CAACjH,IAAD,CAAhB,CAAuBkI,OAAvB,CAA+BjB,gBAAgB,CAACb,UAAD,CAA/C,CAAZ;;AACA,cAAIlC,KAAK,IAAI,CAAb,EAAgB;AACZ,gBAAIoE,mBAAmB,CAACN,WAAxB,EAAqC;AACjCM,cAAAA,mBAAmB,CAACN,WAApB,GAAkChI,IAAI,CAACuI,MAAL,CAAY,CAAZ,EAAerE,KAAf,CAAlC;AACH,aAFD,MAEO;AACHoE,cAAAA,mBAAmB,CAACL,SAApB,GAAgCjI,IAAI,CAACuI,MAAL,CAAY,CAAZ,EAAerE,KAAf,CAAhC;AACH;;AACDkE,YAAAA,SAAS,CAACI,KAAV,CAAgBH,eAAe,CAACrI,IAAhB,CAAqBA,IAAI,CAACuI,MAAL,CAAYrE,KAAZ,EAAmBkC,UAAU,CAACpE,MAA9B,CAArB,CAAhB;AACAoG,YAAAA,SAAS,GAAG,CAAC,GAAG3J,UAAU,CAACiC,OAAf,EAAwB9B,aAAa,CAAC8B,OAAd,CAAsB+H,cAAtB,CAAqCzI,IAAI,CAACuI,MAAL,CAAYrE,KAAK,GAAGkC,UAAU,CAACpE,MAA/B,CAArC,CAAxB,EAAsG0G,WAAtG,CAAkHL,eAAlH,CAAZ;AACA,mBAAOlH,IAAI,CAACgH,wBAAL,CAA8BC,SAA9B,EAAyChC,UAAzC,CAAP;AACH;AACJ,SAhEK;AAiENuC,QAAAA,oBAAoB,EAAE,UAAS9B,WAAT,EAAsB+B,QAAtB,EAAgChJ,MAAhC,EAAwC;AAC1D,cAAIuB,IAAI,GAAG,IAAX;;AACA,cAAI8F,gBAAgB,GAAG,KAAKT,oBAAL,EAAvB;;AACA,cAAIJ,UAAU,GAAGjF,IAAI,CAACK,MAAL,CAAY,kBAAZ,CAAjB;;AACA,cAAIoH,QAAQ,IAAIhJ,MAAhB,EAAwB;AACpBwG,YAAAA,UAAU,GAAGA,UAAU,IAAIjF,IAAI,CAACgF,uBAAL,CAA6BvG,MAA7B,EAAqCwG,UAArC,CAA3B;AACH;;AACD,cAAIA,UAAU,IAAIjF,IAAI,CAACK,MAAL,CAAY,iCAAZ,CAAlB,EAAkE;AAC9D,gBAAIqH,SAAS,GAAG1H,IAAI,CAACyF,0BAAL,CAAgChH,MAAhC,EAAwCiH,WAAxC,EAAqDT,UAArD,CAAhB;;AACA,aAAC,GAAGrH,SAAS,CAAC+J,IAAd,EAAoBD,SAApB,EAA+B,UAASnB,CAAT,EAAYrC,OAAZ,EAAqB;AAChD,eAAC,GAAGtG,SAAS,CAAC+J,IAAd,EAAoB,CAAC,GAAGrK,UAAU,CAACiC,OAAf,EAAwB2E,OAAxB,EAAiCuC,QAAjC,EAApB,EAAiE,UAASF,CAAT,EAAYqB,QAAZ,EAAsB;AACnF,oBAAIH,QAAJ,EAAc;AACV,sBAAI3B,gBAAgB,CAAC,CAAC,GAAGxI,UAAU,CAACiC,OAAf,EAAwBqI,QAAxB,EAAkC/I,IAAlC,EAAD,CAAhB,KAA+DiH,gBAAgB,CAACb,UAAD,CAAnF,EAAiG;AAC7F,qBAAC,GAAG3H,UAAU,CAACiC,OAAf,EAAwB,IAAxB,EAA8BsI,WAA9B,CAA0C,CAAC,GAAGvK,UAAU,CAACiC,OAAf,EAAwB,QAAxB,EAAkC2D,QAAlC,CAA2ClD,IAAI,CAACmD,eAAL,CAAqB9E,iBAArB,CAA3C,EAAoFQ,IAApF,CAAyF,CAAC,GAAGvB,UAAU,CAACiC,OAAf,EAAwBqI,QAAxB,EAAkC/I,IAAlC,EAAzF,CAA1C;AACH;AACJ,iBAJD,MAIO;AACHmB,kBAAAA,IAAI,CAACgH,wBAAL,CAA8B,CAAC,GAAG1J,UAAU,CAACiC,OAAf,EAAwBqI,QAAxB,CAA9B,EAAiE3C,UAAjE;AACH;AACJ,eARD;AASH,aAVD;AAWH;AACJ,SAtFK;AAuFN6C,QAAAA,WAAW,EAAE,YAAW;AACpB,eAAKnG,QAAL,CAAckD,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;;AACA,cAAI,KAAKzE,MAAL,CAAY,aAAZ,CAAJ,EAAgC;AAC5B,gBAAI,KAAKA,MAAL,CAAY,+BAAZ,CAAJ,EAAkD;AAC9C0H,cAAAA,YAAY,CAAC,KAAKC,eAAN,CAAZ;AACA,mBAAKA,eAAL,GAAuBC,UAAU,CAAC,YAAW;AACzC,qBAAKT,oBAAL,CAA0B,KAAKU,gBAAL,EAA1B;AACH,eAFiC,CAEhCC,IAFgC,CAE3B,IAF2B,CAAD,CAAjC;AAGH,aALD,MAKO;AACH,mBAAKX,oBAAL,CAA0B,KAAKU,gBAAL,EAA1B;AACH;AACJ;AACJ,SAnGK;AAoGNE,QAAAA,WAAW,EAAE,UAASC,KAAT,EAAgBC,UAAhB,EAA4B;AACrC,cAAI7J,MAAM,GAAG6J,UAAU,CAAC7J,MAAxB;AACA,cAAI6C,QAAQ,GAAG7C,MAAM,CAACK,MAAP,IAAiBL,MAAM,CAACK,MAAP,CAAcwC,QAA/B,IAA2C7C,MAAM,CAAC6C,QAAjE;AACA,cAAImG,QAAQ,GAAG,aAAanG,QAA5B;;AACA,cAAI9C,WAAW,CAACC,MAAD,CAAf,EAAyB;AACrB,gBAAI,KAAK4B,MAAL,CAAY,+BAAZ,CAAJ,EAAkD;AAC9C,kBAAI,CAAC,KAAK0E,aAAL,CAAmBlE,MAAxB,EAAgC;AAC5BkH,gBAAAA,YAAY,CAAC,KAAKC,eAAN,CAAZ;AACA,qBAAKA,eAAL,GAAuBC,UAAU,CAAC,YAAW;AACzC,uBAAKlD,aAAL,CAAmBwD,OAAnB,CAA2B,UAASC,MAAT,EAAiB;AACxC,yBAAKhB,oBAAL,CAA0B3C,KAA1B,CAAgC,IAAhC,EAAsC2D,MAAtC;AACH,mBAF0B,CAEzBL,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,uBAAKpD,aAAL,GAAqB,EAArB;AACH,iBALiC,CAKhCoD,IALgC,CAK3B,IAL2B,CAAD,CAAjC;AAMH;;AACD,mBAAKpD,aAAL,CAAmBhE,IAAnB,CAAwB,CAACsH,KAAD,EAAQZ,QAAR,EAAkBhJ,MAAlB,CAAxB;AACH,aAXD,MAWO;AACH,mBAAK+I,oBAAL,CAA0Ba,KAA1B,EAAiCZ,QAAjC,EAA2ChJ,MAA3C;AACH;AACJ;;AACD,eAAKkD,QAAL,CAAc0G,KAAd,EAAqBC,UAArB;AACH,SAzHK;AA0HNG,QAAAA,OAAO,EAAE,YAAW;AAChBV,UAAAA,YAAY,CAAC,KAAKC,eAAN,CAAZ;AACA,eAAKrG,QAAL;AACH;AA7HK;AA5EP;AAxEA;AAdE,CAAjB","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.search.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _dom_adapter = require(\"../../core/dom_adapter\");\r\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _data = require(\"../../core/utils/data\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _query = require(\"../../data/query\");\r\nvar _query2 = _interopRequireDefault(_query);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar SEARCH_PANEL_CLASS = \"search-panel\";\r\nvar SEARCH_TEXT_CLASS = \"search-text\";\r\nvar HEADER_PANEL_CLASS = \"header-panel\";\r\nvar FILTERING_TIMEOUT = 700;\r\n\r\nfunction allowSearch(column) {\r\n    return (0, _type.isDefined)(column.allowSearch) ? column.allowSearch : column.allowFiltering\r\n}\r\n\r\nfunction parseValue(column, text) {\r\n    var lookup = column.lookup;\r\n    if (!column.parseValue) {\r\n        return text\r\n    }\r\n    if (lookup) {\r\n        return column.parseValue.call(lookup, text)\r\n    }\r\n    return column.parseValue(text)\r\n}\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            searchPanel: {\r\n                visible: false,\r\n                width: 160,\r\n                placeholder: _message2.default.format(\"dxDataGrid-searchPanelPlaceholder\"),\r\n                highlightSearchText: true,\r\n                highlightCaseSensitive: false,\r\n                text: \"\",\r\n                searchVisibleColumnsOnly: false\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: function() {\r\n                var calculateSearchFilter = function(that, text) {\r\n                    var i;\r\n                    var column;\r\n                    var columns = that._columnsController.getColumns();\r\n                    var searchVisibleColumnsOnly = that.option(\"searchPanel.searchVisibleColumnsOnly\");\r\n                    var lookup;\r\n                    var filters = [];\r\n                    if (!text) {\r\n                        return null\r\n                    }\r\n\r\n                    function onQueryDone(items) {\r\n                        var valueGetter = (0, _data.compileGetter)(lookup.valueExpr);\r\n                        for (var _i = 0; _i < items.length; _i++) {\r\n                            var value = valueGetter(items[_i]);\r\n                            filters.push(column.createFilterExpression(value, null, \"search\"))\r\n                        }\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        if (searchVisibleColumnsOnly && !column.visible) {\r\n                            continue\r\n                        }\r\n                        if (allowSearch(column) && column.calculateFilterExpression) {\r\n                            lookup = column.lookup;\r\n                            var filterValue = parseValue(column, text);\r\n                            if (lookup && lookup.items) {\r\n                                (0, _query2.default)(lookup.items).filter(column.createFilterExpression.call({\r\n                                    dataField: lookup.displayExpr,\r\n                                    dataType: lookup.dataType,\r\n                                    calculateFilterExpression: column.calculateFilterExpression\r\n                                }, filterValue, null, \"search\")).enumerate().done(onQueryDone)\r\n                            } else {\r\n                                if (void 0 !== filterValue) {\r\n                                    filters.push(column.createFilterExpression(filterValue, null, \"search\"))\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return (0, _uiGrid_core.combineFilters)(filters, \"or\")\r\n                };\r\n                return {\r\n                    publicMethods: function() {\r\n                        return this.callBase().concat([\"searchByText\"])\r\n                    },\r\n                    _calculateAdditionalFilter: function() {\r\n                        var that = this;\r\n                        var filter = that.callBase();\r\n                        var searchFilter = calculateSearchFilter(that, that.option(\"searchPanel.text\"));\r\n                        return (0, _uiGrid_core.combineFilters)([filter, searchFilter])\r\n                    },\r\n                    searchByText: function(text) {\r\n                        this.option(\"searchPanel.text\", text)\r\n                    },\r\n                    optionChanged: function(args) {\r\n                        var that = this;\r\n                        switch (args.fullName) {\r\n                            case \"searchPanel.text\":\r\n                            case \"searchPanel\":\r\n                                that._applyFilter();\r\n                                args.handled = true;\r\n                                break;\r\n                            default:\r\n                                that.callBase(args)\r\n                        }\r\n                    }\r\n                }\r\n            }()\r\n        },\r\n        views: {\r\n            headerPanel: function() {\r\n                var getSearchPanelOptions = function(that) {\r\n                    return that.option(\"searchPanel\")\r\n                };\r\n                return {\r\n                    _getToolbarItems: function() {\r\n                        var items = this.callBase();\r\n                        return this._prepareSearchItem(items)\r\n                    },\r\n                    _prepareSearchItem: function(items) {\r\n                        var that = this;\r\n                        var dataController = that.getController(\"data\");\r\n                        var searchPanelOptions = getSearchPanelOptions(that);\r\n                        if (searchPanelOptions && searchPanelOptions.visible) {\r\n                            var toolbarItem = {\r\n                                template: function(data, index, container) {\r\n                                    var $search = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(SEARCH_PANEL_CLASS)).appendTo(container);\r\n                                    that.getController(\"editorFactory\").createEditor($search, {\r\n                                        width: searchPanelOptions.width,\r\n                                        placeholder: searchPanelOptions.placeholder,\r\n                                        parentType: \"searchPanel\",\r\n                                        value: that.option(\"searchPanel.text\"),\r\n                                        updateValueTimeout: FILTERING_TIMEOUT,\r\n                                        setValue: function(value) {\r\n                                            dataController.searchByText(value)\r\n                                        },\r\n                                        editorOptions: {\r\n                                            inputAttr: {\r\n                                                \"aria-label\": _message2.default.format(\"dxDataGrid-ariaSearchInGrid\")\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                    that.resize()\r\n                                },\r\n                                name: \"searchPanel\",\r\n                                location: \"after\",\r\n                                locateInMenu: \"never\",\r\n                                sortIndex: 40\r\n                            };\r\n                            items.push(toolbarItem)\r\n                        }\r\n                        return items\r\n                    },\r\n                    getSearchTextEditor: function() {\r\n                        var that = this;\r\n                        var $element = that.element();\r\n                        var $searchPanel = $element.find(\".\" + that.addWidgetPrefix(SEARCH_PANEL_CLASS)).filter(function() {\r\n                            return (0, _renderer2.default)(this).closest(\".\" + that.addWidgetPrefix(HEADER_PANEL_CLASS)).is($element)\r\n                        });\r\n                        if ($searchPanel.length) {\r\n                            return $searchPanel.dxTextBox(\"instance\")\r\n                        }\r\n                        return null\r\n                    },\r\n                    isVisible: function() {\r\n                        var searchPanelOptions = getSearchPanelOptions(this);\r\n                        return this.callBase() || searchPanelOptions && searchPanelOptions.visible\r\n                    },\r\n                    optionChanged: function(args) {\r\n                        if (\"searchPanel\" === args.name) {\r\n                            if (\"searchPanel.text\" === args.fullName) {\r\n                                var editor = this.getSearchTextEditor();\r\n                                if (editor) {\r\n                                    editor.option(\"value\", args.value)\r\n                                }\r\n                            } else {\r\n                                this._invalidate()\r\n                            }\r\n                            args.handled = true\r\n                        } else {\r\n                            this.callBase(args)\r\n                        }\r\n                    }\r\n                }\r\n            }(),\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._searchParams = []\r\n                },\r\n                _getFormattedSearchText: function(column, searchText) {\r\n                    var value = parseValue(column, searchText);\r\n                    var formatOptions = (0, _uiGrid_core.getFormatOptionsByColumn)(column, \"search\");\r\n                    return (0, _uiGrid_core.formatValue)(value, formatOptions)\r\n                },\r\n                _getStringNormalizer: function() {\r\n                    var isCaseSensitive = this.option(\"searchPanel.highlightCaseSensitive\");\r\n                    return function(str) {\r\n                        return isCaseSensitive ? str : str.toLowerCase()\r\n                    }\r\n                },\r\n                _findHighlightingTextNodes: function(column, cellElement, searchText) {\r\n                    var that = this;\r\n                    var $parent = cellElement.parent();\r\n                    var $items;\r\n                    var stringNormalizer = this._getStringNormalizer();\r\n                    var normalizedSearchText = stringNormalizer(searchText);\r\n                    if (!$parent.length) {\r\n                        $parent = (0, _renderer2.default)(\"<div>\").append(cellElement)\r\n                    } else {\r\n                        if (column) {\r\n                            if (column.groupIndex >= 0 && !column.showWhenGrouped) {\r\n                                $items = cellElement\r\n                            } else {\r\n                                var columnIndex = that._columnsController.getVisibleIndex(column.index);\r\n                                $items = $parent.children(\"td\").eq(columnIndex).find(\"*\")\r\n                            }\r\n                        }\r\n                    }\r\n                    $items = $items && $items.length ? $items : $parent.find(\"*\");\r\n                    $items = $items.filter(function(_, element) {\r\n                        var $contents = (0, _renderer2.default)(element).contents();\r\n                        for (var i = 0; i < $contents.length; i++) {\r\n                            var node = $contents.get(i);\r\n                            if (3 === node.nodeType) {\r\n                                return stringNormalizer(node.textContent || node.nodeValue).indexOf(normalizedSearchText) > -1\r\n                            }\r\n                            return false\r\n                        }\r\n                    });\r\n                    return $items\r\n                },\r\n                _highlightSearchTextCore: function($textNode, searchText) {\r\n                    var that = this;\r\n                    var $searchTextSpan = (0, _renderer2.default)(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS));\r\n                    var text = $textNode.text();\r\n                    var firstContentElement = $textNode[0];\r\n                    var stringNormalizer = this._getStringNormalizer();\r\n                    var index = stringNormalizer(text).indexOf(stringNormalizer(searchText));\r\n                    if (index >= 0) {\r\n                        if (firstContentElement.textContent) {\r\n                            firstContentElement.textContent = text.substr(0, index)\r\n                        } else {\r\n                            firstContentElement.nodeValue = text.substr(0, index)\r\n                        }\r\n                        $textNode.after($searchTextSpan.text(text.substr(index, searchText.length)));\r\n                        $textNode = (0, _renderer2.default)(_dom_adapter2.default.createTextNode(text.substr(index + searchText.length))).insertAfter($searchTextSpan);\r\n                        return that._highlightSearchTextCore($textNode, searchText)\r\n                    }\r\n                },\r\n                _highlightSearchText: function(cellElement, isEquals, column) {\r\n                    var that = this;\r\n                    var stringNormalizer = this._getStringNormalizer();\r\n                    var searchText = that.option(\"searchPanel.text\");\r\n                    if (isEquals && column) {\r\n                        searchText = searchText && that._getFormattedSearchText(column, searchText)\r\n                    }\r\n                    if (searchText && that.option(\"searchPanel.highlightSearchText\")) {\r\n                        var textNodes = that._findHighlightingTextNodes(column, cellElement, searchText);\r\n                        (0, _iterator.each)(textNodes, function(_, element) {\r\n                            (0, _iterator.each)((0, _renderer2.default)(element).contents(), function(_, textNode) {\r\n                                if (isEquals) {\r\n                                    if (stringNormalizer((0, _renderer2.default)(textNode).text()) === stringNormalizer(searchText)) {\r\n                                        (0, _renderer2.default)(this).replaceWith((0, _renderer2.default)(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)).text((0, _renderer2.default)(textNode).text()))\r\n                                    }\r\n                                } else {\r\n                                    that._highlightSearchTextCore((0, _renderer2.default)(textNode), searchText)\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                },\r\n                _renderCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.option(\"rowTemplate\")) {\r\n                        if (this.option(\"templatesRenderAsynchronously\")) {\r\n                            clearTimeout(this._highlightTimer);\r\n                            this._highlightTimer = setTimeout(function() {\r\n                                this._highlightSearchText(this._getTableElement())\r\n                            }.bind(this))\r\n                        } else {\r\n                            this._highlightSearchText(this._getTableElement())\r\n                        }\r\n                    }\r\n                },\r\n                _updateCell: function($cell, parameters) {\r\n                    var column = parameters.column;\r\n                    var dataType = column.lookup && column.lookup.dataType || column.dataType;\r\n                    var isEquals = \"string\" !== dataType;\r\n                    if (allowSearch(column)) {\r\n                        if (this.option(\"templatesRenderAsynchronously\")) {\r\n                            if (!this._searchParams.length) {\r\n                                clearTimeout(this._highlightTimer);\r\n                                this._highlightTimer = setTimeout(function() {\r\n                                    this._searchParams.forEach(function(params) {\r\n                                        this._highlightSearchText.apply(this, params)\r\n                                    }.bind(this));\r\n                                    this._searchParams = []\r\n                                }.bind(this))\r\n                            }\r\n                            this._searchParams.push([$cell, isEquals, column])\r\n                        } else {\r\n                            this._highlightSearchText($cell, isEquals, column)\r\n                        }\r\n                    }\r\n                    this.callBase($cell, parameters)\r\n                },\r\n                dispose: function() {\r\n                    clearTimeout(this._highlightTimer);\r\n                    this.callBase()\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}