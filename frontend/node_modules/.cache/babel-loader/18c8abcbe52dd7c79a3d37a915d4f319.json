{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiData_grid = require(\"../data_grid/ui.data_grid.core\");\n\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\n\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _support = require(\"../../core/utils/support\");\n\nvar _support2 = _interopRequireDefault(_support);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _utils = require(\"../../events/utils\");\n\nvar _hold = require(\"../../events/hold\");\n\nvar _hold2 = _interopRequireDefault(_hold);\n\nvar _selection = require(\"../selection/selection\");\n\nvar _selection2 = _interopRequireDefault(_selection);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_SELECTION_CLASS = \"dx-selection\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nvar SELECTION_MODE = \"selection.mode\";\n\nvar processLongTap = function (that, dxEvent) {\n  var selectionController = that.getController(\"selection\");\n  var rowsView = that.getView(\"rowsView\");\n  var $row = (0, _renderer2.default)(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\n  var rowIndex = rowsView.getRowIndex($row);\n\n  if (rowIndex < 0) {\n    return;\n  }\n\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\n\nexports.SelectionController = _uiData_grid2.default.Controller.inherit(function () {\n  var isSeveralRowsSelected = function (that, selectionFilter) {\n    var keyIndex = 0;\n\n    var store = that._dataController.store();\n\n    var key = store && store.key();\n    var isComplexKey = Array.isArray(key);\n\n    if (!selectionFilter.length) {\n      return false;\n    }\n\n    if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n      for (var i = 0; i < selectionFilter.length; i++) {\n        if (Array.isArray(selectionFilter[i])) {\n          if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n            return true;\n          }\n\n          keyIndex++;\n        }\n      }\n\n      return false;\n    }\n\n    return key !== selectionFilter[0];\n  };\n\n  var selectionCellTemplate = function (container, options) {\n    var component = options.component;\n    var rowsView = component.getView(\"rowsView\");\n\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n\n    rowsView.renderSelectCheckBoxContainer((0, _renderer2.default)(container), options);\n  };\n\n  var selectionHeaderTemplate = function (container, options) {\n    var column = options.column;\n    var $cellElement = (0, _renderer2.default)(container);\n    var columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(EDITOR_CELL_CLASS);\n\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n\n  return {\n    init: function () {\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = this.option(SELECTION_MODE);\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n\n      this._updateSelectColumn();\n\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    },\n    _getSelectionConfig: function () {\n      var that = this;\n      var dataController = that._dataController;\n      var selectionOptions = that.option(\"selection\") || {};\n      return {\n        selectedKeys: that.option(\"selectedRowKeys\"),\n        mode: that._selectionMode,\n        deferred: selectionOptions.deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: that.option(\"selectionFilter\"),\n        key: function () {\n          return dataController && dataController.key();\n        },\n        keyOf: function (item) {\n          return dataController && dataController.keyOf(item);\n        },\n        dataFields: function () {\n          return dataController.dataSource() && dataController.dataSource().select();\n        },\n        load: function (options) {\n          return dataController.dataSource() && dataController.dataSource().load(options) || new _deferred.Deferred().resolve([]);\n        },\n        plainItems: function () {\n          return dataController.items(true);\n        },\n        isItemSelected: function (item) {\n          return item.selected;\n        },\n        isSelectableItem: function (item) {\n          return item && \"data\" === item.rowType && !item.isNewRow;\n        },\n        getItemData: function (item) {\n          return item && (item.oldData || item.data || item);\n        },\n        filter: function () {\n          return dataController.getCombinedFilter();\n        },\n        totalCount: function () {\n          return dataController.totalCount();\n        },\n        onSelectionChanged: that._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn: function () {\n      var columnsController = this.getController(\"columns\");\n      var isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: COMMAND_SELECT_CLASS,\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection: function () {\n      var options = this._getSelectionConfig();\n\n      return new _selection2.default(options);\n    },\n    _fireSelectionChanged: function (options) {\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n\n      var argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n    },\n    _updateCheckboxesState: function (options) {\n      var isDeferredMode = options.isDeferredMode;\n      var selectionFilter = options.selectionFilter;\n      var selectedItemKeys = options.selectedItemKeys;\n      var removedItemKeys = options.removedItemKeys;\n\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && isSeveralRowsSelected(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else {\n          if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n            this.stopSelectionWithCheckboxes();\n          }\n        }\n      }\n    },\n    _updateSelectedItems: function (args) {\n      var that = this;\n      var selectionChangedOptions;\n      var isDeferredMode = that.option(\"selection.deferred\");\n\n      var selectionFilter = that._selection.selectionFilter();\n\n      var dataController = that._dataController;\n      var items = dataController.items();\n\n      if (!items) {\n        return;\n      }\n\n      var isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\n      var changedItemIndexes = that.getChangedItemIndexes(items);\n\n      that._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: changedItemIndexes\n        });\n      }\n\n      if (isDeferredMode) {\n        that.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else {\n        if (args.addedItemKeys.length || args.removedItemKeys.length) {\n          that._selectedItemsInternalChange = true;\n          that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n          that._selectedItemsInternalChange = false;\n          selectionChangedOptions = {\n            selectedRowsData: args.selectedItems.slice(0),\n            selectedRowKeys: args.selectedItemKeys.slice(0),\n            currentSelectedRowKeys: args.addedItemKeys.slice(0),\n            currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n          };\n        }\n      }\n\n      that._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes: function (items) {\n      var that = this;\n      var itemIndexes = [];\n      var isDeferredSelection = this.option(\"selection.deferred\");\n\n      for (var i = 0, length = items.length; i < length; i++) {\n        var row = items[i];\n        var isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\n\n        if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n\n      return itemIndexes;\n    },\n    callbackNames: function () {\n      return [\"selectionChanged\"];\n    },\n    optionChanged: function (args) {\n      var that = this;\n      that.callBase(args);\n\n      switch (args.name) {\n        case \"selection\":\n          var oldSelectionMode = that._selectionMode;\n          that.init();\n          var selectionMode = that._selectionMode;\n          var selectedRowKeys = that.option(\"selectedRowKeys\");\n\n          if (oldSelectionMode !== selectionMode) {\n            if (\"single\" === selectionMode) {\n              if (selectedRowKeys.length > 1) {\n                selectedRowKeys = [selectedRowKeys[0]];\n              }\n            } else {\n              if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n          }\n\n          that.selectRows(selectedRowKeys).always(function () {\n            that._fireSelectionChanged();\n          });\n          that.getController(\"columns\").updateColumns();\n          args.handled = true;\n          break;\n\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n\n          args.handled = true;\n          break;\n\n        case \"selectedRowKeys\":\n          var value = args.value || [];\n\n          if (Array.isArray(value) && !that._selectedItemsInternalChange && (that.component.getDataSource() || !value.length)) {\n            that.selectRows(value);\n          }\n\n          args.handled = true;\n      }\n    },\n    publicMethods: function () {\n      return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n    },\n    isRowSelected: function (arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll: function () {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll: function () {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll: function () {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll: function () {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection: function () {\n      return this.selectedItemKeys([]);\n    },\n    refresh: function () {\n      var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n\n      return new _deferred.Deferred().resolve().promise();\n    },\n    selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys: function () {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows: function (keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows: function (keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes: function (indexes) {\n      var items = this._dataController.items();\n\n      var keys = [];\n\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n\n      (0, _iterator.each)(indexes, function () {\n        var item = items[this];\n\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData: function () {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection: function (itemIndex, keys) {\n      keys = keys || {};\n\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n\n      return this._selection.changeItemSelection(this._dataController.getRowIndexDelta() + itemIndex, keys);\n    },\n    focusedItemIndex: function (itemIndex) {\n      var that = this;\n\n      if ((0, _type.isDefined)(itemIndex)) {\n        that._selection._focusedItemIndex = itemIndex;\n      } else {\n        return that._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes: function () {\n      var that = this;\n\n      if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\n        that._isSelectionWithCheckboxes = true;\n\n        that._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    },\n    stopSelectionWithCheckboxes: function () {\n      var that = this;\n\n      if (that._isSelectionWithCheckboxes) {\n        that._isSelectionWithCheckboxes = false;\n\n        that._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n}());\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      selection: {\n        mode: \"none\",\n        showCheckBoxesMode: \"onClick\",\n        allowSelectAll: true,\n        selectAllMode: \"allPages\",\n        maxFilterLengthInRequest: 1500,\n        deferred: false\n      },\n      selectionFilter: [],\n      selectedRowKeys: []\n    };\n  },\n  controllers: {\n    selection: exports.SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          var selectionController = this.getController(\"selection\");\n          var isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          return that.callBase().done(function () {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem: function (item, options) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var hasSelectColumn = selectionController.isSelectColumnVisible();\n          var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          var dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n\n          if (hasSelectColumn && dataItem.values) {\n            for (var i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n\n          return dataItem;\n        },\n        refresh: function (options) {\n          var that = this;\n          var d = new _deferred.Deferred();\n          this.callBase.apply(this, arguments).done(function () {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged: function (e) {\n          this.callBase.apply(this, arguments);\n\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange: function (change) {\n          var _this = this;\n\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach(function (item, index) {\n              var currentItem = _this._items[index];\n\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n          var isUpdateSelection = changes.length > 1 && changes.every(function (change) {\n            return \"updateSelection\" === change.changeType;\n          });\n\n          if (isUpdateSelection) {\n            var itemIndexes = changes.map(function (change) {\n              return change.itemIndexes || [];\n            }).reduce(function (a, b) {\n              return a.concat(b);\n            });\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        push: function (changes) {\n          this.callBase.apply(this, arguments);\n          var removedKeys = changes.filter(function (change) {\n            return \"remove\" === change.type;\n          }).map(function (change) {\n            return change.key;\n          });\n          removedKeys.length && this.getController(\"selection\").deselectRows(removedKeys);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared: function (options) {\n          var dxEvent = options.event;\n\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init: function () {\n          var that = this;\n          that.callBase();\n          that.getController(\"selection\").selectionChanged.add(that._updateSelectAllValue.bind(that));\n        },\n        _updateSelectAllValue: function () {\n          var that = this;\n          var $element = that.element();\n          var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\n\n          if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\n            $editor.dxCheckBox(\"instance\").option(\"value\", that.getController(\"selection\").isSelectAll());\n          }\n        },\n        _handleDataChanged: function (e) {\n          this.callBase(e);\n\n          if (!e || \"refresh\" === e.changeType) {\n            this._updateSelectAllValue();\n          }\n        },\n        _renderSelectAllCheckBox: function ($container, column) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var groupElement = (0, _renderer2.default)(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\n          that.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaSelectAll\"), $container);\n          that.getController(\"editorFactory\").createEditor(groupElement, (0, _extend.extend)({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll()\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue: function (value, e) {\n              var allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent: function ($element) {\n          _events_engine2.default.on($element, _click2.default.name, this.createAction(function (e) {\n            var event = e.event;\n\n            if (!(0, _renderer2.default)(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n              _events_engine2.default.trigger((0, _renderer2.default)(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), _click2.default.name);\n            }\n\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer: function ($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(EDITOR_CELL_CLASS);\n\n            this._attachCheckBoxClickEvent($container);\n\n            this.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaSelectRow\"), $container);\n\n            this._renderSelectCheckBox($container, options);\n          } else {\n            (0, _uiGrid_core.setEmptyText)($container);\n          }\n        },\n        _renderSelectCheckBox: function (container, options) {\n          var groupElement = (0, _renderer2.default)(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\n          this.getController(\"editorFactory\").createEditor(groupElement, (0, _extend.extend)({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue: function (value, e) {\n              var _e$event;\n\n              if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\n                _events_engine2.default.trigger(e.element, _click2.default.name, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent: function ($element) {\n          _events_engine2.default.on($element, _click2.default.name, this.createAction(function (e) {\n            var selectionController = this.getController(\"selection\");\n            var event = e.event;\n            var rowIndex = this.getRowIndex((0, _renderer2.default)(event.currentTarget).closest(\".\" + ROW_CLASS));\n\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n\n              if ((0, _renderer2.default)(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update: function (change) {\n          var that = this;\n          var tableElements = that.getTableElements();\n\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              (0, _iterator.each)(tableElements, function (_, tableElement) {\n                (0, _iterator.each)(change.itemIndexes || [], function (_, index) {\n                  var $row;\n\n                  if (change.items[index]) {\n                    $row = that._getRowElements((0, _renderer2.default)(tableElement)).eq(index);\n\n                    if ($row.length) {\n                      var isSelected = change.items[index].isSelected;\n                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable: function () {\n          var that = this;\n          var selectionMode = that.option(\"selection.mode\");\n          var $table = that.callBase.apply(that, arguments);\n\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !_support2.default.touch) {\n              _events_engine2.default.on($table, (0, _utils.addNamespace)(_hold2.default.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function (e) {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n\n            _events_engine2.default.on($table, \"mousedown selectstart\", that.createAction(function (e) {\n              var event = e.event;\n\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var isSelected = !!row.isSelected;\n\n            if (isSelected) {\n              $row.addClass(ROW_SELECTION_CLASS);\n            }\n\n            this.setAria(\"selected\", isSelected, $row);\n          }\n\n          return $row;\n        },\n        _rowClick: function (e) {\n          var that = this;\n          var dxEvent = e.event;\n          var isSelectionDisabled = (0, _renderer2.default)(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\n\n          if (!that.isClickableElement((0, _renderer2.default)(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\n              if (that.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: dxEvent.ctrlKey || dxEvent.metaKey,\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n\n            that.callBase(e);\n          }\n        },\n        isClickableElement: function ($target) {\n          var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\n          return !!isCommandSelect;\n        },\n        _renderCore: function (change) {\n          this.callBase(change);\n\n          this._updateCheckboxesClass();\n        },\n        _updateCheckboxesClass: function () {\n          var tableElements = this.getTableElements();\n          var selectionController = this.getController(\"selection\");\n          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          (0, _iterator.each)(tableElements, function (_, tableElement) {\n            (0, _renderer2.default)(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.selection.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_events_engine","_events_engine2","_uiData_grid","_uiData_grid2","_uiGrid_core","_type","_iterator","_extend","_support","_support2","_click","_click2","_message","_message2","_utils","_hold","_hold2","_selection","_selection2","_deferred","obj","__esModule","EDITOR_CELL_CLASS","ROW_CLASS","ROW_SELECTION_CLASS","SELECT_CHECKBOX_CLASS","CHECKBOXES_HIDDEN_CLASS","COMMAND_SELECT_CLASS","SELECTION_DISABLED_CLASS","DATA_ROW_CLASS","SHOW_CHECKBOXES_MODE","SELECTION_MODE","processLongTap","that","dxEvent","selectionController","getController","rowsView","getView","$row","default","target","closest","rowIndex","getRowIndex","option","isSelectionWithCheckboxes","stopSelectionWithCheckboxes","startSelectionWithCheckboxes","changeItemSelection","control","exports","SelectionController","Controller","inherit","isSeveralRowsSelected","selectionFilter","keyIndex","store","_dataController","key","isComplexKey","Array","isArray","length","i","selectionCellTemplate","container","options","component","value","isRowSelected","row","renderSelectCheckBoxContainer","selectionHeaderTemplate","column","$cellElement","columnHeadersView","addClass","_renderSelectAllCheckBox","_attachSelectAllCheckBoxClickEvent","init","_selectionMode","_isSelectionWithCheckboxes","_createSelection","_updateSelectColumn","createAction","excludeValidators","_getSelectionConfig","dataController","selectionOptions","selectedKeys","mode","deferred","maxFilterLengthInRequest","keyOf","item","dataFields","dataSource","select","load","Deferred","resolve","plainItems","items","isItemSelected","selected","isSelectableItem","rowType","isNewRow","getItemData","oldData","data","filter","getCombinedFilter","totalCount","onSelectionChanged","_updateSelectedItems","bind","columnsController","isSelectColumnVisible","addCommandColumn","type","command","visible","visibleIndex","dataType","alignment","cssClass","width","cellTemplate","headerCellTemplate","columnOption","_fireSelectionChanged","executeAction","argument","selectedRowKeys","selectionChanged","fire","_updateCheckboxesState","isDeferredMode","selectedItemKeys","removedItemKeys","args","selectionChangedOptions","changedItemIndexes","getChangedItemIndexes","updateItems","changeType","itemIndexes","addedItemKeys","_selectedItemsInternalChange","slice","selectedRowsData","selectedItems","currentSelectedRowKeys","currentDeselectedRowKeys","isDeferredSelection","isDataItem","isSelected","push","callbackNames","optionChanged","callBase","name","oldSelectionMode","selectionMode","selectRows","always","updateColumns","handled","getDataSource","publicMethods","arg","_isOnePageSelectAll","isSelectAll","getSelectAllState","selectAll","deselectAll","clearSelection","refresh","promise","preserve","isDeselect","getSelectedRowKeys","getSelectedItemKeys","keys","deselectRows","selectRowsByIndexes","indexes","prototype","call","arguments","each","getSelectedRowsData","getSelectedItems","itemIndex","getRowIndexDelta","focusedItemIndex","isDefined","_focusedItemIndex","module","defaultOptions","selection","showCheckBoxesMode","allowSelectAll","selectAllMode","controllers","extenders","apply","_loadDataSource","done","_processDataItem","hasSelectColumn","dataItem","values","visibleColumns","d","fail","reject","_handleDataChanged","e","_repaintChangesOnly","_applyChange","change","_this","forEach","index","currentItem","_items","_endUpdateCore","changes","_changes","isUpdateSelection","every","map","reduce","a","b","concat","removedKeys","contextMenu","_contextMenuPrepared","event","originalEvent","views","add","_updateSelectAllValue","$element","element","$editor","find","dxCheckBox","$container","groupElement","appendTo","setAria","format","createEditor","extend","parentType","editorOptions","tabIndex","setValue","preventDefault","on","trigger","currentTarget","children","_attachCheckBoxClickEvent","_renderSelectCheckBox","setEmptyText","lookup","_e$event","shift","shiftKey","_update","tableElements","getTableElements","_","tableElement","_getRowElements","eq","toggleClass","_updateCheckboxesClass","_createTable","$table","touch","addNamespace","stopPropagation","_createRow","_rowClick","isSelectionDisabled","isClickableElement","ctrlKey","metaKey","$target","isCommandSelect","_renderCore","isCheckBoxesHidden"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _events_engine = require(\"../../events/core/events_engine\");\r\nvar _events_engine2 = _interopRequireDefault(_events_engine);\r\nvar _uiData_grid = require(\"../data_grid/ui.data_grid.core\");\r\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\r\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _support = require(\"../../core/utils/support\");\r\nvar _support2 = _interopRequireDefault(_support);\r\nvar _click = require(\"../../events/click\");\r\nvar _click2 = _interopRequireDefault(_click);\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _utils = require(\"../../events/utils\");\r\nvar _hold = require(\"../../events/hold\");\r\nvar _hold2 = _interopRequireDefault(_hold);\r\nvar _selection = require(\"../selection/selection\");\r\nvar _selection2 = _interopRequireDefault(_selection);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar ROW_SELECTION_CLASS = \"dx-selection\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\r\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\r\nvar SELECTION_MODE = \"selection.mode\";\r\nvar processLongTap = function(that, dxEvent) {\r\n    var selectionController = that.getController(\"selection\");\r\n    var rowsView = that.getView(\"rowsView\");\r\n    var $row = (0, _renderer2.default)(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\r\n    var rowIndex = rowsView.getRowIndex($row);\r\n    if (rowIndex < 0) {\r\n        return\r\n    }\r\n    if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n        if (selectionController.isSelectionWithCheckboxes()) {\r\n            selectionController.stopSelectionWithCheckboxes()\r\n        } else {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n    } else {\r\n        if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n        if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.changeItemSelection(rowIndex, {\r\n                control: true\r\n            })\r\n        }\r\n    }\r\n};\r\nexports.SelectionController = _uiData_grid2.default.Controller.inherit(function() {\r\n    var isSeveralRowsSelected = function(that, selectionFilter) {\r\n        var keyIndex = 0;\r\n        var store = that._dataController.store();\r\n        var key = store && store.key();\r\n        var isComplexKey = Array.isArray(key);\r\n        if (!selectionFilter.length) {\r\n            return false\r\n        }\r\n        if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\r\n            for (var i = 0; i < selectionFilter.length; i++) {\r\n                if (Array.isArray(selectionFilter[i])) {\r\n                    if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\r\n                        return true\r\n                    }\r\n                    keyIndex++\r\n                }\r\n            }\r\n            return false\r\n        }\r\n        return key !== selectionFilter[0]\r\n    };\r\n    var selectionCellTemplate = function(container, options) {\r\n        var component = options.component;\r\n        var rowsView = component.getView(\"rowsView\");\r\n        if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\r\n            options.value = component.isRowSelected(options.row.key)\r\n        }\r\n        rowsView.renderSelectCheckBoxContainer((0, _renderer2.default)(container), options)\r\n    };\r\n    var selectionHeaderTemplate = function(container, options) {\r\n        var column = options.column;\r\n        var $cellElement = (0, _renderer2.default)(container);\r\n        var columnHeadersView = options.component.getView(\"columnHeadersView\");\r\n        $cellElement.addClass(EDITOR_CELL_CLASS);\r\n        columnHeadersView._renderSelectAllCheckBox($cellElement, column);\r\n        columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)\r\n    };\r\n    return {\r\n        init: function() {\r\n            this._dataController = this.getController(\"data\");\r\n            this._selectionMode = this.option(SELECTION_MODE);\r\n            this._isSelectionWithCheckboxes = false;\r\n            this._selection = this._createSelection();\r\n            this._updateSelectColumn();\r\n            this.createAction(\"onSelectionChanged\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            })\r\n        },\r\n        _getSelectionConfig: function() {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var selectionOptions = that.option(\"selection\") || {};\r\n            return {\r\n                selectedKeys: that.option(\"selectedRowKeys\"),\r\n                mode: that._selectionMode,\r\n                deferred: selectionOptions.deferred,\r\n                maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\r\n                selectionFilter: that.option(\"selectionFilter\"),\r\n                key: function() {\r\n                    return dataController && dataController.key()\r\n                },\r\n                keyOf: function(item) {\r\n                    return dataController && dataController.keyOf(item)\r\n                },\r\n                dataFields: function() {\r\n                    return dataController.dataSource() && dataController.dataSource().select()\r\n                },\r\n                load: function(options) {\r\n                    return dataController.dataSource() && dataController.dataSource().load(options) || (new _deferred.Deferred).resolve([])\r\n                },\r\n                plainItems: function() {\r\n                    return dataController.items(true)\r\n                },\r\n                isItemSelected: function(item) {\r\n                    return item.selected\r\n                },\r\n                isSelectableItem: function(item) {\r\n                    return item && \"data\" === item.rowType && !item.isNewRow\r\n                },\r\n                getItemData: function(item) {\r\n                    return item && (item.oldData || item.data || item)\r\n                },\r\n                filter: function() {\r\n                    return dataController.getCombinedFilter()\r\n                },\r\n                totalCount: function() {\r\n                    return dataController.totalCount()\r\n                },\r\n                onSelectionChanged: that._updateSelectedItems.bind(this)\r\n            }\r\n        },\r\n        _updateSelectColumn: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var isSelectColumnVisible = this.isSelectColumnVisible();\r\n            columnsController.addCommandColumn({\r\n                type: \"selection\",\r\n                command: \"select\",\r\n                visible: isSelectColumnVisible,\r\n                visibleIndex: -1,\r\n                dataType: \"boolean\",\r\n                alignment: \"center\",\r\n                cssClass: COMMAND_SELECT_CLASS,\r\n                width: \"auto\",\r\n                cellTemplate: selectionCellTemplate,\r\n                headerCellTemplate: selectionHeaderTemplate\r\n            });\r\n            columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible)\r\n        },\r\n        _createSelection: function() {\r\n            var options = this._getSelectionConfig();\r\n            return new _selection2.default(options)\r\n        },\r\n        _fireSelectionChanged: function(options) {\r\n            if (options) {\r\n                this.executeAction(\"onSelectionChanged\", options)\r\n            }\r\n            var argument = this.option(\"selection.deferred\") ? {\r\n                selectionFilter: this.option(\"selectionFilter\")\r\n            } : {\r\n                selectedRowKeys: this.option(\"selectedRowKeys\")\r\n            };\r\n            this.selectionChanged.fire(argument)\r\n        },\r\n        _updateCheckboxesState: function(options) {\r\n            var isDeferredMode = options.isDeferredMode;\r\n            var selectionFilter = options.selectionFilter;\r\n            var selectedItemKeys = options.selectedItemKeys;\r\n            var removedItemKeys = options.removedItemKeys;\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                if (isDeferredMode ? selectionFilter && isSeveralRowsSelected(this, selectionFilter) : selectedItemKeys.length > 1) {\r\n                    this.startSelectionWithCheckboxes()\r\n                } else {\r\n                    if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\r\n                        this.stopSelectionWithCheckboxes()\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _updateSelectedItems: function(args) {\r\n            var that = this;\r\n            var selectionChangedOptions;\r\n            var isDeferredMode = that.option(\"selection.deferred\");\r\n            var selectionFilter = that._selection.selectionFilter();\r\n            var dataController = that._dataController;\r\n            var items = dataController.items();\r\n            if (!items) {\r\n                return\r\n            }\r\n            var isSelectionWithCheckboxes = that.isSelectionWithCheckboxes();\r\n            var changedItemIndexes = that.getChangedItemIndexes(items);\r\n            that._updateCheckboxesState({\r\n                selectedItemKeys: args.selectedItemKeys,\r\n                removedItemKeys: args.removedItemKeys,\r\n                selectionFilter: selectionFilter,\r\n                isDeferredMode: isDeferredMode\r\n            });\r\n            if (changedItemIndexes.length || isSelectionWithCheckboxes !== that.isSelectionWithCheckboxes()) {\r\n                dataController.updateItems({\r\n                    changeType: \"updateSelection\",\r\n                    itemIndexes: changedItemIndexes\r\n                })\r\n            }\r\n            if (isDeferredMode) {\r\n                that.option(\"selectionFilter\", selectionFilter);\r\n                selectionChangedOptions = {}\r\n            } else {\r\n                if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n                    that._selectedItemsInternalChange = true;\r\n                    that.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\r\n                    that._selectedItemsInternalChange = false;\r\n                    selectionChangedOptions = {\r\n                        selectedRowsData: args.selectedItems.slice(0),\r\n                        selectedRowKeys: args.selectedItemKeys.slice(0),\r\n                        currentSelectedRowKeys: args.addedItemKeys.slice(0),\r\n                        currentDeselectedRowKeys: args.removedItemKeys.slice(0)\r\n                    }\r\n                }\r\n            }\r\n            that._fireSelectionChanged(selectionChangedOptions)\r\n        },\r\n        getChangedItemIndexes: function(items) {\r\n            var that = this;\r\n            var itemIndexes = [];\r\n            var isDeferredSelection = this.option(\"selection.deferred\");\r\n            for (var i = 0, length = items.length; i < length; i++) {\r\n                var row = items[i];\r\n                var isItemSelected = that.isRowSelected(isDeferredSelection ? row.data : row.key);\r\n                if (that._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\r\n                    itemIndexes.push(i)\r\n                }\r\n            }\r\n            return itemIndexes\r\n        },\r\n        callbackNames: function() {\r\n            return [\"selectionChanged\"]\r\n        },\r\n        optionChanged: function(args) {\r\n            var that = this;\r\n            that.callBase(args);\r\n            switch (args.name) {\r\n                case \"selection\":\r\n                    var oldSelectionMode = that._selectionMode;\r\n                    that.init();\r\n                    var selectionMode = that._selectionMode;\r\n                    var selectedRowKeys = that.option(\"selectedRowKeys\");\r\n                    if (oldSelectionMode !== selectionMode) {\r\n                        if (\"single\" === selectionMode) {\r\n                            if (selectedRowKeys.length > 1) {\r\n                                selectedRowKeys = [selectedRowKeys[0]]\r\n                            }\r\n                        } else {\r\n                            if (\"multiple\" !== selectionMode) {\r\n                                selectedRowKeys = []\r\n                            }\r\n                        }\r\n                    }\r\n                    that.selectRows(selectedRowKeys).always(function() {\r\n                        that._fireSelectionChanged()\r\n                    });\r\n                    that.getController(\"columns\").updateColumns();\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectionFilter\":\r\n                    this._selection.selectionFilter(args.value);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectedRowKeys\":\r\n                    var value = args.value || [];\r\n                    if (Array.isArray(value) && !that._selectedItemsInternalChange && (that.component.getDataSource() || !value.length)) {\r\n                        that.selectRows(value)\r\n                    }\r\n                    args.handled = true\r\n            }\r\n        },\r\n        publicMethods: function() {\r\n            return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"]\r\n        },\r\n        isRowSelected: function(arg) {\r\n            return this._selection.isItemSelected(arg)\r\n        },\r\n        isSelectColumnVisible: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        _isOnePageSelectAll: function() {\r\n            return \"page\" === this.option(\"selection.selectAllMode\")\r\n        },\r\n        isSelectAll: function() {\r\n            return this._selection.getSelectAllState(this._isOnePageSelectAll())\r\n        },\r\n        selectAll: function() {\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                this.startSelectionWithCheckboxes()\r\n            }\r\n            return this._selection.selectAll(this._isOnePageSelectAll())\r\n        },\r\n        deselectAll: function() {\r\n            return this._selection.deselectAll(this._isOnePageSelectAll())\r\n        },\r\n        clearSelection: function() {\r\n            return this.selectedItemKeys([])\r\n        },\r\n        refresh: function() {\r\n            var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n            if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\r\n                return this.selectedItemKeys(selectedRowKeys)\r\n            }\r\n            return (new _deferred.Deferred).resolve().promise()\r\n        },\r\n        selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {\r\n            return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)\r\n        },\r\n        getSelectedRowKeys: function() {\r\n            return this._selection.getSelectedItemKeys()\r\n        },\r\n        selectRows: function(keys, preserve) {\r\n            return this.selectedItemKeys(keys, preserve)\r\n        },\r\n        deselectRows: function(keys) {\r\n            return this.selectedItemKeys(keys, true, true)\r\n        },\r\n        selectRowsByIndexes: function(indexes) {\r\n            var items = this._dataController.items();\r\n            var keys = [];\r\n            if (!Array.isArray(indexes)) {\r\n                indexes = Array.prototype.slice.call(arguments, 0)\r\n            }(0, _iterator.each)(indexes, function() {\r\n                var item = items[this];\r\n                if (item && \"data\" === item.rowType) {\r\n                    keys.push(item.key)\r\n                }\r\n            });\r\n            return this.selectRows(keys)\r\n        },\r\n        getSelectedRowsData: function() {\r\n            return this._selection.getSelectedItems()\r\n        },\r\n        changeItemSelection: function(itemIndex, keys) {\r\n            keys = keys || {};\r\n            if (this.isSelectionWithCheckboxes()) {\r\n                keys.control = true\r\n            }\r\n            return this._selection.changeItemSelection(this._dataController.getRowIndexDelta() + itemIndex, keys)\r\n        },\r\n        focusedItemIndex: function(itemIndex) {\r\n            var that = this;\r\n            if ((0, _type.isDefined)(itemIndex)) {\r\n                that._selection._focusedItemIndex = itemIndex\r\n            } else {\r\n                return that._selection._focusedItemIndex\r\n            }\r\n        },\r\n        isSelectionWithCheckboxes: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        startSelectionWithCheckboxes: function() {\r\n            var that = this;\r\n            if (\"multiple\" === that.option(SELECTION_MODE) && !that.isSelectionWithCheckboxes()) {\r\n                that._isSelectionWithCheckboxes = true;\r\n                that._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        stopSelectionWithCheckboxes: function() {\r\n            var that = this;\r\n            if (that._isSelectionWithCheckboxes) {\r\n                that._isSelectionWithCheckboxes = false;\r\n                that._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}());\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            selection: {\r\n                mode: \"none\",\r\n                showCheckBoxesMode: \"onClick\",\r\n                allowSelectAll: true,\r\n                selectAllMode: \"allPages\",\r\n                maxFilterLengthInRequest: 1500,\r\n                deferred: false\r\n            },\r\n            selectionFilter: [],\r\n            selectedRowKeys: []\r\n        }\r\n    },\r\n    controllers: {\r\n        selection: exports.SelectionController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isDeferredMode = this.option(\"selection.deferred\");\r\n                    this.callBase.apply(this, arguments);\r\n                    if (isDeferredMode) {\r\n                        selectionController._updateCheckboxesState({\r\n                            isDeferredMode: true,\r\n                            selectionFilter: this.option(\"selectionFilter\")\r\n                        })\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    return that.callBase().done(function() {\r\n                        that.getController(\"selection\").refresh()\r\n                    })\r\n                },\r\n                _processDataItem: function(item, options) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var hasSelectColumn = selectionController.isSelectColumnVisible();\r\n                    var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\r\n                    var dataItem = this.callBase.apply(this, arguments);\r\n                    dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\r\n                    if (hasSelectColumn && dataItem.values) {\r\n                        for (var i = 0; i < options.visibleColumns.length; i++) {\r\n                            if (\"select\" === options.visibleColumns[i].command) {\r\n                                dataItem.values[i] = dataItem.isSelected;\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataItem\r\n                },\r\n                refresh: function(options) {\r\n                    var that = this;\r\n                    var d = new _deferred.Deferred;\r\n                    this.callBase.apply(this, arguments).done(function() {\r\n                        if (!options || options.selection) {\r\n                            that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            d.resolve()\r\n                        }\r\n                    }).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\r\n                        this.getController(\"selection\").focusedItemIndex(-1)\r\n                    }\r\n                },\r\n                _applyChange: function(change) {\r\n                    var _this = this;\r\n                    if (change && \"updateSelection\" === change.changeType) {\r\n                        change.items.forEach(function(item, index) {\r\n                            var currentItem = _this._items[index];\r\n                            if (currentItem) {\r\n                                currentItem.isSelected = item.isSelected;\r\n                                currentItem.values = item.values\r\n                            }\r\n                        });\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    var isUpdateSelection = changes.length > 1 && changes.every(function(change) {\r\n                        return \"updateSelection\" === change.changeType\r\n                    });\r\n                    if (isUpdateSelection) {\r\n                        var itemIndexes = changes.map(function(change) {\r\n                            return change.itemIndexes || []\r\n                        }).reduce(function(a, b) {\r\n                            return a.concat(b)\r\n                        });\r\n                        this._changes = [{\r\n                            changeType: \"updateSelection\",\r\n                            itemIndexes: itemIndexes\r\n                        }]\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                push: function(changes) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var removedKeys = changes.filter(function(change) {\r\n                        return \"remove\" === change.type\r\n                    }).map(function(change) {\r\n                        return change.key\r\n                    });\r\n                    removedKeys.length && this.getController(\"selection\").deselectRows(removedKeys)\r\n                }\r\n            },\r\n            contextMenu: {\r\n                _contextMenuPrepared: function(options) {\r\n                    var dxEvent = options.event;\r\n                    if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\r\n                        return\r\n                    }\r\n                    processLongTap(this, dxEvent)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                init: function() {\r\n                    var that = this;\r\n                    that.callBase();\r\n                    that.getController(\"selection\").selectionChanged.add(that._updateSelectAllValue.bind(that))\r\n                },\r\n                _updateSelectAllValue: function() {\r\n                    var that = this;\r\n                    var $element = that.element();\r\n                    var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\r\n                    if ($element && $editor.length && \"multiple\" === that.option(\"selection.mode\")) {\r\n                        $editor.dxCheckBox(\"instance\").option(\"value\", that.getController(\"selection\").isSelectAll())\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (!e || \"refresh\" === e.changeType) {\r\n                        this._updateSelectAllValue()\r\n                    }\r\n                },\r\n                _renderSelectAllCheckBox: function($container, column) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var groupElement = (0, _renderer2.default)(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\r\n                    that.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaSelectAll\"), $container);\r\n                    that.getController(\"editorFactory\").createEditor(groupElement, (0, _extend.extend)({}, column, {\r\n                        parentType: \"headerRow\",\r\n                        dataType: \"boolean\",\r\n                        value: selectionController.isSelectAll(),\r\n                        editorOptions: {\r\n                            visible: that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll()\r\n                        },\r\n                        tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\r\n                        setValue: function(value, e) {\r\n                            var allowSelectAll = that.option(\"selection.allowSelectAll\");\r\n                            e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\r\n                            if (!e.event || selectionController.isSelectAll() === value) {\r\n                                return\r\n                            }\r\n                            if (e.value && !allowSelectAll) {\r\n                                e.component.option(\"value\", false)\r\n                            } else {\r\n                                e.value ? selectionController.selectAll() : selectionController.deselectAll()\r\n                            }\r\n                            e.event.preventDefault()\r\n                        }\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachSelectAllCheckBoxClickEvent: function($element) {\r\n                    _events_engine2.default.on($element, _click2.default.name, this.createAction(function(e) {\r\n                        var event = e.event;\r\n                        if (!(0, _renderer2.default)(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                            _events_engine2.default.trigger((0, _renderer2.default)(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), _click2.default.name)\r\n                        }\r\n                        event.preventDefault()\r\n                    }))\r\n                }\r\n            },\r\n            rowsView: {\r\n                renderSelectCheckBoxContainer: function($container, options) {\r\n                    if (\"data\" === options.rowType && !options.row.isNewRow) {\r\n                        $container.addClass(EDITOR_CELL_CLASS);\r\n                        this._attachCheckBoxClickEvent($container);\r\n                        this.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaSelectRow\"), $container);\r\n                        this._renderSelectCheckBox($container, options)\r\n                    } else {\r\n                        (0, _uiGrid_core.setEmptyText)($container)\r\n                    }\r\n                },\r\n                _renderSelectCheckBox: function(container, options) {\r\n                    var groupElement = (0, _renderer2.default)(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\r\n                    this.getController(\"editorFactory\").createEditor(groupElement, (0, _extend.extend)({}, options.column, {\r\n                        parentType: \"dataRow\",\r\n                        dataType: \"boolean\",\r\n                        lookup: null,\r\n                        value: options.value,\r\n                        setValue: function(value, e) {\r\n                            var _e$event;\r\n                            if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\r\n                                _events_engine2.default.trigger(e.element, _click2.default.name, e)\r\n                            }\r\n                        },\r\n                        row: options.row\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachCheckBoxClickEvent: function($element) {\r\n                    _events_engine2.default.on($element, _click2.default.name, this.createAction(function(e) {\r\n                        var selectionController = this.getController(\"selection\");\r\n                        var event = e.event;\r\n                        var rowIndex = this.getRowIndex((0, _renderer2.default)(event.currentTarget).closest(\".\" + ROW_CLASS));\r\n                        if (rowIndex >= 0) {\r\n                            selectionController.startSelectionWithCheckboxes();\r\n                            selectionController.changeItemSelection(rowIndex, {\r\n                                shift: event.shiftKey\r\n                            });\r\n                            if ((0, _renderer2.default)(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                                this.getController(\"data\").updateItems({\r\n                                    changeType: \"updateSelection\",\r\n                                    itemIndexes: [rowIndex]\r\n                                })\r\n                            }\r\n                        }\r\n                    }))\r\n                },\r\n                _update: function(change) {\r\n                    var that = this;\r\n                    var tableElements = that.getTableElements();\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        if (tableElements.length > 0) {\r\n                            (0, _iterator.each)(tableElements, function(_, tableElement) {\r\n                                (0, _iterator.each)(change.itemIndexes || [], function(_, index) {\r\n                                    var $row;\r\n                                    if (change.items[index]) {\r\n                                        $row = that._getRowElements((0, _renderer2.default)(tableElement)).eq(index);\r\n                                        if ($row.length) {\r\n                                            var isSelected = change.items[index].isSelected;\r\n                                            $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\r\n                                            that.setAria(\"selected\", isSelected, $row)\r\n                                        }\r\n                                    }\r\n                                })\r\n                            });\r\n                            that._updateCheckboxesClass()\r\n                        }\r\n                    } else {\r\n                        that.callBase(change)\r\n                    }\r\n                },\r\n                _createTable: function() {\r\n                    var that = this;\r\n                    var selectionMode = that.option(\"selection.mode\");\r\n                    var $table = that.callBase.apply(that, arguments);\r\n                    if (\"none\" !== selectionMode) {\r\n                        if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !_support2.default.touch) {\r\n                            _events_engine2.default.on($table, (0, _utils.addNamespace)(_hold2.default.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function(e) {\r\n                                processLongTap(that.component, e.event);\r\n                                e.event.stopPropagation()\r\n                            }))\r\n                        }\r\n                        _events_engine2.default.on($table, \"mousedown selectstart\", that.createAction(function(e) {\r\n                            var event = e.event;\r\n                            if (event.shiftKey) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var isSelected = !!row.isSelected;\r\n                        if (isSelected) {\r\n                            $row.addClass(ROW_SELECTION_CLASS)\r\n                        }\r\n                        this.setAria(\"selected\", isSelected, $row)\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowClick: function(e) {\r\n                    var that = this;\r\n                    var dxEvent = e.event;\r\n                    var isSelectionDisabled = (0, _renderer2.default)(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\r\n                    if (!that.isClickableElement((0, _renderer2.default)(dxEvent.target))) {\r\n                        if (!isSelectionDisabled && (\"multiple\" !== that.option(SELECTION_MODE) || \"always\" !== that.option(SHOW_CHECKBOXES_MODE))) {\r\n                            if (that.getController(\"selection\").changeItemSelection(e.rowIndex, {\r\n                                    control: dxEvent.ctrlKey || dxEvent.metaKey,\r\n                                    shift: dxEvent.shiftKey\r\n                                })) {\r\n                                dxEvent.preventDefault();\r\n                                e.handled = true\r\n                            }\r\n                        }\r\n                        that.callBase(e)\r\n                    }\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\r\n                    return !!isCommandSelect\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateCheckboxesClass()\r\n                },\r\n                _updateCheckboxesClass: function() {\r\n                    var tableElements = this.getTableElements();\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\r\n                    (0, _iterator.each)(tableElements, function(_, tableElement) {\r\n                        (0, _renderer2.default)(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}