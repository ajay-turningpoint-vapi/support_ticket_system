{"ast":null,"code":"// src/utils/axiosConfig.js\n\nimport axios from \"axios\";\nimport { ip } from \"../services\";\n\n// Create an instance of axios\nconst axiosInstance = axios.create({\n  baseURL: `${ip}` // Replace with your API base URL\n});\n\n// Add a request interceptor to include the token in every request\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"usertoken\"); // Get the token from localStorage\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","ip","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject"],"sources":["D:/Turningpoint/SupportTicketSystem-master/frontend/src/utils/axiosConfig.js"],"sourcesContent":["// src/utils/axiosConfig.js\r\n\r\nimport axios from \"axios\";\r\nimport { ip } from \"../services\";\r\n\r\n// Create an instance of axios\r\nconst axiosInstance = axios.create({\r\n  baseURL: `${ip}`, // Replace with your API base URL\r\n});\r\n\r\n// Add a request interceptor to include the token in every request\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"usertoken\"); // Get the token from localStorage\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,QAAQ,aAAa;;AAEhC;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAE,GAAGH,EAAE,EAAE,CAAE;AACpB,CAAC,CAAC;;AAEF;AACAC,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}