{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _selectors = require(\"../widget/selectors\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _button = require(\"../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _validation_engine = require(\"../validation_engine\");\n\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\n\nvar _validator = require(\"../validator\");\n\nvar _validator2 = _interopRequireDefault(_validator);\n\nvar _tooltip = require(\"../tooltip\");\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _overlay = require(\"../overlay\");\n\nvar _overlay2 = _interopRequireDefault(_overlay);\n\nvar _themes = require(\"../themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _load_indicator = require(\"../load_indicator\");\n\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\n\nvar _string = require(\"../../core/utils/string\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar INVALIDATE_CLASS = \"invalid\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar CELL_HIGHLIGHT_OUTLINE = \"dx-highlight-outline\";\nvar VALIDATOR_CLASS = \"validator\";\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar PADDING_BETWEEN_TOOLTIPS = 2;\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\nvar COMMAND_TRANSPARENT = \"transparent\";\nvar VALIDATION_STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\nvar VALIDATION_CANCELLED = \"cancel\";\n\nvar validationResultIsValid = function (result) {\n  return (0, _type.isDefined)(result) && result !== VALIDATION_CANCELLED;\n};\n\nvar cellValueShouldBeValidated = function (value, rowOptions) {\n  return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow;\n};\n\nvar rowIsValidated = function (editData) {\n  return !!editData && !!editData.validated;\n};\n\nvar ValidatingController = _uiGrid_core2.default.Controller.inherit(function () {\n  return {\n    init: function () {\n      this._editingController = this.getController(\"editing\");\n      this.createAction(\"onRowValidating\");\n    },\n    _getBrokenRules: function (editData, validationResults) {\n      var brokenRules;\n\n      if (validationResults) {\n        brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];\n      } else {\n        brokenRules = editData.brokenRules || [];\n      }\n\n      return brokenRules;\n    },\n    _rowValidating: function (editData, validationResults) {\n      var deferred = new _deferred.Deferred();\n\n      var brokenRules = this._getBrokenRules(editData, validationResults);\n\n      var isValid = validationResults ? validationResults.isValid : editData.isValid;\n      var parameters = {\n        brokenRules: brokenRules,\n        isValid: isValid,\n        key: editData.key,\n        newData: editData.data,\n        oldData: editData.oldData,\n        promise: null,\n        errorText: this.getHiddenValidatorsErrorText(brokenRules)\n      };\n      this.executeAction(\"onRowValidating\", parameters);\n      (0, _deferred.when)(parameters.promise).always(function () {\n        editData.isValid = parameters.isValid;\n        editData.errorText = parameters.errorText;\n        deferred.resolve(parameters);\n      });\n      return deferred.promise();\n    },\n    getHiddenValidatorsErrorText: function (brokenRules) {\n      var brokenRulesMessages = [];\n      (0, _iterator.each)(brokenRules, function (_, brokenRule) {\n        var column = brokenRule.column;\n        var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\n        var isVisibleColumn = column && column.visible;\n\n        if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\n          brokenRulesMessages.push(brokenRule.message);\n        }\n      });\n      return brokenRulesMessages.join(\", \");\n    },\n    validate: function (isFull) {\n      var _this = this;\n\n      var isValid = true;\n      var editingController = this._editingController;\n      var deferred = new _deferred.Deferred();\n      var completeList = [];\n      var editMode = editingController.getEditMode();\n      isFull = isFull || editMode === EDIT_MODE_ROW;\n\n      if (this._isValidationInProgress) {\n        return deferred.resolve(false).promise();\n      }\n\n      this._isValidationInProgress = true;\n\n      if (isFull) {\n        editingController.addDeferred(deferred);\n        (0, _iterator.each)(editingController._editData, function (index, editData) {\n          if (editData.type && \"remove\" !== editData.type) {\n            var validationResult = _this.validateGroup(editData);\n\n            completeList.push(validationResult);\n            validationResult.done(function (validationResult) {\n              editData.validated = true;\n              isValid = isValid && validationResult.isValid;\n            });\n          }\n        });\n      } else {\n        if (this._currentCellValidator) {\n          var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n          completeList.push(validationResult);\n          validationResult.done(function (validationResult) {\n            isValid = validationResult.isValid;\n          });\n        }\n      }\n\n      _deferred.when.apply(void 0, completeList).done(function () {\n        _this._isValidationInProgress = false;\n        deferred.resolve(isValid);\n      });\n\n      return deferred.promise();\n    },\n    validateGroup: function validateGroup(editData) {\n      var _this2 = this;\n\n      var result = new _deferred.Deferred();\n\n      var validateGroup = _validation_engine2.default.getGroupConfig(editData);\n\n      var validationResult;\n\n      if (validateGroup && validateGroup.validators.length) {\n        this.resetRowValidationResults(editData);\n        validationResult = _validation_engine2.default.validateGroup(editData);\n      }\n\n      (0, _deferred.when)(validationResult && validationResult.complete || validationResult).done(function (validationResult) {\n        (0, _deferred.when)(_this2._rowValidating(editData, validationResult)).done(result.resolve);\n      });\n      return result.promise();\n    },\n    isRowDataModified: function (editData) {\n      return !(0, _type.isEmptyObject)(editData.data);\n    },\n    updateEditData: function (editData) {\n      var editMode = this._editingController.getEditMode();\n\n      if (FORM_BASED_MODES.indexOf(editMode) === -1) {\n        if (editData.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(editData)) {\n          editData.isValid = true;\n          return;\n        }\n\n        this.setDisableApplyValidationResults(true);\n\n        if (_validation_engine2.default.getGroupConfig(editData)) {\n          var validationResult = _validation_engine2.default.validateGroup(editData);\n\n          (0, _deferred.when)(validationResult.complete || validationResult).done(function (validationResult) {\n            editData.isValid = validationResult.isValid;\n            editData.brokenRules = validationResult.brokenRules;\n          });\n        } else {\n          if (!editData.brokenRules || !editData.brokenRules.length) {\n            editData.isValid = true;\n          }\n        }\n\n        this.setDisableApplyValidationResults(false);\n      } else {\n        editData.isValid = true;\n      }\n    },\n    setValidator: function (validator) {\n      this._currentCellValidator = validator;\n    },\n    renderCellPendingIndicator: function ($container) {\n      var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n      if (!$indicator.length) {\n        var $indicatorContainer = $container.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\n\n        if (!$indicatorContainer.length) {\n          $indicatorContainer = $container;\n        }\n\n        $indicator = (0, _renderer2.default)(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\n\n        this._createComponent($indicator, _load_indicator2.default);\n\n        $container.addClass(VALIDATION_PENDING_CLASS);\n      }\n    },\n    disposeCellPendingIndicator: function ($container) {\n      var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n      if ($indicator.length) {\n        var indicator = _load_indicator2.default.getInstance($indicator);\n\n        if (indicator) {\n          indicator.dispose();\n          indicator.$element().remove();\n        }\n\n        $container.removeClass(VALIDATION_PENDING_CLASS);\n      }\n    },\n    validationStatusChanged: function (result) {\n      var validator = result.validator;\n      var editData = validator.option(\"validationGroup\");\n      var column = validator.option(\"dataGetter\")().column;\n      this.updateCellValidationResult({\n        rowKey: editData.key,\n        columnIndex: column.index,\n        validationResult: result\n      });\n    },\n    validatorInitialized: function (arg) {\n      arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\n      arg.component.on(\"validated\", this.validationStatusChanged.bind(this));\n    },\n    validatorDisposing: function (arg) {\n      var validator = arg.component;\n      var editData = validator.option(\"validationGroup\");\n      var column = validator.option(\"dataGetter\")().column;\n      var result = this.getCellValidationResult({\n        rowKey: editData.key,\n        columnIndex: column.index\n      });\n\n      if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\n        this.cancelCellValidationResult({\n          editData: editData,\n          columnIndex: column.index\n        });\n      }\n    },\n    applyValidationResult: function ($container, result) {\n      var validator = result.validator;\n      var editData = validator.option(\"validationGroup\");\n      var column = validator.option(\"dataGetter\")().column;\n      result.brokenRules && result.brokenRules.forEach(function (rule) {\n        rule.columnIndex = column.index;\n        rule.column = column;\n      });\n\n      if ($container) {\n        var validationResult = this.getCellValidationResult({\n          rowKey: editData.key,\n          columnIndex: column.index\n        });\n        var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\n\n        if (this._disableApplyValidationResults || requestIsDisabled) {\n          return;\n        }\n\n        if (result.status === VALIDATION_STATUS.invalid) {\n          var $focus = $container.find(\":focus\");\n\n          this._editingController.showHighlighting($container, true);\n\n          if (!(0, _selectors.focused)($focus)) {\n            _events_engine2.default.trigger($focus, \"focus\");\n\n            _events_engine2.default.trigger($focus, _pointer2.default.down);\n          }\n        }\n\n        var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\n\n        if (result.status === VALIDATION_STATUS.pending) {\n          this._editingController.showHighlighting($container, true);\n\n          if (editor) {\n            editor.option(\"validationStatus\", VALIDATION_STATUS.pending);\n          } else {\n            this.renderCellPendingIndicator($container);\n          }\n        } else {\n          if (editor) {\n            editor.option(\"validationStatus\", VALIDATION_STATUS.valid);\n          } else {\n            this.disposeCellPendingIndicator($container);\n          }\n        }\n\n        $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid);\n      }\n    },\n    createValidator: function (parameters, $container) {\n      var _this3 = this;\n\n      var editData;\n      var editIndex;\n      var editingController = this._editingController;\n      var column = parameters.column;\n\n      var getValue = function () {\n        var value = column.calculateCellValue(editData.data || {});\n        return void 0 !== value ? value : parameters.value;\n      };\n\n      var showEditorAlways = column.showEditorAlways;\n\n      if ((0, _type.isDefined)(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\n        return;\n      }\n\n      editIndex = editingController.getIndexByKey(parameters.key, editingController._editData);\n\n      if (editIndex < 0) {\n        if (!showEditorAlways) {\n          var columnsController = this.getController(\"columns\");\n          var visibleColumns = columnsController && columnsController.getVisibleColumns() || [];\n          showEditorAlways = visibleColumns.some(function (column) {\n            return column.showEditorAlways;\n          });\n        }\n\n        if (showEditorAlways && editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\n          row: parameters.row\n        })) {\n          editIndex = editingController._addEditData({\n            key: parameters.key,\n            oldData: parameters.data\n          });\n        }\n      }\n\n      if (editIndex >= 0) {\n        if ($container && !$container.length) {\n          _ui2.default.log(\"E1050\");\n\n          return;\n        }\n\n        editData = editingController._editData[editIndex];\n        var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n        $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\n        var validator = new _validator2.default($container || (0, _renderer2.default)(\"<div>\"), {\n          name: column.caption,\n          validationRules: (0, _extend.extend)(true, [], column.validationRules),\n          validationGroup: editData,\n          adapter: useDefaultValidator ? null : {\n            getValue: getValue,\n            applyValidationResults: function (result) {\n              _this3.applyValidationResult($container, result);\n            }\n          },\n          dataGetter: function () {\n            return {\n              data: (0, _uiGrid_core3.createObjectWithChanges)(editData.oldData, editData.data),\n              column: column\n            };\n          },\n          onInitialized: this.validatorInitialized.bind(this),\n          onDisposing: this.validatorDisposing.bind(this)\n        });\n\n        if (useDefaultValidator) {\n          var adapter = validator.option(\"adapter\");\n\n          if (adapter) {\n            adapter.getValue = getValue;\n            adapter.validationRequestsCallbacks.empty();\n          }\n        }\n\n        return validator;\n      }\n    },\n    setDisableApplyValidationResults: function (flag) {\n      this._disableApplyValidationResults = flag;\n    },\n    getDisableApplyValidationResults: function () {\n      return this._disableApplyValidationResults;\n    },\n    isCurrentValidatorProcessing: function (_ref) {\n      var rowKey = _ref.rowKey,\n          columnIndex = _ref.columnIndex;\n      return this._currentCellValidator && this._currentCellValidator.option(\"validationGroup\").key === rowKey && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex;\n    },\n    validateCell: function (validator) {\n      var cellParams = {\n        rowKey: validator.option(\"validationGroup\").key,\n        columnIndex: validator.option(\"dataGetter\")().column.index\n      };\n      var validationResult = this.getCellValidationResult(cellParams);\n      var stateRestored = validationResultIsValid(validationResult);\n\n      if (!stateRestored) {\n        validationResult = validator.validate();\n      }\n\n      var deferred = new _deferred.Deferred();\n      var adapter = validator.option(\"adapter\");\n\n      if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\n        this.updateCellValidationResult(cellParams);\n        adapter.applyValidationResults(validationResult);\n      }\n\n      (0, _deferred.when)(validationResult.complete || validationResult).done(function (validationResult) {\n        stateRestored && adapter.applyValidationResults(validationResult);\n        deferred.resolve(validationResult);\n      });\n      return deferred.promise();\n    },\n    updateCellValidationResult: function (_ref2) {\n      var rowKey = _ref2.rowKey,\n          columnIndex = _ref2.columnIndex,\n          validationResult = _ref2.validationResult;\n\n      var editData = this._editingController.getEditDataByKey(rowKey);\n\n      if (!editData) {\n        return;\n      }\n\n      if (!editData.validationResults) {\n        editData.validationResults = {};\n      }\n\n      var result;\n\n      if (validationResult) {\n        result = (0, _extend.extend)({}, validationResult);\n        editData.validationResults[columnIndex] = result;\n\n        if (validationResult.status === VALIDATION_STATUS.pending) {\n          if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n            result.deferred = new _deferred.Deferred();\n            result.complete.always(function () {\n              result.deferred.resolve();\n            });\n\n            this._editingController.addDeferred(result.deferred);\n          }\n\n          if (this._disableApplyValidationResults) {\n            result.disabledPendingId = validationResult.id;\n            return;\n          }\n        }\n      } else {\n        result = editData.validationResults[columnIndex];\n      }\n\n      if (result && result.disabledPendingId) {\n        delete result.disabledPendingId;\n      }\n    },\n    getCellValidationResult: function (_ref3) {\n      var rowKey = _ref3.rowKey,\n          columnIndex = _ref3.columnIndex;\n\n      var editData = this._editingController.getEditDataByKey(rowKey);\n\n      return editData && editData.validationResults && editData.validationResults[columnIndex];\n    },\n    removeCellValidationResult: function (_ref4) {\n      var editData = _ref4.editData,\n          columnIndex = _ref4.columnIndex;\n\n      if (editData && editData.validationResults) {\n        this.cancelCellValidationResult({\n          editData: editData,\n          columnIndex: columnIndex\n        });\n        delete editData.validationResults[columnIndex];\n      }\n    },\n    cancelCellValidationResult: function (_ref5) {\n      var editData = _ref5.editData,\n          columnIndex = _ref5.columnIndex;\n\n      if (editData && editData.validationResults) {\n        var result = editData.validationResults[columnIndex];\n\n        if (result) {\n          result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\n          editData.validationResults[columnIndex] = VALIDATION_CANCELLED;\n        }\n      }\n    },\n    resetRowValidationResults: function (editData) {\n      if (editData) {\n        editData.validationResults && delete editData.validationResults;\n        delete editData.validated;\n      }\n    },\n    isInvalidCell: function (_ref6) {\n      var rowKey = _ref6.rowKey,\n          columnIndex = _ref6.columnIndex;\n      var result = this.getCellValidationResult({\n        rowKey: rowKey,\n        columnIndex: columnIndex\n      });\n      return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid;\n    },\n    getCellValidator: function (_ref7) {\n      var rowKey = _ref7.rowKey,\n          columnIndex = _ref7.columnIndex;\n\n      var editData = this._editingController.getEditDataByKey(rowKey);\n\n      var groupConfig = editData && _validation_engine2.default.getGroupConfig(editData);\n\n      var validators = groupConfig && groupConfig.validators;\n      return validators && validators.filter(function (v) {\n        var column = v.option(\"dataGetter\")().column;\n        return column ? column.index === columnIndex : false;\n      })[0];\n    },\n    setCellValidationStatus: function (cellOptions) {\n      var validationResult = this.getCellValidationResult({\n        rowKey: cellOptions.key,\n        columnIndex: cellOptions.column.index\n      });\n\n      if ((0, _type.isDefined)(validationResult)) {\n        cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED;\n      } else {\n        delete cellOptions.validationStatus;\n      }\n    }\n  };\n}());\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        texts: {\n          validationCancelChanges: _message2.default.format(\"dxDataGrid-validationCancelChanges\")\n        }\n      }\n    };\n  },\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        _addEditData: function (options, row) {\n          var that = this;\n          var validatingController = that.getController(\"validating\");\n          var editDataIndex = that.callBase(options, row);\n\n          if (editDataIndex >= 0) {\n            var editData = that._editData[editDataIndex];\n            validatingController.updateEditData(editData);\n          }\n\n          return editDataIndex;\n        },\n        _updateRowAndPageIndices: function () {\n          var that = this;\n          var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\n          var rowIndex = startInsertIndex;\n          (0, _iterator.each)(that._editData, function (_, editData) {\n            if (!editData.isValid && editData.pageIndex !== that._pageIndex) {\n              editData.pageIndex = that._pageIndex;\n\n              if (editData.type === EDIT_DATA_INSERT_TYPE) {\n                editData.rowIndex = startInsertIndex;\n              } else {\n                editData.rowIndex = rowIndex;\n              }\n\n              rowIndex++;\n            }\n          });\n        },\n        _needInsertItem: function (editData) {\n          var result = this.callBase.apply(this, arguments);\n\n          if (result && !editData.isValid) {\n            result = editData.key.pageIndex === this._pageIndex;\n          }\n\n          return result;\n        },\n        processItems: function (items, changeType) {\n          var that = this;\n          var i;\n          var editData = that._editData;\n          var dataController = that.getController(\"data\");\n\n          var getIndexByEditData = function (editData, items) {\n            var index = -1;\n            var isInsert = editData.type === EDIT_DATA_INSERT_TYPE;\n            var key = editData.key;\n            (0, _iterator.each)(items, function (i, item) {\n              if ((0, _common.equalByValue)(key, isInsert ? item : dataController.keyOf(item))) {\n                index = i;\n                return false;\n              }\n            });\n            return index;\n          };\n\n          items = that.callBase(items, changeType);\n          var itemsCount = items.length;\n\n          var addInValidItem = function (editData) {\n            var data = {\n              key: editData.key\n            };\n            var index = getIndexByEditData(editData, items);\n\n            if (index >= 0) {\n              return;\n            }\n\n            editData.rowIndex = editData.rowIndex > itemsCount ? editData.rowIndex % itemsCount : editData.rowIndex;\n            var rowIndex = editData.rowIndex;\n            data[INSERT_INDEX] = 1;\n            items.splice(rowIndex, 0, data);\n          };\n\n          if (that.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\n            for (i = 0; i < editData.length; i++) {\n              if (editData[i].type && editData[i].pageIndex === that._pageIndex && editData[i].key.pageIndex !== that._pageIndex) {\n                addInValidItem(editData[i]);\n              }\n            }\n          }\n\n          return items;\n        },\n        processDataItem: function (item) {\n          var that = this;\n          var isInserted = item.data[INSERT_INDEX];\n          var key = isInserted ? item.data.key : item.key;\n          var editMode = that.getEditMode();\n\n          if (editMode === EDIT_MODE_BATCH && isInserted && key) {\n            var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n\n            if (editIndex >= 0) {\n              var editData = that._editData[editIndex];\n\n              if (editData.type !== EDIT_DATA_INSERT_TYPE) {\n                item.data = (0, _extend.extend)(true, {}, editData.oldData, editData.data);\n                item.key = key;\n              }\n            }\n          }\n\n          that.callBase.apply(that, arguments);\n        },\n        _getInvisibleColumns: function (editData) {\n          var _this4 = this;\n\n          var columnsController = this.getController(\"columns\");\n          var hasInvisibleRows;\n          var invisibleColumns = columnsController.getInvisibleColumns();\n\n          if (this.isCellOrBatchEditMode()) {\n            hasInvisibleRows = editData.some(function (rowEditData) {\n              var rowIndex = _this4._dataController.getRowIndexByKey(rowEditData.key);\n\n              return rowIndex < 0;\n            });\n          }\n\n          return hasInvisibleRows ? columnsController.getColumns() : invisibleColumns;\n        },\n        _createInvisibleColumnValidators: function (editData) {\n          var validatingController = this.getController(\"validating\");\n          var columnsController = this.getController(\"columns\");\n\n          var invisibleColumns = this._getInvisibleColumns(editData).filter(function (column) {\n            return !column.isBand;\n          });\n\n          var groupColumns = columnsController.getGroupColumns().filter(function (column) {\n            return !column.showWhenGrouped && invisibleColumns.indexOf(column) === -1;\n          });\n          var invisibleColumnValidators = [];\n          invisibleColumns.push.apply(invisibleColumns, _toConsumableArray(groupColumns));\n\n          if (FORM_BASED_MODES.indexOf(this.getEditMode()) === -1) {\n            (0, _iterator.each)(invisibleColumns, function (_, column) {\n              editData.forEach(function (options) {\n                var data;\n\n                if (options.type === EDIT_DATA_INSERT_TYPE) {\n                  data = options.data;\n                } else {\n                  if (\"update\" === options.type) {\n                    data = (0, _uiGrid_core3.createObjectWithChanges)(options.oldData, options.data);\n                  }\n                }\n\n                if (data) {\n                  var validator = validatingController.createValidator({\n                    column: column,\n                    key: options.key,\n                    value: column.calculateCellValue(data)\n                  });\n\n                  if (validator) {\n                    invisibleColumnValidators.push(validator);\n                  }\n                }\n              });\n            });\n          }\n\n          return function () {\n            invisibleColumnValidators.forEach(function (validator) {\n              validator.dispose();\n            });\n          };\n        },\n        _beforeSaveEditData: function (editData, editIndex) {\n          var _this5 = this;\n\n          var result = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          if (editData) {\n            var isValid = \"remove\" === editData.type || editData.isValid;\n            result = result || !isValid;\n          } else {\n            var disposeValidators = this._createInvisibleColumnValidators(this._editData);\n\n            result = new _deferred.Deferred();\n            this.executeOperation(result, function () {\n              validatingController.validate(true).done(function (isFullValid) {\n                disposeValidators();\n\n                _this5._updateRowAndPageIndices();\n\n                switch (_this5.getEditMode()) {\n                  case EDIT_MODE_CELL:\n                    if (!isFullValid) {\n                      _this5._focusEditingCell();\n                    }\n\n                    break;\n\n                  case EDIT_MODE_BATCH:\n                    if (!isFullValid) {\n                      _this5._editRowIndex = -1;\n                      _this5._editColumnIndex = -1;\n\n                      _this5.getController(\"data\").updateItems();\n                    }\n\n                }\n\n                result.resolve(!isFullValid);\n              });\n            });\n          }\n\n          return result.promise ? result.promise() : result;\n        },\n        _beforeEditCell: function (rowIndex, columnIndex, item) {\n          var result = this.callBase(rowIndex, columnIndex, item);\n\n          if (this.getEditMode() === EDIT_MODE_CELL) {\n            var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\n\n            var validator = $cell && $cell.data(\"dxValidator\");\n            var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\n            var value = validator && validator.option(\"adapter\").getValue();\n\n            if (validator && cellValueShouldBeValidated(value, rowOptions)) {\n              var validatingController = this.getController(\"validating\");\n              var deferred = new _deferred.Deferred();\n              (0, _deferred.when)(validatingController.validateCell(validator), result).done(function (validationResult, result) {\n                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result);\n              });\n              return deferred.promise();\n            } else {\n              if (!validator) {\n                return result;\n              }\n            }\n          }\n        },\n        _afterSaveEditData: function (cancel) {\n          var _this6 = this;\n\n          var $firstErrorRow;\n          (0, _iterator.each)(this._editData, function (_, editData) {\n            var $errorRow = _this6._showErrorRow(editData);\n\n            $firstErrorRow = $firstErrorRow || $errorRow;\n          });\n\n          if ($firstErrorRow) {\n            var scrollable = this._rowsView.getScrollable();\n\n            if (scrollable) {\n              scrollable.update();\n              scrollable.scrollToElement($firstErrorRow);\n            }\n          }\n\n          if (cancel && this.getEditMode() === EDIT_MODE_CELL && this._needUpdateRow()) {\n            var editRowIndex = this.getEditRowIndex();\n\n            this._dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [editRowIndex]\n            });\n\n            this._focusEditingCell();\n          }\n        },\n        _showErrorRow: function (editData) {\n          var $popupContent;\n          var errorHandling = this.getController(\"errorHandling\");\n          var items = this.getController(\"data\").items();\n          var rowIndex = this.getIndexByKey(editData.key, items);\n\n          if (!editData.isValid && editData.errorText && rowIndex >= 0) {\n            $popupContent = this.getPopupContent();\n            return errorHandling && errorHandling.renderErrorRow(editData.errorText, rowIndex, $popupContent);\n          }\n        },\n        updateFieldValue: function (e) {\n          var _this7 = this;\n\n          var validatingController = this.getController(\"validating\");\n          var deferred = new _deferred.Deferred();\n          validatingController.removeCellValidationResult({\n            editData: this.getEditDataByKey(e.key),\n            columnIndex: e.column.index\n          });\n          this.callBase.apply(this, arguments).done(function () {\n            var currentValidator = validatingController.getCellValidator({\n              rowKey: e.key,\n              columnIndex: e.column.index\n            });\n            (0, _deferred.when)(currentValidator && validatingController.validateCell(currentValidator)).done(function (validationResult) {\n              _this7.getController(\"editorFactory\").refocus();\n\n              deferred.resolve(validationResult);\n            });\n          });\n          return deferred.promise();\n        },\n        showHighlighting: function ($cell, skipValidation) {\n          var _this8 = this;\n\n          var isValid = true;\n          var callBase = this.callBase;\n          var deferred = new _deferred.Deferred();\n\n          if (!skipValidation) {\n            var validator = $cell.data(\"dxValidator\");\n\n            if (validator) {\n              (0, _deferred.when)(this.getController(\"validating\").validateCell(validator)).done(function (validationResult) {\n                isValid = validationResult.status === VALIDATION_STATUS.valid;\n\n                if (isValid) {\n                  callBase.call(_this8, $cell);\n                }\n\n                deferred.resolve();\n              });\n              return deferred.promise();\n            }\n          }\n\n          if (isValid) {\n            callBase.call(this, $cell);\n          }\n\n          return deferred.resolve().promise();\n        },\n        highlightDataCell: function ($cell, parameters) {\n          var isEditableCell = !!parameters.setValue;\n          var cellModified = this.isCellModified(parameters);\n          var validatingController = this.getController(\"validating\");\n\n          if (!cellModified && isEditableCell) {\n            validatingController.setCellValidationStatus(parameters);\n            var isValidated = (0, _type.isDefined)(parameters.validationStatus);\n            var skipValidation = parameters.row.isNewRow || !isValidated;\n            (0, _deferred.when)(this.showHighlighting($cell, skipValidation)).done(function () {\n              validatingController.setCellValidationStatus(parameters);\n            });\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        getEditDataByKey: function (key) {\n          return this._editData[(0, _uiGrid_core3.getIndexByKey)(key, this._editData)];\n        },\n        isCellModified: function (parameters) {\n          var cellModified = this.callBase(parameters);\n          var editData = this.getEditDataByKey(parameters.key);\n          var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\n            rowKey: parameters.key,\n            columnIndex: parameters.column.index\n          });\n          return cellModified || rowIsValidated(editData) && isCellInvalid;\n        }\n      },\n      editorFactory: function () {\n        var getWidthOfVisibleCells = function (that, element) {\n          var rowIndex = (0, _renderer2.default)(element).closest(\"tr\").index();\n          var $cellElements = (0, _renderer2.default)(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\n          return that._rowsView._getWidths($cellElements).reduce(function (w1, w2) {\n            return w1 + w2;\n          }, 0);\n        };\n\n        var getBoundaryNonFixedColumnsInfo = function (fixedColumns) {\n          var firstNonFixedColumnIndex;\n          var lastNonFixedColumnIndex;\n          fixedColumns.some(function (column, index) {\n            if (column.command === COMMAND_TRANSPARENT) {\n              firstNonFixedColumnIndex = 0 === index ? -1 : index;\n              lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n              return true;\n            }\n          });\n          return {\n            startColumnIndex: firstNonFixedColumnIndex,\n            endColumnIndex: lastNonFixedColumnIndex\n          };\n        };\n\n        return {\n          _showRevertButton: function ($container, $targetElement) {\n            var _this9 = this;\n\n            if (!$targetElement || !$targetElement.length) {\n              return;\n            }\n\n            var $tooltipElement = $container.find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n            $tooltipElement && $tooltipElement.remove();\n            $tooltipElement = (0, _renderer2.default)(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\n            var tooltipOptions = {\n              animation: null,\n              visible: true,\n              target: $targetElement,\n              container: $container,\n              closeOnOutsideClick: false,\n              closeOnTargetScroll: false,\n              contentTemplate: function () {\n                var $buttonElement = (0, _renderer2.default)(\"<div>\").addClass(REVERT_BUTTON_CLASS);\n                var buttonOptions = {\n                  icon: \"revert\",\n                  hint: _this9.option(\"editing.texts.validationCancelChanges\"),\n                  onClick: function () {\n                    _this9._editingController.cancelEditData();\n                  }\n                };\n                return new _button2.default($buttonElement, buttonOptions).$element();\n              },\n              position: {\n                my: \"left top\",\n                at: \"right top\",\n                of: $targetElement,\n                offset: \"1 0\",\n                collision: \"flip\",\n                boundary: this._rowsView.element()\n              },\n              onPositioned: this._positionedHandler.bind(this)\n            };\n            return new _tooltip2.default($tooltipElement, tooltipOptions);\n          },\n          _hideFixedGroupCell: function ($cell, overlayOptions) {\n            var $nextFixedRowElement;\n            var $groupCellElement;\n\n            var isFixedColumns = this._rowsView.isFixedColumns();\n\n            var isFormEditMode = this._editingController.isFormEditMode();\n\n            if (isFixedColumns && !isFormEditMode) {\n              var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n\n              if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n                $nextFixedRowElement = (0, _renderer2.default)(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n                $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\n\n                if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n                  $groupCellElement.css(\"visibility\", \"hidden\");\n\n                  overlayOptions.onDisposing = function () {\n                    $groupCellElement.css(\"visibility\", \"\");\n                  };\n                }\n              }\n            }\n          },\n          _positionedHandler: function (e, isOverlayVisible) {\n            if (!e.component.__skipPositionProcessing) {\n              var isRevertButton = (0, _renderer2.default)(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n\n              var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\n\n              var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n\n              e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n\n              if (normalizedPosition) {\n                e.component.option(normalizedPosition);\n              } else {\n                if (needRepaint) {\n                  e.component.repaint();\n                }\n              }\n            }\n          },\n          _showValidationMessage: function ($cell, messages, alignment, revertTooltip) {\n            var _this10 = this;\n\n            var $highlightContainer = $cell.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\n\n            var isMaterial = _themes2.default.isMaterial();\n\n            var overlayTarget = $highlightContainer.length && !isMaterial ? $highlightContainer : $cell;\n            var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\n            var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\n            var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\n            var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\n            var errorMessageText = \"\";\n            messages && messages.forEach(function (message) {\n              errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + (0, _string.encodeHtml)(message);\n            });\n            var $overlayElement = (0, _renderer2.default)(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).html(errorMessageText).appendTo($cell);\n            var overlayOptions = {\n              target: overlayTarget,\n              container: $cell,\n              shading: false,\n              width: \"auto\",\n              height: \"auto\",\n              visible: true,\n              animation: false,\n              propagateOutsideClick: true,\n              closeOnOutsideClick: false,\n              closeOnTargetScroll: false,\n              position: {\n                collision: \"flip\",\n                boundary: this._rowsView.element(),\n                boundaryOffset: \"0 0\",\n                my: myPosition,\n                at: atPosition\n              },\n              onPositioned: function (e) {\n                _this10._positionedHandler(e, isOverlayVisible);\n\n                _this10._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell);\n              }\n            };\n\n            this._hideFixedGroupCell($cell, overlayOptions);\n\n            new _overlay2.default($overlayElement, overlayOptions);\n          },\n          _normalizeValidationMessagePositionAndMaxWidth: function (options, isRevertButton, isOverlayVisible) {\n            var fixedColumns = this._columnsController.getFixedColumns();\n\n            if (!fixedColumns || !fixedColumns.length) {\n              return;\n            }\n\n            var position;\n            var visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element);\n            var $overlayContentElement = isRevertButton ? options.component.overlayContent() : options.component.$content();\n            var validationMessageWidth = $overlayContentElement.outerWidth(true);\n            var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\n\n            var columnIndex = this._rowsView.getCellIndex((0, _renderer2.default)(options.element).closest(\"td\"));\n\n            var boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\n\n            if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n              position = {\n                collision: \"none flip\",\n                my: \"top left\",\n                at: isOverlayVisible ? \"top right\" : \"bottom left\"\n              };\n            } else {\n              if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n                position = {\n                  collision: \"none flip\",\n                  my: \"top right\",\n                  at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n                };\n\n                if (isRevertButton) {\n                  position.offset = \"-1 0\";\n                }\n              }\n            }\n\n            return position && {\n              position: position,\n              maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n            };\n          },\n          _shiftValidationMessageIfNeed: function ($content, $revertContent, $cell) {\n            if (!$revertContent) {\n              return;\n            }\n\n            var contentOffset = $content.offset();\n            var revertContentOffset = $revertContent.offset();\n\n            if (contentOffset.top === revertContentOffset.top && contentOffset.left + $content.width() > revertContentOffset.left) {\n              var left = $revertContent.width() + PADDING_BETWEEN_TOOLTIPS;\n              $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n            }\n          },\n          _getTooltipsSelector: function () {\n            var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\n            var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n            return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass;\n          },\n          init: function () {\n            this.callBase();\n            this._editingController = this.getController(\"editing\");\n            this._columnsController = this.getController(\"columns\");\n            this._rowsView = this.getView(\"rowsView\");\n          },\n          loseFocus: function (skipValidator) {\n            if (!skipValidator) {\n              this.getController(\"validating\").setValidator(null);\n            }\n\n            this.callBase();\n          },\n          updateCellState: function ($element, validationResult, hideBorder) {\n            var $focus = $element && $element.closest(this._getFocusCellSelector());\n            var $cell = $focus && $focus.is(\"td\") ? $focus : null;\n            var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n            var editData = rowOptions ? this.getController(\"editing\").getEditDataByKey(rowOptions.key) : null;\n            var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\n            var revertTooltip;\n\n            if (validationResult && validationResult.status === VALIDATION_STATUS.invalid || editData && \"update\" === editData.type && !this._editingController.isSaving()) {\n              if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n                revertTooltip = this._showRevertButton($focus, $cell ? $focus.find(\".\" + CELL_HIGHLIGHT_OUTLINE).first() : $focus);\n              }\n            }\n\n            var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\n\n            if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\n              var errorMessages = [];\n              validationResult.brokenRules.forEach(function (rule) {\n                errorMessages.push(rule.message);\n              });\n\n              this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip);\n            }\n\n            !hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();\n          },\n          focus: function ($element, hideBorder) {\n            var _this11 = this;\n\n            var $focus = $element && $element.closest(this._getFocusCellSelector());\n            var callBase = this.callBase;\n            var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\n            var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n            var editingController = this.getController(\"editing\");\n            var editData = rowOptions ? editingController.getEditDataByKey(rowOptions.key) : null;\n            var validationResult;\n            var $tooltips = $focus && $focus.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\n            var $cell = $focus && $focus.is(\"td\") ? $focus : null;\n            var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\n            var validatingController = this.getController(\"validating\");\n\n            if (!arguments.length) {\n              return this.callBase();\n            }\n\n            $tooltips && $tooltips.remove();\n\n            if (validator) {\n              validatingController.setValidator(validator);\n              var value = validator.option(\"adapter\").getValue();\n\n              if (cellValueShouldBeValidated(value, rowOptions) || rowIsValidated(editData)) {\n                editingController.waitForDeferredOperations().done(function () {\n                  (0, _deferred.when)(validatingController.validateCell(validator)).done(function (result) {\n                    validationResult = result;\n\n                    if (editData && column && !validatingController.isCurrentValidatorProcessing({\n                      rowKey: editData.key,\n                      columnIndex: column.index\n                    })) {\n                      return;\n                    }\n\n                    if (validationResult.status === VALIDATION_STATUS.invalid) {\n                      hideBorder = true;\n                    }\n\n                    _this11.updateCellState($element, validationResult, hideBorder);\n\n                    callBase.call(_this11, $element, hideBorder);\n                  });\n                });\n                return this.callBase($element, hideBorder);\n              }\n            }\n\n            this.updateCellState($element, validationResult, hideBorder);\n            return this.callBase($element, hideBorder);\n          },\n          getEditorInstance: function ($container) {\n            var $editor = $container.find(\".dx-texteditor\").eq(0);\n            return (0, _uiGrid_core3.getWidgetInstance)($editor);\n          }\n        };\n      }(),\n      data: {\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var cell = oldRow.cells[columnIndex];\n          var oldValidationStatus = cell && cell.validationStatus;\n          var validatingController = this.getController(\"validating\");\n          var validationResult = validatingController.getCellValidationResult({\n            rowKey: oldRow.key,\n            columnIndex: columnIndex\n          });\n          var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\n          var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\n\n          if (oldValidationStatus !== newValidationStatus && rowIsModified) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        updateFreeSpaceRowHeight: function ($table) {\n          var that = this;\n          var $rowElements;\n          var $freeSpaceRowElement;\n          var $freeSpaceRowElements;\n          var $element = that.element();\n          var $tooltipContent = $element && $element.find(\".\" + that.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\n          that.callBase($table);\n\n          if ($tooltipContent && $tooltipContent.length) {\n            $rowElements = that._getRowElements();\n            $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\n\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || $tooltipContent.outerHeight() > $freeSpaceRowElement.outerHeight())) {\n              $freeSpaceRowElements.show();\n              $freeSpaceRowElements.height($tooltipContent.outerHeight());\n              return true;\n            }\n          }\n        },\n        _formItemPrepared: function (cellOptions, $container) {\n          var _this12 = this;\n\n          this.callBase.apply(this, arguments);\n          (0, _common.deferUpdate)(function () {\n            var $editor = $container.find(\".dx-widget\").first();\n            var isEditorDisposed = $editor.length && !$editor.children().length;\n\n            if (!isEditorDisposed) {\n              _this12.getController(\"validating\").createValidator(cellOptions, $editor);\n            }\n          });\n        },\n        _cellPrepared: function ($cell, parameters) {\n          if (!this.getController(\"editing\").isFormEditMode()) {\n            this.getController(\"validating\").createValidator(parameters, $cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ticketSystem/frontend/node_modules/devextreme/ui/grid_core/ui.grid_core.validating.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_events_engine","_events_engine2","_uiGrid_core","_uiGrid_core2","_uiGrid_core3","_common","_iterator","_type","_extend","_selectors","_message","_message2","_button","_button2","_pointer","_pointer2","_validation_engine","_validation_engine2","_validator","_validator2","_tooltip","_tooltip2","_overlay","_overlay2","_themes","_themes2","_ui","_ui2","_deferred","_load_indicator","_load_indicator2","_string","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","INVALIDATE_CLASS","REVERT_TOOLTIP_CLASS","ROWS_VIEW_CLASS","INVALID_MESSAGE_CLASS","WIDGET_INVALID_MESSAGE_CLASS","INVALID_MESSAGE_ALWAYS_CLASS","REVERT_BUTTON_CLASS","CELL_HIGHLIGHT_OUTLINE","VALIDATOR_CLASS","PENDING_INDICATOR_CLASS","VALIDATION_PENDING_CLASS","INSERT_INDEX","PADDING_BETWEEN_TOOLTIPS","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDIT_MODE_POPUP","GROUP_CELL_CLASS","FORM_BASED_MODES","COMMAND_TRANSPARENT","VALIDATION_STATUS","valid","invalid","pending","EDIT_DATA_INSERT_TYPE","VALIDATION_CANCELLED","validationResultIsValid","result","isDefined","cellValueShouldBeValidated","value","rowOptions","isNewRow","rowIsValidated","editData","validated","ValidatingController","default","Controller","inherit","init","_editingController","getController","createAction","_getBrokenRules","validationResults","brokenRules","brokenRule","_rowValidating","deferred","Deferred","isValid","parameters","key","newData","data","oldData","promise","errorText","getHiddenValidatorsErrorText","executeAction","when","always","resolve","brokenRulesMessages","each","_","column","isGroupExpandColumn","groupIndex","showWhenGrouped","isVisibleColumn","visible","validator","$element","parent","push","message","join","validate","isFull","_this","editingController","completeList","editMode","getEditMode","_isValidationInProgress","addDeferred","_editData","index","type","validationResult","validateGroup","done","_currentCellValidator","_findGroup","apply","_this2","getGroupConfig","validators","resetRowValidationResults","complete","isRowDataModified","isEmptyObject","updateEditData","indexOf","setDisableApplyValidationResults","setValidator","renderCellPendingIndicator","$container","$indicator","find","$indicatorContainer","appendTo","addClass","_createComponent","disposeCellPendingIndicator","indicator","getInstance","dispose","remove","removeClass","validationStatusChanged","option","updateCellValidationResult","rowKey","columnIndex","validatorInitialized","arg","component","on","bind","validatorDisposing","getCellValidationResult","status","cancelCellValidationResult","applyValidationResult","forEach","rule","requestIsDisabled","disabledPendingId","id","_disableApplyValidationResults","$focus","showHighlighting","focused","trigger","down","editor","editCellTemplate","getEditorInstance","toggleClass","addWidgetPrefix","createValidator","_this3","editIndex","getValue","calculateCellValue","showEditorAlways","command","validationRules","getIndexByKey","columnsController","visibleColumns","getVisibleColumns","some","isCellOrBatchEditMode","allowUpdating","row","_addEditData","log","useDefaultValidator","hasClass","caption","extend","validationGroup","adapter","applyValidationResults","dataGetter","createObjectWithChanges","onInitialized","onDisposing","validationRequestsCallbacks","empty","flag","getDisableApplyValidationResults","isCurrentValidatorProcessing","_ref","validateCell","cellParams","stateRestored","_ref2","getEditDataByKey","_ref3","removeCellValidationResult","_ref4","_ref5","reject","isInvalidCell","_ref6","getCellValidator","_ref7","groupConfig","filter","v","setCellValidationStatus","cellOptions","validationStatus","module","exports","defaultOptions","editing","texts","validationCancelChanges","format","controllers","validating","extenders","options","that","validatingController","editDataIndex","callBase","_updateRowAndPageIndices","startInsertIndex","getView","getTopVisibleItemIndex","rowIndex","pageIndex","_pageIndex","_needInsertItem","arguments","processItems","items","changeType","dataController","getIndexByEditData","isInsert","item","equalByValue","keyOf","itemsCount","addInValidItem","splice","processDataItem","isInserted","_getInvisibleColumns","_this4","hasInvisibleRows","invisibleColumns","getInvisibleColumns","rowEditData","_dataController","getRowIndexByKey","getColumns","_createInvisibleColumnValidators","isBand","groupColumns","getGroupColumns","invisibleColumnValidators","_beforeSaveEditData","_this5","disposeValidators","executeOperation","isFullValid","_focusEditingCell","_editRowIndex","_editColumnIndex","updateItems","_beforeEditCell","$cell","_rowsView","_getCellElement","closest","_afterSaveEditData","cancel","_this6","$firstErrorRow","$errorRow","_showErrorRow","scrollable","getScrollable","update","scrollToElement","_needUpdateRow","editRowIndex","getEditRowIndex","rowIndices","$popupContent","errorHandling","getPopupContent","renderErrorRow","updateFieldValue","e","_this7","currentValidator","refocus","skipValidation","_this8","highlightDataCell","isEditableCell","setValue","cellModified","isCellModified","isValidated","isCellInvalid","editorFactory","getWidthOfVisibleCells","element","$cellElements","getRowElement","first","children","_getWidths","reduce","w1","w2","getBoundaryNonFixedColumnsInfo","fixedColumns","firstNonFixedColumnIndex","lastNonFixedColumnIndex","colspan","startColumnIndex","endColumnIndex","_showRevertButton","$targetElement","_this9","$tooltipElement","tooltipOptions","animation","target","container","closeOnOutsideClick","closeOnTargetScroll","contentTemplate","$buttonElement","buttonOptions","icon","hint","onClick","cancelEditData","position","my","at","of","offset","collision","boundary","onPositioned","_positionedHandler","_hideFixedGroupCell","overlayOptions","$nextFixedRowElement","$groupCellElement","isFixedColumns","isFormEditMode","nextRowOptions","next","rowType","last","get","style","visibility","css","isOverlayVisible","__skipPositionProcessing","isRevertButton","needRepaint","updateFreeSpaceRowHeight","normalizedPosition","_normalizeValidationMessagePositionAndMaxWidth","repaint","_showValidationMessage","messages","alignment","revertTooltip","_this10","$highlightContainer","isMaterial","overlayTarget","editorPopup","myPosition","atPosition","errorMessageText","encodeHtml","$overlayElement","html","shading","width","height","propagateOutsideClick","boundaryOffset","_shiftValidationMessageIfNeed","$content","_columnsController","getFixedColumns","visibleTableWidth","$overlayContentElement","overlayContent","validationMessageWidth","outerWidth","needMaxWidth","getCellIndex","boundaryNonFixedColumnsInfo","maxWidth","$revertContent","contentOffset","revertContentOffset","top","left","_getTooltipsSelector","invalidMessageClass","revertTooltipClass","loseFocus","skipValidator","updateCellState","hideBorder","_getFocusCellSelector","is","isSaving","showValidationMessage","errorMessages","focus","_this11","eq","$tooltips","waitForDeferredOperations","$editor","getWidgetInstance","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","cell","cells","oldValidationStatus","newValidationStatus","rowIsModified","JSON","stringify","modifiedValues","views","rowsView","$table","$rowElements","$freeSpaceRowElement","$freeSpaceRowElements","$tooltipContent","_getRowElements","_getFreeSpaceRowElements","outerHeight","show","_formItemPrepared","_this12","deferUpdate","isEditorDisposed","_cellPrepared"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _events_engine = require(\"../../events/core/events_engine\");\r\nvar _events_engine2 = _interopRequireDefault(_events_engine);\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _selectors = require(\"../widget/selectors\");\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _button = require(\"../button\");\r\nvar _button2 = _interopRequireDefault(_button);\r\nvar _pointer = require(\"../../events/pointer\");\r\nvar _pointer2 = _interopRequireDefault(_pointer);\r\nvar _validation_engine = require(\"../validation_engine\");\r\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\r\nvar _validator = require(\"../validator\");\r\nvar _validator2 = _interopRequireDefault(_validator);\r\nvar _tooltip = require(\"../tooltip\");\r\nvar _tooltip2 = _interopRequireDefault(_tooltip);\r\nvar _overlay = require(\"../overlay\");\r\nvar _overlay2 = _interopRequireDefault(_overlay);\r\nvar _themes = require(\"../themes\");\r\nvar _themes2 = _interopRequireDefault(_themes);\r\nvar _ui = require(\"../widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _load_indicator = require(\"../load_indicator\");\r\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\r\nvar _string = require(\"../../core/utils/string\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread()\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) {\r\n        return\r\n    }\r\n    if (\"string\" === typeof o) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (\"Object\" === n && o.constructor) {\r\n        n = o.constructor.name\r\n    }\r\n    if (\"Map\" === n || \"Set\" === n) {\r\n        return Array.from(o)\r\n    }\r\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n    if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\r\n        return Array.from(iter)\r\n    }\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n        return _arrayLikeToArray(arr)\r\n    }\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n    if (null == len || len > arr.length) {\r\n        len = arr.length\r\n    }\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n        arr2[i] = arr[i]\r\n    }\r\n    return arr2\r\n}\r\nvar INVALIDATE_CLASS = \"invalid\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\r\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\r\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\r\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nvar CELL_HIGHLIGHT_OUTLINE = \"dx-highlight-outline\";\r\nvar VALIDATOR_CLASS = \"validator\";\r\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\r\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar PADDING_BETWEEN_TOOLTIPS = 2;\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\r\nvar COMMAND_TRANSPARENT = \"transparent\";\r\nvar VALIDATION_STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar VALIDATION_CANCELLED = \"cancel\";\r\nvar validationResultIsValid = function(result) {\r\n    return (0, _type.isDefined)(result) && result !== VALIDATION_CANCELLED\r\n};\r\nvar cellValueShouldBeValidated = function(value, rowOptions) {\r\n    return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow\r\n};\r\nvar rowIsValidated = function(editData) {\r\n    return !!editData && !!editData.validated\r\n};\r\nvar ValidatingController = _uiGrid_core2.default.Controller.inherit(function() {\r\n    return {\r\n        init: function() {\r\n            this._editingController = this.getController(\"editing\");\r\n            this.createAction(\"onRowValidating\")\r\n        },\r\n        _getBrokenRules: function(editData, validationResults) {\r\n            var brokenRules;\r\n            if (validationResults) {\r\n                brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule]\r\n            } else {\r\n                brokenRules = editData.brokenRules || []\r\n            }\r\n            return brokenRules\r\n        },\r\n        _rowValidating: function(editData, validationResults) {\r\n            var deferred = new _deferred.Deferred;\r\n            var brokenRules = this._getBrokenRules(editData, validationResults);\r\n            var isValid = validationResults ? validationResults.isValid : editData.isValid;\r\n            var parameters = {\r\n                brokenRules: brokenRules,\r\n                isValid: isValid,\r\n                key: editData.key,\r\n                newData: editData.data,\r\n                oldData: editData.oldData,\r\n                promise: null,\r\n                errorText: this.getHiddenValidatorsErrorText(brokenRules)\r\n            };\r\n            this.executeAction(\"onRowValidating\", parameters);\r\n            (0, _deferred.when)(parameters.promise).always(function() {\r\n                editData.isValid = parameters.isValid;\r\n                editData.errorText = parameters.errorText;\r\n                deferred.resolve(parameters)\r\n            });\r\n            return deferred.promise()\r\n        },\r\n        getHiddenValidatorsErrorText: function(brokenRules) {\r\n            var brokenRulesMessages = [];\r\n            (0, _iterator.each)(brokenRules, function(_, brokenRule) {\r\n                var column = brokenRule.column;\r\n                var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\r\n                var isVisibleColumn = column && column.visible;\r\n                if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\r\n                    brokenRulesMessages.push(brokenRule.message)\r\n                }\r\n            });\r\n            return brokenRulesMessages.join(\", \")\r\n        },\r\n        validate: function(isFull) {\r\n            var _this = this;\r\n            var isValid = true;\r\n            var editingController = this._editingController;\r\n            var deferred = new _deferred.Deferred;\r\n            var completeList = [];\r\n            var editMode = editingController.getEditMode();\r\n            isFull = isFull || editMode === EDIT_MODE_ROW;\r\n            if (this._isValidationInProgress) {\r\n                return deferred.resolve(false).promise()\r\n            }\r\n            this._isValidationInProgress = true;\r\n            if (isFull) {\r\n                editingController.addDeferred(deferred);\r\n                (0, _iterator.each)(editingController._editData, function(index, editData) {\r\n                    if (editData.type && \"remove\" !== editData.type) {\r\n                        var validationResult = _this.validateGroup(editData);\r\n                        completeList.push(validationResult);\r\n                        validationResult.done(function(validationResult) {\r\n                            editData.validated = true;\r\n                            isValid = isValid && validationResult.isValid\r\n                        })\r\n                    }\r\n                })\r\n            } else {\r\n                if (this._currentCellValidator) {\r\n                    var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\r\n                    completeList.push(validationResult);\r\n                    validationResult.done(function(validationResult) {\r\n                        isValid = validationResult.isValid\r\n                    })\r\n                }\r\n            }\r\n            _deferred.when.apply(void 0, completeList).done(function() {\r\n                _this._isValidationInProgress = false;\r\n                deferred.resolve(isValid)\r\n            });\r\n            return deferred.promise()\r\n        },\r\n        validateGroup: function validateGroup(editData) {\r\n            var _this2 = this;\r\n            var result = new _deferred.Deferred;\r\n            var validateGroup = _validation_engine2.default.getGroupConfig(editData);\r\n            var validationResult;\r\n            if (validateGroup && validateGroup.validators.length) {\r\n                this.resetRowValidationResults(editData);\r\n                validationResult = _validation_engine2.default.validateGroup(editData)\r\n            }(0, _deferred.when)(validationResult && validationResult.complete || validationResult).done(function(validationResult) {\r\n                (0, _deferred.when)(_this2._rowValidating(editData, validationResult)).done(result.resolve)\r\n            });\r\n            return result.promise()\r\n        },\r\n        isRowDataModified: function(editData) {\r\n            return !(0, _type.isEmptyObject)(editData.data)\r\n        },\r\n        updateEditData: function(editData) {\r\n            var editMode = this._editingController.getEditMode();\r\n            if (FORM_BASED_MODES.indexOf(editMode) === -1) {\r\n                if (editData.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(editData)) {\r\n                    editData.isValid = true;\r\n                    return\r\n                }\r\n                this.setDisableApplyValidationResults(true);\r\n                if (_validation_engine2.default.getGroupConfig(editData)) {\r\n                    var validationResult = _validation_engine2.default.validateGroup(editData);\r\n                    (0, _deferred.when)(validationResult.complete || validationResult).done(function(validationResult) {\r\n                        editData.isValid = validationResult.isValid;\r\n                        editData.brokenRules = validationResult.brokenRules\r\n                    })\r\n                } else {\r\n                    if (!editData.brokenRules || !editData.brokenRules.length) {\r\n                        editData.isValid = true\r\n                    }\r\n                }\r\n                this.setDisableApplyValidationResults(false)\r\n            } else {\r\n                editData.isValid = true\r\n            }\r\n        },\r\n        setValidator: function(validator) {\r\n            this._currentCellValidator = validator\r\n        },\r\n        renderCellPendingIndicator: function($container) {\r\n            var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\r\n            if (!$indicator.length) {\r\n                var $indicatorContainer = $container.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\r\n                if (!$indicatorContainer.length) {\r\n                    $indicatorContainer = $container\r\n                }\r\n                $indicator = (0, _renderer2.default)(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\r\n                this._createComponent($indicator, _load_indicator2.default);\r\n                $container.addClass(VALIDATION_PENDING_CLASS)\r\n            }\r\n        },\r\n        disposeCellPendingIndicator: function($container) {\r\n            var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\r\n            if ($indicator.length) {\r\n                var indicator = _load_indicator2.default.getInstance($indicator);\r\n                if (indicator) {\r\n                    indicator.dispose();\r\n                    indicator.$element().remove()\r\n                }\r\n                $container.removeClass(VALIDATION_PENDING_CLASS)\r\n            }\r\n        },\r\n        validationStatusChanged: function(result) {\r\n            var validator = result.validator;\r\n            var editData = validator.option(\"validationGroup\");\r\n            var column = validator.option(\"dataGetter\")().column;\r\n            this.updateCellValidationResult({\r\n                rowKey: editData.key,\r\n                columnIndex: column.index,\r\n                validationResult: result\r\n            })\r\n        },\r\n        validatorInitialized: function(arg) {\r\n            arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\r\n            arg.component.on(\"validated\", this.validationStatusChanged.bind(this))\r\n        },\r\n        validatorDisposing: function(arg) {\r\n            var validator = arg.component;\r\n            var editData = validator.option(\"validationGroup\");\r\n            var column = validator.option(\"dataGetter\")().column;\r\n            var result = this.getCellValidationResult({\r\n                rowKey: editData.key,\r\n                columnIndex: column.index\r\n            });\r\n            if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\r\n                this.cancelCellValidationResult({\r\n                    editData: editData,\r\n                    columnIndex: column.index\r\n                })\r\n            }\r\n        },\r\n        applyValidationResult: function($container, result) {\r\n            var validator = result.validator;\r\n            var editData = validator.option(\"validationGroup\");\r\n            var column = validator.option(\"dataGetter\")().column;\r\n            result.brokenRules && result.brokenRules.forEach(function(rule) {\r\n                rule.columnIndex = column.index;\r\n                rule.column = column\r\n            });\r\n            if ($container) {\r\n                var validationResult = this.getCellValidationResult({\r\n                    rowKey: editData.key,\r\n                    columnIndex: column.index\r\n                });\r\n                var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\r\n                if (this._disableApplyValidationResults || requestIsDisabled) {\r\n                    return\r\n                }\r\n                if (result.status === VALIDATION_STATUS.invalid) {\r\n                    var $focus = $container.find(\":focus\");\r\n                    this._editingController.showHighlighting($container, true);\r\n                    if (!(0, _selectors.focused)($focus)) {\r\n                        _events_engine2.default.trigger($focus, \"focus\");\r\n                        _events_engine2.default.trigger($focus, _pointer2.default.down)\r\n                    }\r\n                }\r\n                var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\r\n                if (result.status === VALIDATION_STATUS.pending) {\r\n                    this._editingController.showHighlighting($container, true);\r\n                    if (editor) {\r\n                        editor.option(\"validationStatus\", VALIDATION_STATUS.pending)\r\n                    } else {\r\n                        this.renderCellPendingIndicator($container)\r\n                    }\r\n                } else {\r\n                    if (editor) {\r\n                        editor.option(\"validationStatus\", VALIDATION_STATUS.valid)\r\n                    } else {\r\n                        this.disposeCellPendingIndicator($container)\r\n                    }\r\n                }\r\n                $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid)\r\n            }\r\n        },\r\n        createValidator: function(parameters, $container) {\r\n            var _this3 = this;\r\n            var editData;\r\n            var editIndex;\r\n            var editingController = this._editingController;\r\n            var column = parameters.column;\r\n            var getValue = function() {\r\n                var value = column.calculateCellValue(editData.data || {});\r\n                return void 0 !== value ? value : parameters.value\r\n            };\r\n            var showEditorAlways = column.showEditorAlways;\r\n            if ((0, _type.isDefined)(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\r\n                return\r\n            }\r\n            editIndex = editingController.getIndexByKey(parameters.key, editingController._editData);\r\n            if (editIndex < 0) {\r\n                if (!showEditorAlways) {\r\n                    var columnsController = this.getController(\"columns\");\r\n                    var visibleColumns = columnsController && columnsController.getVisibleColumns() || [];\r\n                    showEditorAlways = visibleColumns.some(function(column) {\r\n                        return column.showEditorAlways\r\n                    })\r\n                }\r\n                if (showEditorAlways && editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\r\n                        row: parameters.row\r\n                    })) {\r\n                    editIndex = editingController._addEditData({\r\n                        key: parameters.key,\r\n                        oldData: parameters.data\r\n                    })\r\n                }\r\n            }\r\n            if (editIndex >= 0) {\r\n                if ($container && !$container.length) {\r\n                    _ui2.default.log(\"E1050\");\r\n                    return\r\n                }\r\n                editData = editingController._editData[editIndex];\r\n                var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\r\n                $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\r\n                var validator = new _validator2.default($container || (0, _renderer2.default)(\"<div>\"), {\r\n                    name: column.caption,\r\n                    validationRules: (0, _extend.extend)(true, [], column.validationRules),\r\n                    validationGroup: editData,\r\n                    adapter: useDefaultValidator ? null : {\r\n                        getValue: getValue,\r\n                        applyValidationResults: function(result) {\r\n                            _this3.applyValidationResult($container, result)\r\n                        }\r\n                    },\r\n                    dataGetter: function() {\r\n                        return {\r\n                            data: (0, _uiGrid_core3.createObjectWithChanges)(editData.oldData, editData.data),\r\n                            column: column\r\n                        }\r\n                    },\r\n                    onInitialized: this.validatorInitialized.bind(this),\r\n                    onDisposing: this.validatorDisposing.bind(this)\r\n                });\r\n                if (useDefaultValidator) {\r\n                    var adapter = validator.option(\"adapter\");\r\n                    if (adapter) {\r\n                        adapter.getValue = getValue;\r\n                        adapter.validationRequestsCallbacks.empty()\r\n                    }\r\n                }\r\n                return validator\r\n            }\r\n        },\r\n        setDisableApplyValidationResults: function(flag) {\r\n            this._disableApplyValidationResults = flag\r\n        },\r\n        getDisableApplyValidationResults: function() {\r\n            return this._disableApplyValidationResults\r\n        },\r\n        isCurrentValidatorProcessing: function(_ref) {\r\n            var rowKey = _ref.rowKey,\r\n                columnIndex = _ref.columnIndex;\r\n            return this._currentCellValidator && this._currentCellValidator.option(\"validationGroup\").key === rowKey && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex\r\n        },\r\n        validateCell: function(validator) {\r\n            var cellParams = {\r\n                rowKey: validator.option(\"validationGroup\").key,\r\n                columnIndex: validator.option(\"dataGetter\")().column.index\r\n            };\r\n            var validationResult = this.getCellValidationResult(cellParams);\r\n            var stateRestored = validationResultIsValid(validationResult);\r\n            if (!stateRestored) {\r\n                validationResult = validator.validate()\r\n            }\r\n            var deferred = new _deferred.Deferred;\r\n            var adapter = validator.option(\"adapter\");\r\n            if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\r\n                this.updateCellValidationResult(cellParams);\r\n                adapter.applyValidationResults(validationResult)\r\n            }(0, _deferred.when)(validationResult.complete || validationResult).done(function(validationResult) {\r\n                stateRestored && adapter.applyValidationResults(validationResult);\r\n                deferred.resolve(validationResult)\r\n            });\r\n            return deferred.promise()\r\n        },\r\n        updateCellValidationResult: function(_ref2) {\r\n            var rowKey = _ref2.rowKey,\r\n                columnIndex = _ref2.columnIndex,\r\n                validationResult = _ref2.validationResult;\r\n            var editData = this._editingController.getEditDataByKey(rowKey);\r\n            if (!editData) {\r\n                return\r\n            }\r\n            if (!editData.validationResults) {\r\n                editData.validationResults = {}\r\n            }\r\n            var result;\r\n            if (validationResult) {\r\n                result = (0, _extend.extend)({}, validationResult);\r\n                editData.validationResults[columnIndex] = result;\r\n                if (validationResult.status === VALIDATION_STATUS.pending) {\r\n                    if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                        result.deferred = new _deferred.Deferred;\r\n                        result.complete.always(function() {\r\n                            result.deferred.resolve()\r\n                        });\r\n                        this._editingController.addDeferred(result.deferred)\r\n                    }\r\n                    if (this._disableApplyValidationResults) {\r\n                        result.disabledPendingId = validationResult.id;\r\n                        return\r\n                    }\r\n                }\r\n            } else {\r\n                result = editData.validationResults[columnIndex]\r\n            }\r\n            if (result && result.disabledPendingId) {\r\n                delete result.disabledPendingId\r\n            }\r\n        },\r\n        getCellValidationResult: function(_ref3) {\r\n            var rowKey = _ref3.rowKey,\r\n                columnIndex = _ref3.columnIndex;\r\n            var editData = this._editingController.getEditDataByKey(rowKey);\r\n            return editData && editData.validationResults && editData.validationResults[columnIndex]\r\n        },\r\n        removeCellValidationResult: function(_ref4) {\r\n            var editData = _ref4.editData,\r\n                columnIndex = _ref4.columnIndex;\r\n            if (editData && editData.validationResults) {\r\n                this.cancelCellValidationResult({\r\n                    editData: editData,\r\n                    columnIndex: columnIndex\r\n                });\r\n                delete editData.validationResults[columnIndex]\r\n            }\r\n        },\r\n        cancelCellValidationResult: function(_ref5) {\r\n            var editData = _ref5.editData,\r\n                columnIndex = _ref5.columnIndex;\r\n            if (editData && editData.validationResults) {\r\n                var result = editData.validationResults[columnIndex];\r\n                if (result) {\r\n                    result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\r\n                    editData.validationResults[columnIndex] = VALIDATION_CANCELLED\r\n                }\r\n            }\r\n        },\r\n        resetRowValidationResults: function(editData) {\r\n            if (editData) {\r\n                editData.validationResults && delete editData.validationResults;\r\n                delete editData.validated\r\n            }\r\n        },\r\n        isInvalidCell: function(_ref6) {\r\n            var rowKey = _ref6.rowKey,\r\n                columnIndex = _ref6.columnIndex;\r\n            var result = this.getCellValidationResult({\r\n                rowKey: rowKey,\r\n                columnIndex: columnIndex\r\n            });\r\n            return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid\r\n        },\r\n        getCellValidator: function(_ref7) {\r\n            var rowKey = _ref7.rowKey,\r\n                columnIndex = _ref7.columnIndex;\r\n            var editData = this._editingController.getEditDataByKey(rowKey);\r\n            var groupConfig = editData && _validation_engine2.default.getGroupConfig(editData);\r\n            var validators = groupConfig && groupConfig.validators;\r\n            return validators && validators.filter(function(v) {\r\n                var column = v.option(\"dataGetter\")().column;\r\n                return column ? column.index === columnIndex : false\r\n            })[0]\r\n        },\r\n        setCellValidationStatus: function(cellOptions) {\r\n            var validationResult = this.getCellValidationResult({\r\n                rowKey: cellOptions.key,\r\n                columnIndex: cellOptions.column.index\r\n            });\r\n            if ((0, _type.isDefined)(validationResult)) {\r\n                cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED\r\n            } else {\r\n                delete cellOptions.validationStatus\r\n            }\r\n        }\r\n    }\r\n}());\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                texts: {\r\n                    validationCancelChanges: _message2.default.format(\"dxDataGrid-validationCancelChanges\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        validating: ValidatingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                _addEditData: function(options, row) {\r\n                    var that = this;\r\n                    var validatingController = that.getController(\"validating\");\r\n                    var editDataIndex = that.callBase(options, row);\r\n                    if (editDataIndex >= 0) {\r\n                        var editData = that._editData[editDataIndex];\r\n                        validatingController.updateEditData(editData)\r\n                    }\r\n                    return editDataIndex\r\n                },\r\n                _updateRowAndPageIndices: function() {\r\n                    var that = this;\r\n                    var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\r\n                    var rowIndex = startInsertIndex;\r\n                    (0, _iterator.each)(that._editData, function(_, editData) {\r\n                        if (!editData.isValid && editData.pageIndex !== that._pageIndex) {\r\n                            editData.pageIndex = that._pageIndex;\r\n                            if (editData.type === EDIT_DATA_INSERT_TYPE) {\r\n                                editData.rowIndex = startInsertIndex\r\n                            } else {\r\n                                editData.rowIndex = rowIndex\r\n                            }\r\n                            rowIndex++\r\n                        }\r\n                    })\r\n                },\r\n                _needInsertItem: function(editData) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    if (result && !editData.isValid) {\r\n                        result = editData.key.pageIndex === this._pageIndex\r\n                    }\r\n                    return result\r\n                },\r\n                processItems: function(items, changeType) {\r\n                    var that = this;\r\n                    var i;\r\n                    var editData = that._editData;\r\n                    var dataController = that.getController(\"data\");\r\n                    var getIndexByEditData = function(editData, items) {\r\n                        var index = -1;\r\n                        var isInsert = editData.type === EDIT_DATA_INSERT_TYPE;\r\n                        var key = editData.key;\r\n                        (0, _iterator.each)(items, function(i, item) {\r\n                            if ((0, _common.equalByValue)(key, isInsert ? item : dataController.keyOf(item))) {\r\n                                index = i;\r\n                                return false\r\n                            }\r\n                        });\r\n                        return index\r\n                    };\r\n                    items = that.callBase(items, changeType);\r\n                    var itemsCount = items.length;\r\n                    var addInValidItem = function(editData) {\r\n                        var data = {\r\n                            key: editData.key\r\n                        };\r\n                        var index = getIndexByEditData(editData, items);\r\n                        if (index >= 0) {\r\n                            return\r\n                        }\r\n                        editData.rowIndex = editData.rowIndex > itemsCount ? editData.rowIndex % itemsCount : editData.rowIndex;\r\n                        var rowIndex = editData.rowIndex;\r\n                        data[INSERT_INDEX] = 1;\r\n                        items.splice(rowIndex, 0, data)\r\n                    };\r\n                    if (that.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\r\n                        for (i = 0; i < editData.length; i++) {\r\n                            if (editData[i].type && editData[i].pageIndex === that._pageIndex && editData[i].key.pageIndex !== that._pageIndex) {\r\n                                addInValidItem(editData[i])\r\n                            }\r\n                        }\r\n                    }\r\n                    return items\r\n                },\r\n                processDataItem: function(item) {\r\n                    var that = this;\r\n                    var isInserted = item.data[INSERT_INDEX];\r\n                    var key = isInserted ? item.data.key : item.key;\r\n                    var editMode = that.getEditMode();\r\n                    if (editMode === EDIT_MODE_BATCH && isInserted && key) {\r\n                        var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\r\n                        if (editIndex >= 0) {\r\n                            var editData = that._editData[editIndex];\r\n                            if (editData.type !== EDIT_DATA_INSERT_TYPE) {\r\n                                item.data = (0, _extend.extend)(true, {}, editData.oldData, editData.data);\r\n                                item.key = key\r\n                            }\r\n                        }\r\n                    }\r\n                    that.callBase.apply(that, arguments)\r\n                },\r\n                _getInvisibleColumns: function(editData) {\r\n                    var _this4 = this;\r\n                    var columnsController = this.getController(\"columns\");\r\n                    var hasInvisibleRows;\r\n                    var invisibleColumns = columnsController.getInvisibleColumns();\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        hasInvisibleRows = editData.some(function(rowEditData) {\r\n                            var rowIndex = _this4._dataController.getRowIndexByKey(rowEditData.key);\r\n                            return rowIndex < 0\r\n                        })\r\n                    }\r\n                    return hasInvisibleRows ? columnsController.getColumns() : invisibleColumns\r\n                },\r\n                _createInvisibleColumnValidators: function(editData) {\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var columnsController = this.getController(\"columns\");\r\n                    var invisibleColumns = this._getInvisibleColumns(editData).filter(function(column) {\r\n                        return !column.isBand\r\n                    });\r\n                    var groupColumns = columnsController.getGroupColumns().filter(function(column) {\r\n                        return !column.showWhenGrouped && invisibleColumns.indexOf(column) === -1\r\n                    });\r\n                    var invisibleColumnValidators = [];\r\n                    invisibleColumns.push.apply(invisibleColumns, _toConsumableArray(groupColumns));\r\n                    if (FORM_BASED_MODES.indexOf(this.getEditMode()) === -1) {\r\n                        (0, _iterator.each)(invisibleColumns, function(_, column) {\r\n                            editData.forEach(function(options) {\r\n                                var data;\r\n                                if (options.type === EDIT_DATA_INSERT_TYPE) {\r\n                                    data = options.data\r\n                                } else {\r\n                                    if (\"update\" === options.type) {\r\n                                        data = (0, _uiGrid_core3.createObjectWithChanges)(options.oldData, options.data)\r\n                                    }\r\n                                }\r\n                                if (data) {\r\n                                    var validator = validatingController.createValidator({\r\n                                        column: column,\r\n                                        key: options.key,\r\n                                        value: column.calculateCellValue(data)\r\n                                    });\r\n                                    if (validator) {\r\n                                        invisibleColumnValidators.push(validator)\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                    return function() {\r\n                        invisibleColumnValidators.forEach(function(validator) {\r\n                            validator.dispose()\r\n                        })\r\n                    }\r\n                },\r\n                _beforeSaveEditData: function(editData, editIndex) {\r\n                    var _this5 = this;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (editData) {\r\n                        var isValid = \"remove\" === editData.type || editData.isValid;\r\n                        result = result || !isValid\r\n                    } else {\r\n                        var disposeValidators = this._createInvisibleColumnValidators(this._editData);\r\n                        result = new _deferred.Deferred;\r\n                        this.executeOperation(result, function() {\r\n                            validatingController.validate(true).done(function(isFullValid) {\r\n                                disposeValidators();\r\n                                _this5._updateRowAndPageIndices();\r\n                                switch (_this5.getEditMode()) {\r\n                                    case EDIT_MODE_CELL:\r\n                                        if (!isFullValid) {\r\n                                            _this5._focusEditingCell()\r\n                                        }\r\n                                        break;\r\n                                    case EDIT_MODE_BATCH:\r\n                                        if (!isFullValid) {\r\n                                            _this5._editRowIndex = -1;\r\n                                            _this5._editColumnIndex = -1;\r\n                                            _this5.getController(\"data\").updateItems()\r\n                                        }\r\n                                }\r\n                                result.resolve(!isFullValid)\r\n                            })\r\n                        })\r\n                    }\r\n                    return result.promise ? result.promise() : result\r\n                },\r\n                _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n                    var result = this.callBase(rowIndex, columnIndex, item);\r\n                    if (this.getEditMode() === EDIT_MODE_CELL) {\r\n                        var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\r\n                        var validator = $cell && $cell.data(\"dxValidator\");\r\n                        var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\r\n                        var value = validator && validator.option(\"adapter\").getValue();\r\n                        if (validator && cellValueShouldBeValidated(value, rowOptions)) {\r\n                            var validatingController = this.getController(\"validating\");\r\n                            var deferred = new _deferred.Deferred;\r\n                            (0, _deferred.when)(validatingController.validateCell(validator), result).done(function(validationResult, result) {\r\n                                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result)\r\n                            });\r\n                            return deferred.promise()\r\n                        } else {\r\n                            if (!validator) {\r\n                                return result\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _afterSaveEditData: function(cancel) {\r\n                    var _this6 = this;\r\n                    var $firstErrorRow;\r\n                    (0, _iterator.each)(this._editData, function(_, editData) {\r\n                        var $errorRow = _this6._showErrorRow(editData);\r\n                        $firstErrorRow = $firstErrorRow || $errorRow\r\n                    });\r\n                    if ($firstErrorRow) {\r\n                        var scrollable = this._rowsView.getScrollable();\r\n                        if (scrollable) {\r\n                            scrollable.update();\r\n                            scrollable.scrollToElement($firstErrorRow)\r\n                        }\r\n                    }\r\n                    if (cancel && this.getEditMode() === EDIT_MODE_CELL && this._needUpdateRow()) {\r\n                        var editRowIndex = this.getEditRowIndex();\r\n                        this._dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [editRowIndex]\r\n                        });\r\n                        this._focusEditingCell()\r\n                    }\r\n                },\r\n                _showErrorRow: function(editData) {\r\n                    var $popupContent;\r\n                    var errorHandling = this.getController(\"errorHandling\");\r\n                    var items = this.getController(\"data\").items();\r\n                    var rowIndex = this.getIndexByKey(editData.key, items);\r\n                    if (!editData.isValid && editData.errorText && rowIndex >= 0) {\r\n                        $popupContent = this.getPopupContent();\r\n                        return errorHandling && errorHandling.renderErrorRow(editData.errorText, rowIndex, $popupContent)\r\n                    }\r\n                },\r\n                updateFieldValue: function(e) {\r\n                    var _this7 = this;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var deferred = new _deferred.Deferred;\r\n                    validatingController.removeCellValidationResult({\r\n                        editData: this.getEditDataByKey(e.key),\r\n                        columnIndex: e.column.index\r\n                    });\r\n                    this.callBase.apply(this, arguments).done(function() {\r\n                        var currentValidator = validatingController.getCellValidator({\r\n                            rowKey: e.key,\r\n                            columnIndex: e.column.index\r\n                        });\r\n                        (0, _deferred.when)(currentValidator && validatingController.validateCell(currentValidator)).done(function(validationResult) {\r\n                            _this7.getController(\"editorFactory\").refocus();\r\n                            deferred.resolve(validationResult)\r\n                        })\r\n                    });\r\n                    return deferred.promise()\r\n                },\r\n                showHighlighting: function($cell, skipValidation) {\r\n                    var _this8 = this;\r\n                    var isValid = true;\r\n                    var callBase = this.callBase;\r\n                    var deferred = new _deferred.Deferred;\r\n                    if (!skipValidation) {\r\n                        var validator = $cell.data(\"dxValidator\");\r\n                        if (validator) {\r\n                            (0, _deferred.when)(this.getController(\"validating\").validateCell(validator)).done(function(validationResult) {\r\n                                isValid = validationResult.status === VALIDATION_STATUS.valid;\r\n                                if (isValid) {\r\n                                    callBase.call(_this8, $cell)\r\n                                }\r\n                                deferred.resolve()\r\n                            });\r\n                            return deferred.promise()\r\n                        }\r\n                    }\r\n                    if (isValid) {\r\n                        callBase.call(this, $cell)\r\n                    }\r\n                    return deferred.resolve().promise()\r\n                },\r\n                highlightDataCell: function($cell, parameters) {\r\n                    var isEditableCell = !!parameters.setValue;\r\n                    var cellModified = this.isCellModified(parameters);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (!cellModified && isEditableCell) {\r\n                        validatingController.setCellValidationStatus(parameters);\r\n                        var isValidated = (0, _type.isDefined)(parameters.validationStatus);\r\n                        var skipValidation = parameters.row.isNewRow || !isValidated;\r\n                        (0, _deferred.when)(this.showHighlighting($cell, skipValidation)).done(function() {\r\n                            validatingController.setCellValidationStatus(parameters)\r\n                        });\r\n                        return\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                getEditDataByKey: function(key) {\r\n                    return this._editData[(0, _uiGrid_core3.getIndexByKey)(key, this._editData)]\r\n                },\r\n                isCellModified: function(parameters) {\r\n                    var cellModified = this.callBase(parameters);\r\n                    var editData = this.getEditDataByKey(parameters.key);\r\n                    var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\r\n                        rowKey: parameters.key,\r\n                        columnIndex: parameters.column.index\r\n                    });\r\n                    return cellModified || rowIsValidated(editData) && isCellInvalid\r\n                }\r\n            },\r\n            editorFactory: function() {\r\n                var getWidthOfVisibleCells = function(that, element) {\r\n                    var rowIndex = (0, _renderer2.default)(element).closest(\"tr\").index();\r\n                    var $cellElements = (0, _renderer2.default)(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\r\n                    return that._rowsView._getWidths($cellElements).reduce(function(w1, w2) {\r\n                        return w1 + w2\r\n                    }, 0)\r\n                };\r\n                var getBoundaryNonFixedColumnsInfo = function(fixedColumns) {\r\n                    var firstNonFixedColumnIndex;\r\n                    var lastNonFixedColumnIndex;\r\n                    fixedColumns.some(function(column, index) {\r\n                        if (column.command === COMMAND_TRANSPARENT) {\r\n                            firstNonFixedColumnIndex = 0 === index ? -1 : index;\r\n                            lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\r\n                            return true\r\n                        }\r\n                    });\r\n                    return {\r\n                        startColumnIndex: firstNonFixedColumnIndex,\r\n                        endColumnIndex: lastNonFixedColumnIndex\r\n                    }\r\n                };\r\n                return {\r\n                    _showRevertButton: function($container, $targetElement) {\r\n                        var _this9 = this;\r\n                        if (!$targetElement || !$targetElement.length) {\r\n                            return\r\n                        }\r\n                        var $tooltipElement = $container.find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\r\n                        $tooltipElement && $tooltipElement.remove();\r\n                        $tooltipElement = (0, _renderer2.default)(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\r\n                        var tooltipOptions = {\r\n                            animation: null,\r\n                            visible: true,\r\n                            target: $targetElement,\r\n                            container: $container,\r\n                            closeOnOutsideClick: false,\r\n                            closeOnTargetScroll: false,\r\n                            contentTemplate: function() {\r\n                                var $buttonElement = (0, _renderer2.default)(\"<div>\").addClass(REVERT_BUTTON_CLASS);\r\n                                var buttonOptions = {\r\n                                    icon: \"revert\",\r\n                                    hint: _this9.option(\"editing.texts.validationCancelChanges\"),\r\n                                    onClick: function() {\r\n                                        _this9._editingController.cancelEditData()\r\n                                    }\r\n                                };\r\n                                return new _button2.default($buttonElement, buttonOptions).$element()\r\n                            },\r\n                            position: {\r\n                                my: \"left top\",\r\n                                at: \"right top\",\r\n                                of: $targetElement,\r\n                                offset: \"1 0\",\r\n                                collision: \"flip\",\r\n                                boundary: this._rowsView.element()\r\n                            },\r\n                            onPositioned: this._positionedHandler.bind(this)\r\n                        };\r\n                        return new _tooltip2.default($tooltipElement, tooltipOptions)\r\n                    },\r\n                    _hideFixedGroupCell: function($cell, overlayOptions) {\r\n                        var $nextFixedRowElement;\r\n                        var $groupCellElement;\r\n                        var isFixedColumns = this._rowsView.isFixedColumns();\r\n                        var isFormEditMode = this._editingController.isFormEditMode();\r\n                        if (isFixedColumns && !isFormEditMode) {\r\n                            var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\r\n                            if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\r\n                                $nextFixedRowElement = (0, _renderer2.default)(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\r\n                                $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\r\n                                if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\r\n                                    $groupCellElement.css(\"visibility\", \"hidden\");\r\n                                    overlayOptions.onDisposing = function() {\r\n                                        $groupCellElement.css(\"visibility\", \"\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    _positionedHandler: function(e, isOverlayVisible) {\r\n                        if (!e.component.__skipPositionProcessing) {\r\n                            var isRevertButton = (0, _renderer2.default)(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\r\n                            var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\r\n                            var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\r\n                            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\r\n                            if (normalizedPosition) {\r\n                                e.component.option(normalizedPosition)\r\n                            } else {\r\n                                if (needRepaint) {\r\n                                    e.component.repaint()\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    _showValidationMessage: function($cell, messages, alignment, revertTooltip) {\r\n                        var _this10 = this;\r\n                        var $highlightContainer = $cell.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\r\n                        var isMaterial = _themes2.default.isMaterial();\r\n                        var overlayTarget = $highlightContainer.length && !isMaterial ? $highlightContainer : $cell;\r\n                        var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\r\n                        var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\r\n                        var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\r\n                        var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\r\n                        var errorMessageText = \"\";\r\n                        messages && messages.forEach(function(message) {\r\n                            errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + (0, _string.encodeHtml)(message)\r\n                        });\r\n                        var $overlayElement = (0, _renderer2.default)(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).html(errorMessageText).appendTo($cell);\r\n                        var overlayOptions = {\r\n                            target: overlayTarget,\r\n                            container: $cell,\r\n                            shading: false,\r\n                            width: \"auto\",\r\n                            height: \"auto\",\r\n                            visible: true,\r\n                            animation: false,\r\n                            propagateOutsideClick: true,\r\n                            closeOnOutsideClick: false,\r\n                            closeOnTargetScroll: false,\r\n                            position: {\r\n                                collision: \"flip\",\r\n                                boundary: this._rowsView.element(),\r\n                                boundaryOffset: \"0 0\",\r\n                                my: myPosition,\r\n                                at: atPosition\r\n                            },\r\n                            onPositioned: function(e) {\r\n                                _this10._positionedHandler(e, isOverlayVisible);\r\n                                _this10._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell)\r\n                            }\r\n                        };\r\n                        this._hideFixedGroupCell($cell, overlayOptions);\r\n                        new _overlay2.default($overlayElement, overlayOptions)\r\n                    },\r\n                    _normalizeValidationMessagePositionAndMaxWidth: function(options, isRevertButton, isOverlayVisible) {\r\n                        var fixedColumns = this._columnsController.getFixedColumns();\r\n                        if (!fixedColumns || !fixedColumns.length) {\r\n                            return\r\n                        }\r\n                        var position;\r\n                        var visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element);\r\n                        var $overlayContentElement = isRevertButton ? options.component.overlayContent() : options.component.$content();\r\n                        var validationMessageWidth = $overlayContentElement.outerWidth(true);\r\n                        var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\r\n                        var columnIndex = this._rowsView.getCellIndex((0, _renderer2.default)(options.element).closest(\"td\"));\r\n                        var boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\r\n                        if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\r\n                            position = {\r\n                                collision: \"none flip\",\r\n                                my: \"top left\",\r\n                                at: isOverlayVisible ? \"top right\" : \"bottom left\"\r\n                            }\r\n                        } else {\r\n                            if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\r\n                                position = {\r\n                                    collision: \"none flip\",\r\n                                    my: \"top right\",\r\n                                    at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\r\n                                };\r\n                                if (isRevertButton) {\r\n                                    position.offset = \"-1 0\"\r\n                                }\r\n                            }\r\n                        }\r\n                        return position && {\r\n                            position: position,\r\n                            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\r\n                        }\r\n                    },\r\n                    _shiftValidationMessageIfNeed: function($content, $revertContent, $cell) {\r\n                        if (!$revertContent) {\r\n                            return\r\n                        }\r\n                        var contentOffset = $content.offset();\r\n                        var revertContentOffset = $revertContent.offset();\r\n                        if (contentOffset.top === revertContentOffset.top && contentOffset.left + $content.width() > revertContentOffset.left) {\r\n                            var left = $revertContent.width() + PADDING_BETWEEN_TOOLTIPS;\r\n                            $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left)\r\n                        }\r\n                    },\r\n                    _getTooltipsSelector: function() {\r\n                        var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\r\n                        var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\r\n                        return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass\r\n                    },\r\n                    init: function() {\r\n                        this.callBase();\r\n                        this._editingController = this.getController(\"editing\");\r\n                        this._columnsController = this.getController(\"columns\");\r\n                        this._rowsView = this.getView(\"rowsView\")\r\n                    },\r\n                    loseFocus: function(skipValidator) {\r\n                        if (!skipValidator) {\r\n                            this.getController(\"validating\").setValidator(null)\r\n                        }\r\n                        this.callBase()\r\n                    },\r\n                    updateCellState: function($element, validationResult, hideBorder) {\r\n                        var $focus = $element && $element.closest(this._getFocusCellSelector());\r\n                        var $cell = $focus && $focus.is(\"td\") ? $focus : null;\r\n                        var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\r\n                        var editData = rowOptions ? this.getController(\"editing\").getEditDataByKey(rowOptions.key) : null;\r\n                        var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\r\n                        var revertTooltip;\r\n                        if (validationResult && validationResult.status === VALIDATION_STATUS.invalid || editData && \"update\" === editData.type && !this._editingController.isSaving()) {\r\n                            if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                                revertTooltip = this._showRevertButton($focus, $cell ? $focus.find(\".\" + CELL_HIGHLIGHT_OUTLINE).first() : $focus)\r\n                            }\r\n                        }\r\n                        var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\r\n                        if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\r\n                            var errorMessages = [];\r\n                            validationResult.brokenRules.forEach(function(rule) {\r\n                                errorMessages.push(rule.message)\r\n                            });\r\n                            this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip)\r\n                        }!hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight()\r\n                    },\r\n                    focus: function($element, hideBorder) {\r\n                        var _this11 = this;\r\n                        var $focus = $element && $element.closest(this._getFocusCellSelector());\r\n                        var callBase = this.callBase;\r\n                        var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\r\n                        var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\r\n                        var editingController = this.getController(\"editing\");\r\n                        var editData = rowOptions ? editingController.getEditDataByKey(rowOptions.key) : null;\r\n                        var validationResult;\r\n                        var $tooltips = $focus && $focus.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\r\n                        var $cell = $focus && $focus.is(\"td\") ? $focus : null;\r\n                        var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\r\n                        var validatingController = this.getController(\"validating\");\r\n                        if (!arguments.length) {\r\n                            return this.callBase()\r\n                        }\r\n                        $tooltips && $tooltips.remove();\r\n                        if (validator) {\r\n                            validatingController.setValidator(validator);\r\n                            var value = validator.option(\"adapter\").getValue();\r\n                            if (cellValueShouldBeValidated(value, rowOptions) || rowIsValidated(editData)) {\r\n                                editingController.waitForDeferredOperations().done(function() {\r\n                                    (0, _deferred.when)(validatingController.validateCell(validator)).done(function(result) {\r\n                                        validationResult = result;\r\n                                        if (editData && column && !validatingController.isCurrentValidatorProcessing({\r\n                                                rowKey: editData.key,\r\n                                                columnIndex: column.index\r\n                                            })) {\r\n                                            return\r\n                                        }\r\n                                        if (validationResult.status === VALIDATION_STATUS.invalid) {\r\n                                            hideBorder = true\r\n                                        }\r\n                                        _this11.updateCellState($element, validationResult, hideBorder);\r\n                                        callBase.call(_this11, $element, hideBorder)\r\n                                    })\r\n                                });\r\n                                return this.callBase($element, hideBorder)\r\n                            }\r\n                        }\r\n                        this.updateCellState($element, validationResult, hideBorder);\r\n                        return this.callBase($element, hideBorder)\r\n                    },\r\n                    getEditorInstance: function($container) {\r\n                        var $editor = $container.find(\".dx-texteditor\").eq(0);\r\n                        return (0, _uiGrid_core3.getWidgetInstance)($editor)\r\n                    }\r\n                }\r\n            }(),\r\n            data: {\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var cell = oldRow.cells[columnIndex];\r\n                    var oldValidationStatus = cell && cell.validationStatus;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationResult = validatingController.getCellValidationResult({\r\n                        rowKey: oldRow.key,\r\n                        columnIndex: columnIndex\r\n                    });\r\n                    var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\r\n                    var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\r\n                    if (oldValidationStatus !== newValidationStatus && rowIsModified) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var that = this;\r\n                    var $rowElements;\r\n                    var $freeSpaceRowElement;\r\n                    var $freeSpaceRowElements;\r\n                    var $element = that.element();\r\n                    var $tooltipContent = $element && $element.find(\".\" + that.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\r\n                    that.callBase($table);\r\n                    if ($tooltipContent && $tooltipContent.length) {\r\n                        $rowElements = that._getRowElements();\r\n                        $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\r\n                        $freeSpaceRowElement = $freeSpaceRowElements.first();\r\n                        if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || $tooltipContent.outerHeight() > $freeSpaceRowElement.outerHeight())) {\r\n                            $freeSpaceRowElements.show();\r\n                            $freeSpaceRowElements.height($tooltipContent.outerHeight());\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                _formItemPrepared: function(cellOptions, $container) {\r\n                    var _this12 = this;\r\n                    this.callBase.apply(this, arguments);\r\n                    (0, _common.deferUpdate)(function() {\r\n                        var $editor = $container.find(\".dx-widget\").first();\r\n                        var isEditorDisposed = $editor.length && !$editor.children().length;\r\n                        if (!isEditorDisposed) {\r\n                            _this12.getController(\"validating\").createValidator(cellOptions, $editor)\r\n                        }\r\n                    })\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    if (!this.getController(\"editing\").isFormEditMode()) {\r\n                        this.getController(\"validating\").createValidator(parameters, $cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}